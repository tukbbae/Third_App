android.ktpns.hansol05.GCMIntentService -> android.ktpns.hansol05.GCMIntentService:
    void onError(android.content.Context,java.lang.String) -> onError
    void onMessage(android.content.Context,android.content.Intent) -> onMessage
    void onRegistered(android.content.Context,java.lang.String) -> onRegistered
    void onUnregistered(android.content.Context,java.lang.String) -> onUnregistered
android.ktpns.hansol05.LogCursorAdapter -> android.ktpns.hansol05.a:
    java.text.SimpleDateFormat timeFormat -> a
    java.text.SimpleDateFormat dateFormat -> b
    android.content.Context mContext -> c
    java.util.ArrayList mList -> d
    void setViewHolder(android.ktpns.hansol05.LogCursorAdapter$ViewHolder,int) -> a
    java.lang.CharSequence printTime(long) -> a
    java.lang.CharSequence printDate(long) -> b
    void setList(java.util.ArrayList) -> a
    int getCount() -> getCount
    com.ktpns.lib.database.data.DataMsgLog getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
android.ktpns.hansol05.LogCursorAdapter$ViewHolder -> android.ktpns.hansol05.a$a:
    android.widget.TextView item1 -> a
    android.widget.TextView item2 -> b
    android.widget.TextView item3 -> c
    android.widget.TextView itemLog -> d
    android.ktpns.hansol05.LogCursorAdapter this$0 -> e
android.ktpns.hansol05.MainActivity -> android.ktpns.hansol05.MainActivity:
    android.widget.TextView textResult -> a
    java.lang.StringBuilder messageBuilder -> b
    android.ktpns.hansol05.MainActivity$WeakHandler mHandler -> c
    void onCreate(android.os.Bundle) -> onCreate
    boolean isAdminUser(android.content.Context) -> a
    void checkUser() -> a
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void onDestroy() -> onDestroy
    void appendString(java.lang.String) -> a
    void handleMessage(android.os.Message) -> a
    void access$0(android.ktpns.hansol05.MainActivity,android.os.Message) -> a
android.ktpns.hansol05.MainActivity$1 -> android.ktpns.hansol05.b:
    android.ktpns.hansol05.MainActivity this$0 -> a
    void onSuccessInitialize(com.ktpns.lib.KPNSApis) -> onSuccessInitialize
    void onFailInitialize() -> onFailInitialize
android.ktpns.hansol05.MainActivity$2 -> android.ktpns.hansol05.c:
    android.ktpns.hansol05.MainActivity this$0 -> a
    void onSuccessInitialize(com.ktpns.lib.KPNSApis) -> onSuccessInitialize
    void onFailInitialize() -> onFailInitialize
android.ktpns.hansol05.MainActivity$WeakHandler -> android.ktpns.hansol05.MainActivity$a:
    java.lang.ref.WeakReference mSections -> a
    void handleMessage(android.os.Message) -> handleMessage
android.ktpns.hansol05.PushReceiver -> android.ktpns.hansol05.PushReceiver:
    android.os.Handler mHandler -> a
    int messageId -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void dumpIntent(android.content.Intent) -> a
    void sendMessage(java.lang.String) -> a
    void setHandler(android.os.Handler) -> a
    void setPushNotification(android.content.Context,int,java.lang.String) -> a
android.ktpns.hansol05.TabLogList -> android.ktpns.hansol05.TabLogList:
    android.widget.CheckBox checkUser -> a
    android.widget.CheckBox checkTester -> b
    android.widget.CheckBox checkDeveloper -> c
    android.widget.CheckBox checkNetwork -> d
    android.widget.CheckBox checkUtil -> e
    android.widget.ListView lvLog -> f
    android.ktpns.hansol05.LogCursorAdapter adapter -> g
    android.os.Handler displayHandler -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    java.lang.String copyDbToSdcard() -> c
    void copyFile(java.io.File,java.io.File) -> a
    void forceClose() -> d
    void onStop() -> onStop
    void findViews() -> a
    void setViews() -> b
    void handleMessage(android.os.Message) -> a
    java.util.ArrayList queryLog() -> e
    void access$0(android.ktpns.hansol05.TabLogList,android.os.Message) -> a
android.ktpns.hansol05.TabLogList$WeakHandler -> android.ktpns.hansol05.TabLogList$a:
    java.lang.ref.WeakReference mSections -> a
    void handleMessage(android.os.Message) -> handleMessage
android.ktpns.hansol05.TabMain -> android.ktpns.hansol05.TabMain:
    java.lang.String currentTab -> a
    java.lang.String previousTab -> b
    android.widget.TabHost tabHost -> c
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View getTabView(java.lang.String) -> c
    java.lang.String access$0() -> a
    void access$1(java.lang.String) -> a
    void access$2(java.lang.String) -> b
android.ktpns.hansol05.TabMain$1 -> android.ktpns.hansol05.d:
    android.ktpns.hansol05.TabMain this$0 -> a
    void onTabChanged(java.lang.String) -> onTabChanged
android.ktpns.hansol05.TabMain$2 -> android.ktpns.hansol05.e:
    android.ktpns.hansol05.TabMain this$0 -> a
    boolean onLongClick(android.view.View) -> onLongClick
android.ktpns.hansol05.TabSetting -> android.ktpns.hansol05.TabSetting:
    android.widget.TextView text01 -> a
    android.widget.TextView text11 -> b
    android.widget.TextView text02 -> c
    android.widget.TextView text04 -> d
    android.widget.TextView text03 -> e
    android.widget.TextView text06 -> f
    android.widget.TextView text05 -> g
    android.widget.Button btnApply04 -> h
    android.widget.Button btnApply03 -> i
    android.widget.Button btnApply06 -> j
    android.widget.Button btnApply05 -> k
    android.widget.Button btnError1 -> l
    android.widget.Button btnError2 -> m
    android.widget.Button btnError3 -> n
    android.widget.ListView listApp -> o
    android.ktpns.hansol05.TabSetting$AppInfoAdapter mAdapter -> p
    android.widget.Toast mToast -> q
    int[] $SWITCH_TABLE$com$ktpns$lib$net$data$ResponseData$ReturnCode -> r
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void findViews() -> a
    void setViews() -> b
    java.lang.CharSequence printToList(com.ktpns.lib.net.data.PushInfoResponse) -> a
    java.lang.CharSequence printToList(java.util.AbstractQueue) -> a
    void onClick(android.view.View) -> onClick
    android.ktpns.hansol05.TabSetting$AppInfoAdapter access$0(android.ktpns.hansol05.TabSetting) -> a
    android.widget.Toast access$1(android.ktpns.hansol05.TabSetting) -> b
    int[] $SWITCH_TABLE$com$ktpns$lib$net$data$ResponseData$ReturnCode() -> c
android.ktpns.hansol05.TabSetting$1 -> android.ktpns.hansol05.f:
    android.ktpns.hansol05.TabSetting this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.ktpns.hansol05.TabSetting$AppInfoAdapter -> android.ktpns.hansol05.TabSetting$a:
    com.ktpns.lib.database.data.DataAppInfo[] arrAppInfo -> b
    android.ktpns.hansol05.TabSetting this$0 -> a
    void setAppInfoArray(com.ktpns.lib.database.data.DataAppInfo[]) -> a
    int getCount() -> getCount
    com.ktpns.lib.database.data.DataAppInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.b$a:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.c:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    android.support.v4.util.SimpleArrayMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> b
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.d:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.Fragment$a:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.f:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    android.support.v4.util.SimpleArrayMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.f$a:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.f$b:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    android.support.v4.util.SimpleArrayMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SimpleArrayMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.g:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.h:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.h$a:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.i:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.j:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.k:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.l:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.m:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.FragmentTabHost$1:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.n:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.FragmentTabHost$a:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.o:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.p:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.p$a:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.q:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.q$a:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.r:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.NotificationCompat -> android.support.v4.app.s:
    android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL -> a
    android.support.v4.app.NotificationCompat$NotificationCompatImpl access$000() -> a
android.support.v4.app.NotificationCompat$Action -> android.support.v4.app.s$a:
    int icon -> a
    java.lang.CharSequence title -> b
    android.app.PendingIntent actionIntent -> c
android.support.v4.app.NotificationCompat$BigPictureStyle -> android.support.v4.app.s$b:
    android.graphics.Bitmap mPicture -> a
    android.graphics.Bitmap mBigLargeIcon -> b
    boolean mBigLargeIconSet -> c
    android.support.v4.app.NotificationCompat$BigPictureStyle setBigContentTitle(java.lang.CharSequence) -> a
    android.support.v4.app.NotificationCompat$BigPictureStyle setSummaryText(java.lang.CharSequence) -> b
    android.support.v4.app.NotificationCompat$BigPictureStyle bigPicture(android.graphics.Bitmap) -> a
android.support.v4.app.NotificationCompat$BigTextStyle -> android.support.v4.app.s$c:
    java.lang.CharSequence mBigText -> a
android.support.v4.app.NotificationCompat$Builder -> android.support.v4.app.s$d:
    android.content.Context mContext -> a
    java.lang.CharSequence mContentTitle -> b
    java.lang.CharSequence mContentText -> c
    android.app.PendingIntent mContentIntent -> d
    android.app.PendingIntent mFullScreenIntent -> e
    android.widget.RemoteViews mTickerView -> f
    android.graphics.Bitmap mLargeIcon -> g
    java.lang.CharSequence mContentInfo -> h
    int mNumber -> i
    int mPriority -> j
    boolean mUseChronometer -> k
    android.support.v4.app.NotificationCompat$Style mStyle -> l
    java.lang.CharSequence mSubText -> m
    int mProgressMax -> n
    int mProgress -> o
    boolean mProgressIndeterminate -> p
    java.util.ArrayList mActions -> q
    android.app.Notification mNotification -> r
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int) -> a
    android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> a
    android.support.v4.app.NotificationCompat$Builder setContentText(java.lang.CharSequence) -> b
    android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> a
    android.support.v4.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap) -> a
    android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri) -> a
    android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean) -> a
    android.support.v4.app.NotificationCompat$Builder setDefaults(int) -> b
    void setFlag(int,boolean) -> a
    android.support.v4.app.NotificationCompat$Builder setStyle(android.support.v4.app.NotificationCompat$Style) -> a
    android.app.Notification build() -> a
android.support.v4.app.NotificationCompat$InboxStyle -> android.support.v4.app.s$e:
    java.util.ArrayList mTexts -> a
android.support.v4.app.NotificationCompat$NotificationCompatImpl -> android.support.v4.app.s$f:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplBase -> android.support.v4.app.s$g:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb -> android.support.v4.app.s$h:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich -> android.support.v4.app.s$i:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean -> android.support.v4.app.s$j:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$Style -> android.support.v4.app.s$k:
    android.support.v4.app.NotificationCompat$Builder mBuilder -> d
    java.lang.CharSequence mBigContentTitle -> e
    java.lang.CharSequence mSummaryText -> f
    boolean mSummaryTextSet -> g
    void setBuilder(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompatHoneycomb -> android.support.v4.app.t:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> a
android.support.v4.app.NotificationCompatIceCreamSandwich -> android.support.v4.app.u:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> a
android.support.v4.app.NotificationCompatJellybean -> android.support.v4.app.v:
    android.app.Notification$Builder b -> a
    void addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> a
    void addBigTextStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> a
    void addBigPictureStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap,android.graphics.Bitmap,boolean) -> a
    void addInboxStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> a
    android.app.Notification build() -> a
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.w:
android.support.v4.app.TaskStackBuilder -> android.support.v4.app.x:
    android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl IMPL -> a
    java.util.ArrayList mIntents -> b
    android.content.Context mSourceContext -> c
    android.support.v4.app.TaskStackBuilder create(android.content.Context) -> a
    android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent) -> a
    java.util.Iterator iterator() -> iterator
    android.app.PendingIntent getPendingIntent(int,int) -> a
    android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle) -> a
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl -> android.support.v4.app.x$a:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> a
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase -> android.support.v4.app.x$b:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> a
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb -> android.support.v4.app.x$c:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> a
android.support.v4.app.TaskStackBuilderHoneycomb -> android.support.v4.app.y:
    android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int) -> a
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.a$a:
android.support.v4.content.WakefulBroadcastReceiver -> android.support.v4.a.b:
    java.lang.String EXTRA_WAKE_LOCK_ID -> EXTRA_WAKE_LOCK_ID
    android.util.SparseArray mActiveWakeLocks -> mActiveWakeLocks
    int mNextId -> mNextId
    android.content.ComponentName startWakefulService(android.content.Context,android.content.Intent) -> startWakefulService
    boolean completeWakefulIntent(android.content.Intent) -> completeWakefulIntent
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.a$a:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.b:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.c:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.d:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.ArrayMap -> android.support.v4.c.a:
    android.support.v4.util.MapCollections mCollections -> a
    android.support.v4.util.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
android.support.v4.util.ArrayMap$1 -> android.support.v4.c.b:
    android.support.v4.util.ArrayMap this$0 -> a
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.ContainerHelpers -> android.support.v4.c.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.d:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.e:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.MapCollections -> android.support.v4.c.f:
    android.support.v4.util.MapCollections$EntrySet mEntrySet -> b
    android.support.v4.util.MapCollections$KeySet mKeySet -> c
    android.support.v4.util.MapCollections$ValuesCollection mValues -> d
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.MapCollections$ArrayIterator -> android.support.v4.c.f$a:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    android.support.v4.util.MapCollections this$0 -> e
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
android.support.v4.util.MapCollections$EntrySet -> android.support.v4.c.f$b:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
android.support.v4.util.MapCollections$KeySet -> android.support.v4.c.f$c:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
android.support.v4.util.MapCollections$MapIterator -> android.support.v4.c.f$d:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    android.support.v4.util.MapCollections this$0 -> d
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
android.support.v4.util.MapCollections$ValuesCollection -> android.support.v4.c.f$e:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
android.support.v4.util.SimpleArrayMap -> android.support.v4.c.g:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfValue(java.lang.Object) -> a
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.h:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> d
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.view.GravityCompat -> android.support.v4.view.a:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.a$a:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.a$b:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.a$c:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.b:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.c:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.c$a:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.c$b:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.c$c:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.c$d:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.d:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.e:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.f:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.f$a:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.f$b:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.f$c:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.g:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.h:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.i:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.i$a:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.i$b:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.i$c:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.j:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.k:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.k$a:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.k$b:
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.k$c:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.k$d:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.k$e:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.k$f:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.k$g:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.view.k$h:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.k$i:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.l:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.m:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.n:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.o:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.p:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.q:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> aa
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> ab
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ac
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ad
    int mDrawingOrder -> ae
    java.util.ArrayList mDrawingOrderedChildren -> af
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> ag
    java.lang.Runnable mEndScrollRunnable -> ah
    int mScrollState -> ai
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestParentDisallowInterceptTouchEvent(boolean) -> c
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.r:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.s:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ViewPager$a:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.ViewPager$b:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ViewPager$LayoutParams:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ViewPager$c:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ViewPager$d:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.ViewPager$e:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.ViewPager$f:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.t:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.ViewPager$g:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewAbsoluteGravity(android.view.View) -> e
    boolean checkDrawerViewAbsoluteGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.DrawerLayout$a:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.DrawerLayout$LayoutParams:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.a:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.DrawerLayout$b:
    int mAbsGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.b:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.b$a:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.b$b:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.b$c:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.c:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.d:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.d$a:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.d$b:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.d$c:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.d$d:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.e:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.SlidingPaneLayout$1:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.SlidingPaneLayout$a:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.SlidingPaneLayout$LayoutParams:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.SlidingPaneLayout$b:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.f:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.SlidingPaneLayout$c:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.SlidingPaneLayout$d:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.SlidingPaneLayout$e:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.SlidingPaneLayout$f:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.g:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> d
    void ensureMotionHistorySizeForId(int) -> e
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.h:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.g$a:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.google.android.gcm.GCMBaseIntentService -> com.google.android.gcm.GCMBaseIntentService:
    java.lang.String TAG -> TAG
    java.lang.String WAKELOCK_KEY -> WAKELOCK_KEY
    android.os.PowerManager$WakeLock sWakeLock -> sWakeLock
    java.lang.Object LOCK -> LOCK
    java.lang.String[] mSenderIds -> mSenderIds
    int sCounter -> sCounter
    java.util.Random sRandom -> sRandom
    int MAX_BACKOFF_MS -> MAX_BACKOFF_MS
    java.lang.String TOKEN -> TOKEN
    java.lang.String EXTRA_TOKEN -> EXTRA_TOKEN
    java.lang.String getName(java.lang.String) -> getName
    java.lang.String getName(java.lang.String[]) -> getName
    java.lang.String[] getSenderIds(android.content.Context) -> getSenderIds
    void onMessage(android.content.Context,android.content.Intent) -> onMessage
    void onDeletedMessages(android.content.Context,int) -> onDeletedMessages
    boolean onRecoverableError(android.content.Context,java.lang.String) -> onRecoverableError
    void onError(android.content.Context,java.lang.String) -> onError
    void onRegistered(android.content.Context,java.lang.String) -> onRegistered
    void onUnregistered(android.content.Context,java.lang.String) -> onUnregistered
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    void runIntentInService(android.content.Context,android.content.Intent,java.lang.String) -> runIntentInService
    void handleRegistration(android.content.Context,android.content.Intent) -> handleRegistration
com.google.android.gcm.GCMBroadcastReceiver -> com.google.android.gcm.GCMBroadcastReceiver:
    java.lang.String TAG -> TAG
    boolean mReceiverSet -> mReceiverSet
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    java.lang.String getGCMIntentServiceClassName(android.content.Context) -> getGCMIntentServiceClassName
    java.lang.String getDefaultIntentServiceClassName(android.content.Context) -> getDefaultIntentServiceClassName
com.google.android.gcm.GCMConstants -> com.google.android.gcm.GCMConstants:
    java.lang.String INTENT_TO_GCM_REGISTRATION -> INTENT_TO_GCM_REGISTRATION
    java.lang.String INTENT_TO_GCM_UNREGISTRATION -> INTENT_TO_GCM_UNREGISTRATION
    java.lang.String INTENT_FROM_GCM_REGISTRATION_CALLBACK -> INTENT_FROM_GCM_REGISTRATION_CALLBACK
    java.lang.String INTENT_FROM_GCM_LIBRARY_RETRY -> INTENT_FROM_GCM_LIBRARY_RETRY
    java.lang.String INTENT_FROM_GCM_MESSAGE -> INTENT_FROM_GCM_MESSAGE
    java.lang.String EXTRA_SENDER -> EXTRA_SENDER
    java.lang.String EXTRA_APPLICATION_PENDING_INTENT -> EXTRA_APPLICATION_PENDING_INTENT
    java.lang.String EXTRA_UNREGISTERED -> EXTRA_UNREGISTERED
    java.lang.String EXTRA_ERROR -> EXTRA_ERROR
    java.lang.String EXTRA_REGISTRATION_ID -> EXTRA_REGISTRATION_ID
    java.lang.String EXTRA_SPECIAL_MESSAGE -> EXTRA_SPECIAL_MESSAGE
    java.lang.String VALUE_DELETED_MESSAGES -> VALUE_DELETED_MESSAGES
    java.lang.String EXTRA_TOTAL_DELETED -> EXTRA_TOTAL_DELETED
    java.lang.String PERMISSION_GCM_INTENTS -> PERMISSION_GCM_INTENTS
    java.lang.String DEFAULT_INTENT_SERVICE_CLASS_NAME -> DEFAULT_INTENT_SERVICE_CLASS_NAME
    java.lang.String ERROR_SERVICE_NOT_AVAILABLE -> ERROR_SERVICE_NOT_AVAILABLE
    java.lang.String ERROR_ACCOUNT_MISSING -> ERROR_ACCOUNT_MISSING
    java.lang.String ERROR_AUTHENTICATION_FAILED -> ERROR_AUTHENTICATION_FAILED
    java.lang.String ERROR_INVALID_PARAMETERS -> ERROR_INVALID_PARAMETERS
    java.lang.String ERROR_INVALID_SENDER -> ERROR_INVALID_SENDER
    java.lang.String ERROR_PHONE_REGISTRATION_ERROR -> ERROR_PHONE_REGISTRATION_ERROR
com.google.android.gcm.GCMRegistrar -> com.google.android.gcm.GCMRegistrar:
    long DEFAULT_ON_SERVER_LIFESPAN_MS -> DEFAULT_ON_SERVER_LIFESPAN_MS
    java.lang.String TAG -> TAG
    java.lang.String BACKOFF_MS -> BACKOFF_MS
    java.lang.String GSF_PACKAGE -> GSF_PACKAGE
    java.lang.String PREFERENCES -> PREFERENCES
    int DEFAULT_BACKOFF_MS -> DEFAULT_BACKOFF_MS
    java.lang.String PROPERTY_REG_ID -> PROPERTY_REG_ID
    java.lang.String PROPERTY_APP_VERSION -> PROPERTY_APP_VERSION
    java.lang.String PROPERTY_ON_SERVER -> PROPERTY_ON_SERVER
    java.lang.String PROPERTY_ON_SERVER_EXPIRATION_TIME -> PROPERTY_ON_SERVER_EXPIRATION_TIME
    java.lang.String PROPERTY_ON_SERVER_LIFESPAN -> PROPERTY_ON_SERVER_LIFESPAN
    com.google.android.gcm.GCMBroadcastReceiver sRetryReceiver -> sRetryReceiver
    java.lang.String sRetryReceiverClassName -> sRetryReceiverClassName
    void checkDevice(android.content.Context) -> checkDevice
    void checkManifest(android.content.Context) -> checkManifest
    void checkReceiver(android.content.Context,java.util.Set,java.lang.String) -> checkReceiver
    void register(android.content.Context,java.lang.String[]) -> register
    void internalRegister(android.content.Context,java.lang.String[]) -> internalRegister
    java.lang.String getFlatSenderIds(java.lang.String[]) -> getFlatSenderIds
    void unregister(android.content.Context) -> unregister
    void onDestroy(android.content.Context) -> onDestroy
    void internalUnregister(android.content.Context) -> internalUnregister
    void setRetryBroadcastReceiver(android.content.Context) -> setRetryBroadcastReceiver
    void setRetryReceiverClassName(java.lang.String) -> setRetryReceiverClassName
    java.lang.String getRegistrationId(android.content.Context) -> getRegistrationId
    boolean isRegistered(android.content.Context) -> isRegistered
    java.lang.String clearRegistrationId(android.content.Context) -> clearRegistrationId
    java.lang.String setRegistrationId(android.content.Context,java.lang.String) -> setRegistrationId
    void setRegisteredOnServer(android.content.Context,boolean) -> setRegisteredOnServer
    boolean isRegisteredOnServer(android.content.Context) -> isRegisteredOnServer
    long getRegisterOnServerLifespan(android.content.Context) -> getRegisterOnServerLifespan
    void setRegisterOnServerLifespan(android.content.Context,long) -> setRegisterOnServerLifespan
    int getAppVersion(android.content.Context) -> getAppVersion
    void resetBackoff(android.content.Context) -> resetBackoff
    int getBackoff(android.content.Context) -> getBackoff
    void setBackoff(android.content.Context,int) -> setBackoff
    android.content.SharedPreferences getGCMPreferences(android.content.Context) -> getGCMPreferences
com.google.gson.DefaultDateTypeAdapter -> com.google.gson.DefaultDateTypeAdapter:
    java.text.DateFormat enUsFormat -> enUsFormat
    java.text.DateFormat localFormat -> localFormat
    java.text.DateFormat iso8601Format -> iso8601Format
    com.google.gson.JsonElement serialize(java.util.Date,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    java.util.Date deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    java.util.Date deserializeToDate(com.google.gson.JsonElement) -> deserializeToDate
    java.lang.String toString() -> toString
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
com.google.gson.ExclusionStrategy -> com.google.gson.ExclusionStrategy:
    boolean shouldSkipField(com.google.gson.FieldAttributes) -> shouldSkipField
    boolean shouldSkipClass(java.lang.Class) -> shouldSkipClass
com.google.gson.FieldAttributes -> com.google.gson.FieldAttributes:
    java.lang.reflect.Field field -> field
    java.lang.Class getDeclaringClass() -> getDeclaringClass
    java.lang.String getName() -> getName
    java.lang.reflect.Type getDeclaredType() -> getDeclaredType
    java.lang.Class getDeclaredClass() -> getDeclaredClass
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.util.Collection getAnnotations() -> getAnnotations
    boolean hasModifier(int) -> hasModifier
    java.lang.Object get(java.lang.Object) -> get
    boolean isSynthetic() -> isSynthetic
com.google.gson.FieldNamingPolicy -> com.google.gson.FieldNamingPolicy:
    com.google.gson.FieldNamingPolicy IDENTITY -> IDENTITY
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE -> UPPER_CAMEL_CASE
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES -> UPPER_CAMEL_CASE_WITH_SPACES
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES -> LOWER_CASE_WITH_UNDERSCORES
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES -> LOWER_CASE_WITH_DASHES
    com.google.gson.FieldNamingPolicy[] $VALUES -> $VALUES
    com.google.gson.FieldNamingPolicy[] values() -> values
    com.google.gson.FieldNamingPolicy valueOf(java.lang.String) -> valueOf
    java.lang.String separateCamelCase(java.lang.String,java.lang.String) -> separateCamelCase
    java.lang.String upperCaseFirstLetter(java.lang.String) -> upperCaseFirstLetter
    java.lang.String modifyString(char,java.lang.String,int) -> modifyString
    java.lang.String access$100(java.lang.String) -> access$100
    java.lang.String access$200(java.lang.String,java.lang.String) -> access$200
com.google.gson.FieldNamingPolicy$1 -> com.google.gson.FieldNamingPolicy$1:
    java.lang.String translateName(java.lang.reflect.Field) -> translateName
com.google.gson.FieldNamingPolicy$2 -> com.google.gson.FieldNamingPolicy$2:
    java.lang.String translateName(java.lang.reflect.Field) -> translateName
com.google.gson.FieldNamingPolicy$3 -> com.google.gson.FieldNamingPolicy$3:
    java.lang.String translateName(java.lang.reflect.Field) -> translateName
com.google.gson.FieldNamingPolicy$4 -> com.google.gson.FieldNamingPolicy$4:
    java.lang.String translateName(java.lang.reflect.Field) -> translateName
com.google.gson.FieldNamingPolicy$5 -> com.google.gson.FieldNamingPolicy$5:
    java.lang.String translateName(java.lang.reflect.Field) -> translateName
com.google.gson.FieldNamingStrategy -> com.google.gson.FieldNamingStrategy:
    java.lang.String translateName(java.lang.reflect.Field) -> translateName
com.google.gson.Gson -> com.google.gson.Gson:
    boolean DEFAULT_JSON_NON_EXECUTABLE -> DEFAULT_JSON_NON_EXECUTABLE
    java.lang.String JSON_NON_EXECUTABLE_PREFIX -> JSON_NON_EXECUTABLE_PREFIX
    java.lang.ThreadLocal calls -> calls
    java.util.Map typeTokenCache -> typeTokenCache
    java.util.List factories -> factories
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> constructorConstructor
    boolean serializeNulls -> serializeNulls
    boolean htmlSafe -> htmlSafe
    boolean generateNonExecutableJson -> generateNonExecutableJson
    boolean prettyPrinting -> prettyPrinting
    com.google.gson.JsonDeserializationContext deserializationContext -> deserializationContext
    com.google.gson.JsonSerializationContext serializationContext -> serializationContext
    com.google.gson.TypeAdapter doubleAdapter(boolean) -> doubleAdapter
    com.google.gson.TypeAdapter floatAdapter(boolean) -> floatAdapter
    void checkValidFloatingPoint(double) -> checkValidFloatingPoint
    com.google.gson.TypeAdapter longAdapter(com.google.gson.LongSerializationPolicy) -> longAdapter
    com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken) -> getAdapter
    com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken) -> getDelegateAdapter
    com.google.gson.TypeAdapter getAdapter(java.lang.Class) -> getAdapter
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> toJsonTree
    com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type) -> toJsonTree
    java.lang.String toJson(java.lang.Object) -> toJson
    java.lang.String toJson(java.lang.Object,java.lang.reflect.Type) -> toJson
    void toJson(java.lang.Object,java.lang.Appendable) -> toJson
    void toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable) -> toJson
    void toJson(java.lang.Object,java.lang.reflect.Type,com.google.gson.stream.JsonWriter) -> toJson
    java.lang.String toJson(com.google.gson.JsonElement) -> toJson
    void toJson(com.google.gson.JsonElement,java.lang.Appendable) -> toJson
    com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer) -> newJsonWriter
    void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> toJson
    java.lang.Object fromJson(java.lang.String,java.lang.Class) -> fromJson
    java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type) -> fromJson
    java.lang.Object fromJson(java.io.Reader,java.lang.Class) -> fromJson
    java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type) -> fromJson
    void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader) -> assertFullConsumption
    java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type) -> fromJson
    java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.Class) -> fromJson
    java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type) -> fromJson
    java.lang.String toString() -> toString
    void access$000(com.google.gson.Gson,double) -> access$000
com.google.gson.Gson$1 -> com.google.gson.Gson$1:
    com.google.gson.Gson this$0 -> this$0
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type) -> deserialize
com.google.gson.Gson$2 -> com.google.gson.Gson$2:
    com.google.gson.Gson this$0 -> this$0
    com.google.gson.JsonElement serialize(java.lang.Object) -> serialize
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type) -> serialize
com.google.gson.Gson$3 -> com.google.gson.Gson$3:
    com.google.gson.Gson this$0 -> this$0
    java.lang.Double read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.Gson$4 -> com.google.gson.Gson$4:
    com.google.gson.Gson this$0 -> this$0
    java.lang.Float read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.Gson$5 -> com.google.gson.Gson$5:
    com.google.gson.Gson this$0 -> this$0
    java.lang.Number read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.Gson$FutureTypeAdapter -> com.google.gson.Gson$FutureTypeAdapter:
    com.google.gson.TypeAdapter delegate -> delegate
    void setDelegate(com.google.gson.TypeAdapter) -> setDelegate
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.GsonBuilder -> com.google.gson.GsonBuilder:
    com.google.gson.internal.Excluder excluder -> excluder
    com.google.gson.LongSerializationPolicy longSerializationPolicy -> longSerializationPolicy
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> fieldNamingPolicy
    java.util.Map instanceCreators -> instanceCreators
    java.util.List factories -> factories
    java.util.List hierarchyFactories -> hierarchyFactories
    boolean serializeNulls -> serializeNulls
    java.lang.String datePattern -> datePattern
    int dateStyle -> dateStyle
    int timeStyle -> timeStyle
    boolean complexMapKeySerialization -> complexMapKeySerialization
    boolean serializeSpecialFloatingPointValues -> serializeSpecialFloatingPointValues
    boolean escapeHtmlChars -> escapeHtmlChars
    boolean prettyPrinting -> prettyPrinting
    boolean generateNonExecutableJson -> generateNonExecutableJson
    com.google.gson.GsonBuilder setVersion(double) -> setVersion
    com.google.gson.GsonBuilder excludeFieldsWithModifiers(int[]) -> excludeFieldsWithModifiers
    com.google.gson.GsonBuilder generateNonExecutableJson() -> generateNonExecutableJson
    com.google.gson.GsonBuilder excludeFieldsWithoutExposeAnnotation() -> excludeFieldsWithoutExposeAnnotation
    com.google.gson.GsonBuilder serializeNulls() -> serializeNulls
    com.google.gson.GsonBuilder enableComplexMapKeySerialization() -> enableComplexMapKeySerialization
    com.google.gson.GsonBuilder disableInnerClassSerialization() -> disableInnerClassSerialization
    com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy) -> setLongSerializationPolicy
    com.google.gson.GsonBuilder setFieldNamingPolicy(com.google.gson.FieldNamingPolicy) -> setFieldNamingPolicy
    com.google.gson.GsonBuilder setFieldNamingStrategy(com.google.gson.FieldNamingStrategy) -> setFieldNamingStrategy
    com.google.gson.GsonBuilder setExclusionStrategies(com.google.gson.ExclusionStrategy[]) -> setExclusionStrategies
    com.google.gson.GsonBuilder addSerializationExclusionStrategy(com.google.gson.ExclusionStrategy) -> addSerializationExclusionStrategy
    com.google.gson.GsonBuilder addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy) -> addDeserializationExclusionStrategy
    com.google.gson.GsonBuilder setPrettyPrinting() -> setPrettyPrinting
    com.google.gson.GsonBuilder disableHtmlEscaping() -> disableHtmlEscaping
    com.google.gson.GsonBuilder setDateFormat(java.lang.String) -> setDateFormat
    com.google.gson.GsonBuilder setDateFormat(int) -> setDateFormat
    com.google.gson.GsonBuilder setDateFormat(int,int) -> setDateFormat
    com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type,java.lang.Object) -> registerTypeAdapter
    com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory) -> registerTypeAdapterFactory
    com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class,java.lang.Object) -> registerTypeHierarchyAdapter
    com.google.gson.GsonBuilder serializeSpecialFloatingPointValues() -> serializeSpecialFloatingPointValues
    com.google.gson.Gson create() -> create
    void addTypeAdaptersForDate(java.lang.String,int,int,java.util.List) -> addTypeAdaptersForDate
com.google.gson.InstanceCreator -> com.google.gson.InstanceCreator:
    java.lang.Object createInstance(java.lang.reflect.Type) -> createInstance
com.google.gson.JsonArray -> com.google.gson.JsonArray:
    java.util.List elements -> elements
    com.google.gson.JsonArray deepCopy() -> deepCopy
    void add(com.google.gson.JsonElement) -> add
    void addAll(com.google.gson.JsonArray) -> addAll
    int size() -> size
    java.util.Iterator iterator() -> iterator
    com.google.gson.JsonElement get(int) -> get
    java.lang.Number getAsNumber() -> getAsNumber
    java.lang.String getAsString() -> getAsString
    double getAsDouble() -> getAsDouble
    java.math.BigDecimal getAsBigDecimal() -> getAsBigDecimal
    java.math.BigInteger getAsBigInteger() -> getAsBigInteger
    float getAsFloat() -> getAsFloat
    long getAsLong() -> getAsLong
    int getAsInt() -> getAsInt
    byte getAsByte() -> getAsByte
    char getAsCharacter() -> getAsCharacter
    short getAsShort() -> getAsShort
    boolean getAsBoolean() -> getAsBoolean
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.gson.JsonElement deepCopy() -> deepCopy
com.google.gson.JsonDeserializationContext -> com.google.gson.JsonDeserializationContext:
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type) -> deserialize
com.google.gson.JsonDeserializer -> com.google.gson.JsonDeserializer:
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
com.google.gson.JsonElement -> com.google.gson.JsonElement:
    com.google.gson.JsonElement deepCopy() -> deepCopy
    boolean isJsonArray() -> isJsonArray
    boolean isJsonObject() -> isJsonObject
    boolean isJsonPrimitive() -> isJsonPrimitive
    boolean isJsonNull() -> isJsonNull
    com.google.gson.JsonObject getAsJsonObject() -> getAsJsonObject
    com.google.gson.JsonArray getAsJsonArray() -> getAsJsonArray
    com.google.gson.JsonPrimitive getAsJsonPrimitive() -> getAsJsonPrimitive
    com.google.gson.JsonNull getAsJsonNull() -> getAsJsonNull
    boolean getAsBoolean() -> getAsBoolean
    java.lang.Boolean getAsBooleanWrapper() -> getAsBooleanWrapper
    java.lang.Number getAsNumber() -> getAsNumber
    java.lang.String getAsString() -> getAsString
    double getAsDouble() -> getAsDouble
    float getAsFloat() -> getAsFloat
    long getAsLong() -> getAsLong
    int getAsInt() -> getAsInt
    byte getAsByte() -> getAsByte
    char getAsCharacter() -> getAsCharacter
    java.math.BigDecimal getAsBigDecimal() -> getAsBigDecimal
    java.math.BigInteger getAsBigInteger() -> getAsBigInteger
    short getAsShort() -> getAsShort
    java.lang.String toString() -> toString
com.google.gson.JsonIOException -> com.google.gson.JsonIOException:
    long serialVersionUID -> serialVersionUID
com.google.gson.JsonNull -> com.google.gson.JsonNull:
    com.google.gson.JsonNull INSTANCE -> INSTANCE
    com.google.gson.JsonNull deepCopy() -> deepCopy
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    com.google.gson.JsonElement deepCopy() -> deepCopy
com.google.gson.JsonObject -> com.google.gson.JsonObject:
    com.google.gson.internal.LinkedTreeMap members -> members
    com.google.gson.JsonObject deepCopy() -> deepCopy
    void add(java.lang.String,com.google.gson.JsonElement) -> add
    com.google.gson.JsonElement remove(java.lang.String) -> remove
    void addProperty(java.lang.String,java.lang.String) -> addProperty
    void addProperty(java.lang.String,java.lang.Number) -> addProperty
    void addProperty(java.lang.String,java.lang.Boolean) -> addProperty
    void addProperty(java.lang.String,java.lang.Character) -> addProperty
    com.google.gson.JsonElement createJsonElement(java.lang.Object) -> createJsonElement
    java.util.Set entrySet() -> entrySet
    boolean has(java.lang.String) -> has
    com.google.gson.JsonElement get(java.lang.String) -> get
    com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String) -> getAsJsonPrimitive
    com.google.gson.JsonArray getAsJsonArray(java.lang.String) -> getAsJsonArray
    com.google.gson.JsonObject getAsJsonObject(java.lang.String) -> getAsJsonObject
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.gson.JsonElement deepCopy() -> deepCopy
com.google.gson.JsonParseException -> com.google.gson.JsonParseException:
    long serialVersionUID -> serialVersionUID
com.google.gson.JsonParser -> com.google.gson.JsonParser:
    com.google.gson.JsonElement parse(java.lang.String) -> parse
    com.google.gson.JsonElement parse(java.io.Reader) -> parse
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> parse
com.google.gson.JsonPrimitive -> com.google.gson.JsonPrimitive:
    java.lang.Class[] PRIMITIVE_TYPES -> PRIMITIVE_TYPES
    java.lang.Object value -> value
    com.google.gson.JsonPrimitive deepCopy() -> deepCopy
    void setValue(java.lang.Object) -> setValue
    boolean isBoolean() -> isBoolean
    java.lang.Boolean getAsBooleanWrapper() -> getAsBooleanWrapper
    boolean getAsBoolean() -> getAsBoolean
    boolean isNumber() -> isNumber
    java.lang.Number getAsNumber() -> getAsNumber
    boolean isString() -> isString
    java.lang.String getAsString() -> getAsString
    double getAsDouble() -> getAsDouble
    java.math.BigDecimal getAsBigDecimal() -> getAsBigDecimal
    java.math.BigInteger getAsBigInteger() -> getAsBigInteger
    float getAsFloat() -> getAsFloat
    long getAsLong() -> getAsLong
    short getAsShort() -> getAsShort
    int getAsInt() -> getAsInt
    byte getAsByte() -> getAsByte
    char getAsCharacter() -> getAsCharacter
    boolean isPrimitiveOrString(java.lang.Object) -> isPrimitiveOrString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isIntegral(com.google.gson.JsonPrimitive) -> isIntegral
    com.google.gson.JsonElement deepCopy() -> deepCopy
com.google.gson.JsonSerializationContext -> com.google.gson.JsonSerializationContext:
    com.google.gson.JsonElement serialize(java.lang.Object) -> serialize
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type) -> serialize
com.google.gson.JsonSerializer -> com.google.gson.JsonSerializer:
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
com.google.gson.JsonStreamParser -> com.google.gson.JsonStreamParser:
    com.google.gson.stream.JsonReader parser -> parser
    java.lang.Object lock -> lock
    com.google.gson.JsonElement next() -> next
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
com.google.gson.JsonSyntaxException -> com.google.gson.JsonSyntaxException:
    long serialVersionUID -> serialVersionUID
com.google.gson.LongSerializationPolicy -> com.google.gson.LongSerializationPolicy:
    com.google.gson.LongSerializationPolicy DEFAULT -> DEFAULT
    com.google.gson.LongSerializationPolicy STRING -> STRING
    com.google.gson.LongSerializationPolicy[] $VALUES -> $VALUES
    com.google.gson.LongSerializationPolicy[] values() -> values
    com.google.gson.LongSerializationPolicy valueOf(java.lang.String) -> valueOf
    com.google.gson.JsonElement serialize(java.lang.Long) -> serialize
com.google.gson.LongSerializationPolicy$1 -> com.google.gson.LongSerializationPolicy$1:
    com.google.gson.JsonElement serialize(java.lang.Long) -> serialize
com.google.gson.LongSerializationPolicy$2 -> com.google.gson.LongSerializationPolicy$2:
    com.google.gson.JsonElement serialize(java.lang.Long) -> serialize
com.google.gson.TreeTypeAdapter -> com.google.gson.TreeTypeAdapter:
    com.google.gson.JsonSerializer serializer -> serializer
    com.google.gson.JsonDeserializer deserializer -> deserializer
    com.google.gson.Gson gson -> gson
    com.google.gson.reflect.TypeToken typeToken -> typeToken
    com.google.gson.TypeAdapterFactory skipPast -> skipPast
    com.google.gson.TypeAdapter delegate -> delegate
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    com.google.gson.TypeAdapter delegate() -> delegate
    com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,java.lang.Object) -> newFactory
    com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object) -> newFactoryWithMatchRawType
    com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,java.lang.Object) -> newTypeHierarchyFactory
com.google.gson.TreeTypeAdapter$1 -> com.google.gson.TreeTypeAdapter$1:
com.google.gson.TreeTypeAdapter$SingleTypeFactory -> com.google.gson.TreeTypeAdapter$SingleTypeFactory:
    com.google.gson.reflect.TypeToken exactType -> exactType
    boolean matchRawType -> matchRawType
    java.lang.Class hierarchyType -> hierarchyType
    com.google.gson.JsonSerializer serializer -> serializer
    com.google.gson.JsonDeserializer deserializer -> deserializer
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.TypeAdapter -> com.google.gson.TypeAdapter:
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    void toJson(java.io.Writer,java.lang.Object) -> toJson
    com.google.gson.TypeAdapter nullSafe() -> nullSafe
    java.lang.String toJson(java.lang.Object) -> toJson
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> toJsonTree
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    java.lang.Object fromJson(java.io.Reader) -> fromJson
    java.lang.Object fromJson(java.lang.String) -> fromJson
    java.lang.Object fromJsonTree(com.google.gson.JsonElement) -> fromJsonTree
com.google.gson.TypeAdapter$1 -> com.google.gson.TypeAdapter$1:
    com.google.gson.TypeAdapter this$0 -> this$0
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
com.google.gson.TypeAdapterFactory -> com.google.gson.TypeAdapterFactory:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.annotations.Expose -> com.google.gson.annotations.Expose:
    boolean serialize() -> serialize
    boolean deserialize() -> deserialize
com.google.gson.annotations.SerializedName -> com.google.gson.annotations.SerializedName:
    java.lang.String value() -> value
com.google.gson.annotations.Since -> com.google.gson.annotations.Since:
    double value() -> value
com.google.gson.annotations.Until -> com.google.gson.annotations.Until:
    double value() -> value
com.google.gson.internal.$Gson$Preconditions -> com.google.gson.internal.$Gson$Preconditions:
    java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    void checkArgument(boolean) -> checkArgument
com.google.gson.internal.$Gson$Types -> com.google.gson.internal.$Gson$Types:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> EMPTY_TYPE_ARRAY
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> newParameterizedTypeWithOwner
    java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type) -> arrayOf
    java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> subtypeOf
    java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> supertypeOf
    java.lang.reflect.Type canonicalize(java.lang.reflect.Type) -> canonicalize
    java.lang.Class getRawType(java.lang.reflect.Type) -> getRawType
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> equals
    int hashCodeOrZero(java.lang.Object) -> hashCodeOrZero
    java.lang.String typeToString(java.lang.reflect.Type) -> typeToString
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> getGenericSupertype
    java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> getSupertype
    java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type) -> getArrayComponentType
    java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class) -> getCollectionElementType
    java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> getMapKeyAndValueTypes
    java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> resolve
    java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> resolveTypeVariable
    int indexOf(java.lang.Object[],java.lang.Object) -> indexOf
    java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable) -> declaringClassOf
    void checkNotPrimitive(java.lang.reflect.Type) -> checkNotPrimitive
    void access$000(java.lang.reflect.Type) -> access$000
    int access$100(java.lang.Object) -> access$100
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl -> com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl:
    java.lang.reflect.Type componentType -> componentType
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl -> com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl:
    java.lang.reflect.Type ownerType -> ownerType
    java.lang.reflect.Type rawType -> rawType
    java.lang.reflect.Type[] typeArguments -> typeArguments
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$WildcardTypeImpl -> com.google.gson.internal.$Gson$Types$WildcardTypeImpl:
    java.lang.reflect.Type upperBound -> upperBound
    java.lang.reflect.Type lowerBound -> lowerBound
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor -> com.google.gson.internal.ConstructorConstructor:
    java.util.Map instanceCreators -> instanceCreators
    com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken) -> get
    com.google.gson.internal.ObjectConstructor newDefaultConstructor(java.lang.Class) -> newDefaultConstructor
    com.google.gson.internal.ObjectConstructor newDefaultImplementationConstructor(java.lang.reflect.Type,java.lang.Class) -> newDefaultImplementationConstructor
    com.google.gson.internal.ObjectConstructor newUnsafeAllocator(java.lang.reflect.Type,java.lang.Class) -> newUnsafeAllocator
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor$1 -> com.google.gson.internal.ConstructorConstructor$1:
    com.google.gson.InstanceCreator val$typeCreator -> val$typeCreator
    java.lang.reflect.Type val$type -> val$type
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$10 -> com.google.gson.internal.ConstructorConstructor$10:
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$11 -> com.google.gson.internal.ConstructorConstructor$11:
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$12 -> com.google.gson.internal.ConstructorConstructor$12:
    com.google.gson.internal.UnsafeAllocator unsafeAllocator -> unsafeAllocator
    java.lang.Class val$rawType -> val$rawType
    java.lang.reflect.Type val$type -> val$type
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$2 -> com.google.gson.internal.ConstructorConstructor$2:
    com.google.gson.InstanceCreator val$rawTypeCreator -> val$rawTypeCreator
    java.lang.reflect.Type val$type -> val$type
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$3 -> com.google.gson.internal.ConstructorConstructor$3:
    java.lang.reflect.Constructor val$constructor -> val$constructor
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$4 -> com.google.gson.internal.ConstructorConstructor$4:
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$5 -> com.google.gson.internal.ConstructorConstructor$5:
    java.lang.reflect.Type val$type -> val$type
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$6 -> com.google.gson.internal.ConstructorConstructor$6:
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$7 -> com.google.gson.internal.ConstructorConstructor$7:
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$8 -> com.google.gson.internal.ConstructorConstructor$8:
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.ConstructorConstructor$9 -> com.google.gson.internal.ConstructorConstructor$9:
    com.google.gson.internal.ConstructorConstructor this$0 -> this$0
    java.lang.Object construct() -> construct
com.google.gson.internal.Excluder -> com.google.gson.internal.Excluder:
    double IGNORE_VERSIONS -> IGNORE_VERSIONS
    com.google.gson.internal.Excluder DEFAULT -> DEFAULT
    double version -> version
    int modifiers -> modifiers
    boolean serializeInnerClasses -> serializeInnerClasses
    boolean requireExpose -> requireExpose
    java.util.List serializationStrategies -> serializationStrategies
    java.util.List deserializationStrategies -> deserializationStrategies
    com.google.gson.internal.Excluder clone() -> clone
    com.google.gson.internal.Excluder withVersion(double) -> withVersion
    com.google.gson.internal.Excluder withModifiers(int[]) -> withModifiers
    com.google.gson.internal.Excluder disableInnerClassSerialization() -> disableInnerClassSerialization
    com.google.gson.internal.Excluder excludeFieldsWithoutExposeAnnotation() -> excludeFieldsWithoutExposeAnnotation
    com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy,boolean,boolean) -> withExclusionStrategy
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    boolean excludeField(java.lang.reflect.Field,boolean) -> excludeField
    boolean excludeClass(java.lang.Class,boolean) -> excludeClass
    boolean isAnonymousOrLocal(java.lang.Class) -> isAnonymousOrLocal
    boolean isInnerClass(java.lang.Class) -> isInnerClass
    boolean isStatic(java.lang.Class) -> isStatic
    boolean isValidVersion(com.google.gson.annotations.Since,com.google.gson.annotations.Until) -> isValidVersion
    boolean isValidSince(com.google.gson.annotations.Since) -> isValidSince
    boolean isValidUntil(com.google.gson.annotations.Until) -> isValidUntil
    java.lang.Object clone() -> clone
com.google.gson.internal.Excluder$1 -> com.google.gson.internal.Excluder$1:
    com.google.gson.TypeAdapter delegate -> delegate
    boolean val$skipDeserialize -> val$skipDeserialize
    boolean val$skipSerialize -> val$skipSerialize
    com.google.gson.Gson val$gson -> val$gson
    com.google.gson.reflect.TypeToken val$type -> val$type
    com.google.gson.internal.Excluder this$0 -> this$0
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    com.google.gson.TypeAdapter delegate() -> delegate
com.google.gson.internal.JsonReaderInternalAccess -> com.google.gson.internal.JsonReaderInternalAccess:
    com.google.gson.internal.JsonReaderInternalAccess INSTANCE -> INSTANCE
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> promoteNameToValue
com.google.gson.internal.LazilyParsedNumber -> com.google.gson.internal.LazilyParsedNumber:
    java.lang.String value -> value
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
com.google.gson.internal.LinkedTreeMap -> com.google.gson.internal.LinkedTreeMap:
    java.util.Comparator NATURAL_ORDER -> NATURAL_ORDER
    java.util.Comparator comparator -> comparator
    com.google.gson.internal.LinkedTreeMap$Node root -> root
    int size -> size
    int modCount -> modCount
    com.google.gson.internal.LinkedTreeMap$Node header -> header
    com.google.gson.internal.LinkedTreeMap$EntrySet entrySet -> entrySet
    com.google.gson.internal.LinkedTreeMap$KeySet keySet -> keySet
    boolean $assertionsDisabled -> $assertionsDisabled
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    com.google.gson.internal.LinkedTreeMap$Node find(java.lang.Object,boolean) -> find
    com.google.gson.internal.LinkedTreeMap$Node findByObject(java.lang.Object) -> findByObject
    com.google.gson.internal.LinkedTreeMap$Node findByEntry(java.util.Map$Entry) -> findByEntry
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    void removeInternal(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> removeInternal
    com.google.gson.internal.LinkedTreeMap$Node removeInternalByKey(java.lang.Object) -> removeInternalByKey
    void replaceInParent(com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node) -> replaceInParent
    void rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> rebalance
    void rotateLeft(com.google.gson.internal.LinkedTreeMap$Node) -> rotateLeft
    void rotateRight(com.google.gson.internal.LinkedTreeMap$Node) -> rotateRight
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.lang.Object writeReplace() -> writeReplace
com.google.gson.internal.LinkedTreeMap$1 -> com.google.gson.internal.LinkedTreeMap$1:
    int compare(java.lang.Comparable,java.lang.Comparable) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.gson.internal.LinkedTreeMap$EntrySet -> com.google.gson.internal.LinkedTreeMap$EntrySet:
    com.google.gson.internal.LinkedTreeMap this$0 -> this$0
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$EntrySet$1 -> com.google.gson.internal.LinkedTreeMap$EntrySet$1:
    com.google.gson.internal.LinkedTreeMap$EntrySet this$1 -> this$1
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$KeySet -> com.google.gson.internal.LinkedTreeMap$KeySet:
    com.google.gson.internal.LinkedTreeMap this$0 -> this$0
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$KeySet$1 -> com.google.gson.internal.LinkedTreeMap$KeySet$1:
    com.google.gson.internal.LinkedTreeMap$KeySet this$1 -> this$1
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator -> com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator:
    com.google.gson.internal.LinkedTreeMap$Node next -> next
    com.google.gson.internal.LinkedTreeMap$Node lastReturned -> lastReturned
    int expectedModCount -> expectedModCount
    com.google.gson.internal.LinkedTreeMap this$0 -> this$0
    boolean hasNext() -> hasNext
    com.google.gson.internal.LinkedTreeMap$Node nextNode() -> nextNode
    void remove() -> remove
com.google.gson.internal.LinkedTreeMap$Node -> com.google.gson.internal.LinkedTreeMap$Node:
    com.google.gson.internal.LinkedTreeMap$Node parent -> parent
    com.google.gson.internal.LinkedTreeMap$Node left -> left
    com.google.gson.internal.LinkedTreeMap$Node right -> right
    com.google.gson.internal.LinkedTreeMap$Node next -> next
    com.google.gson.internal.LinkedTreeMap$Node prev -> prev
    java.lang.Object key -> key
    java.lang.Object value -> value
    int height -> height
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.gson.internal.LinkedTreeMap$Node first() -> first
    com.google.gson.internal.LinkedTreeMap$Node last() -> last
com.google.gson.internal.ObjectConstructor -> com.google.gson.internal.ObjectConstructor:
    java.lang.Object construct() -> construct
com.google.gson.internal.Primitives -> com.google.gson.internal.Primitives:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> PRIMITIVE_TO_WRAPPER_TYPE
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> WRAPPER_TO_PRIMITIVE_TYPE
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> add
    boolean isPrimitive(java.lang.reflect.Type) -> isPrimitive
    boolean isWrapperType(java.lang.reflect.Type) -> isWrapperType
    java.lang.Class wrap(java.lang.Class) -> wrap
    java.lang.Class unwrap(java.lang.Class) -> unwrap
com.google.gson.internal.Streams -> com.google.gson.internal.Streams:
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> parse
    void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> write
    java.io.Writer writerForAppendable(java.lang.Appendable) -> writerForAppendable
com.google.gson.internal.Streams$1 -> com.google.gson.internal.Streams$1:
com.google.gson.internal.Streams$AppendableWriter -> com.google.gson.internal.Streams$AppendableWriter:
    java.lang.Appendable appendable -> appendable
    com.google.gson.internal.Streams$AppendableWriter$CurrentWrite currentWrite -> currentWrite
    void write(char[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite -> com.google.gson.internal.Streams$AppendableWriter$CurrentWrite:
    char[] chars -> chars
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
com.google.gson.internal.UnsafeAllocator -> com.google.gson.internal.UnsafeAllocator:
    java.lang.Object newInstance(java.lang.Class) -> newInstance
    com.google.gson.internal.UnsafeAllocator create() -> create
com.google.gson.internal.UnsafeAllocator$1 -> com.google.gson.internal.UnsafeAllocator$1:
    java.lang.reflect.Method val$allocateInstance -> val$allocateInstance
    java.lang.Object val$unsafe -> val$unsafe
    java.lang.Object newInstance(java.lang.Class) -> newInstance
com.google.gson.internal.UnsafeAllocator$2 -> com.google.gson.internal.UnsafeAllocator$2:
    java.lang.reflect.Method val$newInstance -> val$newInstance
    java.lang.Object newInstance(java.lang.Class) -> newInstance
com.google.gson.internal.UnsafeAllocator$3 -> com.google.gson.internal.UnsafeAllocator$3:
    java.lang.reflect.Method val$newInstance -> val$newInstance
    int val$constructorId -> val$constructorId
    java.lang.Object newInstance(java.lang.Class) -> newInstance
com.google.gson.internal.UnsafeAllocator$4 -> com.google.gson.internal.UnsafeAllocator$4:
    java.lang.Object newInstance(java.lang.Class) -> newInstance
com.google.gson.internal.bind.ArrayTypeAdapter -> com.google.gson.internal.bind.ArrayTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> FACTORY
    java.lang.Class componentType -> componentType
    com.google.gson.TypeAdapter componentTypeAdapter -> componentTypeAdapter
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.ArrayTypeAdapter$1 -> com.google.gson.internal.bind.ArrayTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.CollectionTypeAdapterFactory -> com.google.gson.internal.bind.CollectionTypeAdapterFactory:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> constructorConstructor
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter -> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter:
    com.google.gson.TypeAdapter elementTypeAdapter -> elementTypeAdapter
    com.google.gson.internal.ObjectConstructor constructor -> constructor
    java.util.Collection read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.util.Collection) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.DateTypeAdapter -> com.google.gson.internal.bind.DateTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> FACTORY
    java.text.DateFormat enUsFormat -> enUsFormat
    java.text.DateFormat localFormat -> localFormat
    java.text.DateFormat iso8601Format -> iso8601Format
    java.text.DateFormat buildIso8601Format() -> buildIso8601Format
    java.util.Date read(com.google.gson.stream.JsonReader) -> read
    java.util.Date deserializeToDate(java.lang.String) -> deserializeToDate
    void write(com.google.gson.stream.JsonWriter,java.util.Date) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.DateTypeAdapter$1 -> com.google.gson.internal.bind.DateTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.JsonTreeReader -> com.google.gson.internal.bind.JsonTreeReader:
    java.io.Reader UNREADABLE_READER -> UNREADABLE_READER
    java.lang.Object SENTINEL_CLOSED -> SENTINEL_CLOSED
    java.util.List stack -> stack
    void beginArray() -> beginArray
    void endArray() -> endArray
    void beginObject() -> beginObject
    void endObject() -> endObject
    boolean hasNext() -> hasNext
    com.google.gson.stream.JsonToken peek() -> peek
    java.lang.Object peekStack() -> peekStack
    java.lang.Object popStack() -> popStack
    void expect(com.google.gson.stream.JsonToken) -> expect
    java.lang.String nextName() -> nextName
    java.lang.String nextString() -> nextString
    boolean nextBoolean() -> nextBoolean
    void nextNull() -> nextNull
    double nextDouble() -> nextDouble
    long nextLong() -> nextLong
    int nextInt() -> nextInt
    void close() -> close
    void skipValue() -> skipValue
    java.lang.String toString() -> toString
    void promoteNameToValue() -> promoteNameToValue
com.google.gson.internal.bind.JsonTreeReader$1 -> com.google.gson.internal.bind.JsonTreeReader$1:
    int read(char[],int,int) -> read
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter -> com.google.gson.internal.bind.JsonTreeWriter:
    java.io.Writer UNWRITABLE_WRITER -> UNWRITABLE_WRITER
    com.google.gson.JsonPrimitive SENTINEL_CLOSED -> SENTINEL_CLOSED
    java.util.List stack -> stack
    java.lang.String pendingName -> pendingName
    com.google.gson.JsonElement product -> product
    com.google.gson.JsonElement get() -> get
    com.google.gson.JsonElement peek() -> peek
    void put(com.google.gson.JsonElement) -> put
    com.google.gson.stream.JsonWriter beginArray() -> beginArray
    com.google.gson.stream.JsonWriter endArray() -> endArray
    com.google.gson.stream.JsonWriter beginObject() -> beginObject
    com.google.gson.stream.JsonWriter endObject() -> endObject
    com.google.gson.stream.JsonWriter name(java.lang.String) -> name
    com.google.gson.stream.JsonWriter value(java.lang.String) -> value
    com.google.gson.stream.JsonWriter nullValue() -> nullValue
    com.google.gson.stream.JsonWriter value(boolean) -> value
    com.google.gson.stream.JsonWriter value(double) -> value
    com.google.gson.stream.JsonWriter value(long) -> value
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> value
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter$1 -> com.google.gson.internal.bind.JsonTreeWriter$1:
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.MapTypeAdapterFactory -> com.google.gson.internal.bind.MapTypeAdapterFactory:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> constructorConstructor
    boolean complexMapKeySerialization -> complexMapKeySerialization
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    com.google.gson.TypeAdapter getKeyAdapter(com.google.gson.Gson,java.lang.reflect.Type) -> getKeyAdapter
    boolean access$000(com.google.gson.internal.bind.MapTypeAdapterFactory) -> access$000
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter -> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter:
    com.google.gson.TypeAdapter keyTypeAdapter -> keyTypeAdapter
    com.google.gson.TypeAdapter valueTypeAdapter -> valueTypeAdapter
    com.google.gson.internal.ObjectConstructor constructor -> constructor
    com.google.gson.internal.bind.MapTypeAdapterFactory this$0 -> this$0
    java.util.Map read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.util.Map) -> write
    java.lang.String keyToString(com.google.gson.JsonElement) -> keyToString
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.ObjectTypeAdapter -> com.google.gson.internal.bind.ObjectTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> FACTORY
    com.google.gson.Gson gson -> gson
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.ObjectTypeAdapter$1 -> com.google.gson.internal.bind.ObjectTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.ObjectTypeAdapter$2 -> com.google.gson.internal.bind.ObjectTypeAdapter$2:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> $SwitchMap$com$google$gson$stream$JsonToken
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory -> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> constructorConstructor
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> fieldNamingPolicy
    com.google.gson.internal.Excluder excluder -> excluder
    boolean excludeField(java.lang.reflect.Field,boolean) -> excludeField
    java.lang.String getFieldName(java.lang.reflect.Field) -> getFieldName
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(com.google.gson.Gson,java.lang.reflect.Field,java.lang.String,com.google.gson.reflect.TypeToken,boolean,boolean) -> createBoundField
    java.util.Map getBoundFields(com.google.gson.Gson,com.google.gson.reflect.TypeToken,java.lang.Class) -> getBoundFields
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1 -> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1:
    com.google.gson.TypeAdapter typeAdapter -> typeAdapter
    com.google.gson.Gson val$context -> val$context
    com.google.gson.reflect.TypeToken val$fieldType -> val$fieldType
    java.lang.reflect.Field val$field -> val$field
    boolean val$isPrimitive -> val$isPrimitive
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> this$0
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> read
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter -> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter:
    com.google.gson.internal.ObjectConstructor constructor -> constructor
    java.util.Map boundFields -> boundFields
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField -> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField:
    java.lang.String name -> name
    boolean serialized -> serialized
    boolean deserialized -> deserialized
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> read
com.google.gson.internal.bind.SqlDateTypeAdapter -> com.google.gson.internal.bind.SqlDateTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> FACTORY
    java.text.DateFormat format -> format
    java.sql.Date read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.sql.Date) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.SqlDateTypeAdapter$1 -> com.google.gson.internal.bind.SqlDateTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.TimeTypeAdapter -> com.google.gson.internal.bind.TimeTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> FACTORY
    java.text.DateFormat format -> format
    java.sql.Time read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.sql.Time) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TimeTypeAdapter$1 -> com.google.gson.internal.bind.TimeTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper -> com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:
    com.google.gson.Gson context -> context
    com.google.gson.TypeAdapter delegate -> delegate
    java.lang.reflect.Type type -> type
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Object) -> getRuntimeTypeIfMoreSpecific
com.google.gson.internal.bind.TypeAdapters -> com.google.gson.internal.bind.TypeAdapters:
    com.google.gson.TypeAdapter CLASS -> CLASS
    com.google.gson.TypeAdapterFactory CLASS_FACTORY -> CLASS_FACTORY
    com.google.gson.TypeAdapter BIT_SET -> BIT_SET
    com.google.gson.TypeAdapterFactory BIT_SET_FACTORY -> BIT_SET_FACTORY
    com.google.gson.TypeAdapter BOOLEAN -> BOOLEAN
    com.google.gson.TypeAdapter BOOLEAN_AS_STRING -> BOOLEAN_AS_STRING
    com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY -> BOOLEAN_FACTORY
    com.google.gson.TypeAdapter BYTE -> BYTE
    com.google.gson.TypeAdapterFactory BYTE_FACTORY -> BYTE_FACTORY
    com.google.gson.TypeAdapter SHORT -> SHORT
    com.google.gson.TypeAdapterFactory SHORT_FACTORY -> SHORT_FACTORY
    com.google.gson.TypeAdapter INTEGER -> INTEGER
    com.google.gson.TypeAdapterFactory INTEGER_FACTORY -> INTEGER_FACTORY
    com.google.gson.TypeAdapter LONG -> LONG
    com.google.gson.TypeAdapter FLOAT -> FLOAT
    com.google.gson.TypeAdapter DOUBLE -> DOUBLE
    com.google.gson.TypeAdapter NUMBER -> NUMBER
    com.google.gson.TypeAdapterFactory NUMBER_FACTORY -> NUMBER_FACTORY
    com.google.gson.TypeAdapter CHARACTER -> CHARACTER
    com.google.gson.TypeAdapterFactory CHARACTER_FACTORY -> CHARACTER_FACTORY
    com.google.gson.TypeAdapter STRING -> STRING
    com.google.gson.TypeAdapter BIG_DECIMAL -> BIG_DECIMAL
    com.google.gson.TypeAdapter BIG_INTEGER -> BIG_INTEGER
    com.google.gson.TypeAdapterFactory STRING_FACTORY -> STRING_FACTORY
    com.google.gson.TypeAdapter STRING_BUILDER -> STRING_BUILDER
    com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY -> STRING_BUILDER_FACTORY
    com.google.gson.TypeAdapter STRING_BUFFER -> STRING_BUFFER
    com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY -> STRING_BUFFER_FACTORY
    com.google.gson.TypeAdapter URL -> URL
    com.google.gson.TypeAdapterFactory URL_FACTORY -> URL_FACTORY
    com.google.gson.TypeAdapter URI -> URI
    com.google.gson.TypeAdapterFactory URI_FACTORY -> URI_FACTORY
    com.google.gson.TypeAdapter INET_ADDRESS -> INET_ADDRESS
    com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY -> INET_ADDRESS_FACTORY
    com.google.gson.TypeAdapter UUID -> UUID
    com.google.gson.TypeAdapterFactory UUID_FACTORY -> UUID_FACTORY
    com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY -> TIMESTAMP_FACTORY
    com.google.gson.TypeAdapter CALENDAR -> CALENDAR
    com.google.gson.TypeAdapterFactory CALENDAR_FACTORY -> CALENDAR_FACTORY
    com.google.gson.TypeAdapter LOCALE -> LOCALE
    com.google.gson.TypeAdapterFactory LOCALE_FACTORY -> LOCALE_FACTORY
    com.google.gson.TypeAdapter JSON_ELEMENT -> JSON_ELEMENT
    com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY -> JSON_ELEMENT_FACTORY
    com.google.gson.TypeAdapterFactory ENUM_FACTORY -> ENUM_FACTORY
    com.google.gson.TypeAdapterFactory newEnumTypeHierarchyFactory() -> newEnumTypeHierarchyFactory
    com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter) -> newFactory
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter) -> newFactory
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> newFactory
    com.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> newFactoryForMultipleTypes
    com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter) -> newTypeHierarchyFactory
com.google.gson.internal.bind.TypeAdapters$1 -> com.google.gson.internal.bind.TypeAdapters$1:
    void write(com.google.gson.stream.JsonWriter,java.lang.Class) -> write
    java.lang.Class read(com.google.gson.stream.JsonReader) -> read
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$10 -> com.google.gson.internal.bind.TypeAdapters$10:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$11 -> com.google.gson.internal.bind.TypeAdapters$11:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$12 -> com.google.gson.internal.bind.TypeAdapters$12:
    java.lang.Character read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Character) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$13 -> com.google.gson.internal.bind.TypeAdapters$13:
    java.lang.String read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.String) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$14 -> com.google.gson.internal.bind.TypeAdapters$14:
    java.math.BigDecimal read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.math.BigDecimal) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$15 -> com.google.gson.internal.bind.TypeAdapters$15:
    java.math.BigInteger read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.math.BigInteger) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$16 -> com.google.gson.internal.bind.TypeAdapters$16:
    java.lang.StringBuilder read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuilder) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$17 -> com.google.gson.internal.bind.TypeAdapters$17:
    java.lang.StringBuffer read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuffer) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$18 -> com.google.gson.internal.bind.TypeAdapters$18:
    java.net.URL read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.net.URL) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$19 -> com.google.gson.internal.bind.TypeAdapters$19:
    java.net.URI read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.net.URI) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$2 -> com.google.gson.internal.bind.TypeAdapters$2:
    java.util.BitSet read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.util.BitSet) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$20 -> com.google.gson.internal.bind.TypeAdapters$20:
    java.net.InetAddress read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.net.InetAddress) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$21 -> com.google.gson.internal.bind.TypeAdapters$21:
    java.util.UUID read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.util.UUID) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$22 -> com.google.gson.internal.bind.TypeAdapters$22:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.TypeAdapters$22$1 -> com.google.gson.internal.bind.TypeAdapters$22$1:
    com.google.gson.TypeAdapter val$dateTypeAdapter -> val$dateTypeAdapter
    com.google.gson.internal.bind.TypeAdapters$22 this$0 -> this$0
    java.sql.Timestamp read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.sql.Timestamp) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$23 -> com.google.gson.internal.bind.TypeAdapters$23:
    java.lang.String YEAR -> YEAR
    java.lang.String MONTH -> MONTH
    java.lang.String DAY_OF_MONTH -> DAY_OF_MONTH
    java.lang.String HOUR_OF_DAY -> HOUR_OF_DAY
    java.lang.String MINUTE -> MINUTE
    java.lang.String SECOND -> SECOND
    java.util.Calendar read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.util.Calendar) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$24 -> com.google.gson.internal.bind.TypeAdapters$24:
    java.util.Locale read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.util.Locale) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$25 -> com.google.gson.internal.bind.TypeAdapters$25:
    com.google.gson.JsonElement read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$26 -> com.google.gson.internal.bind.TypeAdapters$26:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.TypeAdapters$27 -> com.google.gson.internal.bind.TypeAdapters$27:
    com.google.gson.reflect.TypeToken val$type -> val$type
    com.google.gson.TypeAdapter val$typeAdapter -> val$typeAdapter
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
com.google.gson.internal.bind.TypeAdapters$28 -> com.google.gson.internal.bind.TypeAdapters$28:
    java.lang.Class val$type -> val$type
    com.google.gson.TypeAdapter val$typeAdapter -> val$typeAdapter
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$29 -> com.google.gson.internal.bind.TypeAdapters$29:
    java.lang.Class val$unboxed -> val$unboxed
    java.lang.Class val$boxed -> val$boxed
    com.google.gson.TypeAdapter val$typeAdapter -> val$typeAdapter
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$3 -> com.google.gson.internal.bind.TypeAdapters$3:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$30 -> com.google.gson.internal.bind.TypeAdapters$30:
    java.lang.Class val$base -> val$base
    java.lang.Class val$sub -> val$sub
    com.google.gson.TypeAdapter val$typeAdapter -> val$typeAdapter
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$31 -> com.google.gson.internal.bind.TypeAdapters$31:
    java.lang.Class val$clazz -> val$clazz
    com.google.gson.TypeAdapter val$typeAdapter -> val$typeAdapter
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$32 -> com.google.gson.internal.bind.TypeAdapters$32:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> $SwitchMap$com$google$gson$stream$JsonToken
com.google.gson.internal.bind.TypeAdapters$4 -> com.google.gson.internal.bind.TypeAdapters$4:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$5 -> com.google.gson.internal.bind.TypeAdapters$5:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$6 -> com.google.gson.internal.bind.TypeAdapters$6:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$7 -> com.google.gson.internal.bind.TypeAdapters$7:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$8 -> com.google.gson.internal.bind.TypeAdapters$8:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$9 -> com.google.gson.internal.bind.TypeAdapters$9:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter -> com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter:
    java.util.Map nameToConstant -> nameToConstant
    java.util.Map constantToName -> constantToName
    java.lang.Enum read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Enum) -> write
    java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
com.google.gson.reflect.TypeToken -> com.google.gson.reflect.TypeToken:
    java.lang.Class rawType -> rawType
    java.lang.reflect.Type type -> type
    int hashCode -> hashCode
    java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class) -> getSuperclassTypeParameter
    java.lang.Class getRawType() -> getRawType
    java.lang.reflect.Type getType() -> getType
    boolean isAssignableFrom(java.lang.Class) -> isAssignableFrom
    boolean isAssignableFrom(java.lang.reflect.Type) -> isAssignableFrom
    boolean isAssignableFrom(com.google.gson.reflect.TypeToken) -> isAssignableFrom
    boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.GenericArrayType) -> isAssignableFrom
    boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map) -> isAssignableFrom
    boolean typeEquals(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType,java.util.Map) -> typeEquals
    java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type,java.lang.Class[]) -> buildUnexpectedTypeError
    boolean matches(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map) -> matches
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.gson.reflect.TypeToken get(java.lang.reflect.Type) -> get
    com.google.gson.reflect.TypeToken get(java.lang.Class) -> get
com.google.gson.stream.JsonReader -> com.google.gson.stream.JsonReader:
    char[] NON_EXECUTE_PREFIX -> NON_EXECUTE_PREFIX
    long MIN_INCOMPLETE_INTEGER -> MIN_INCOMPLETE_INTEGER
    int PEEKED_NONE -> PEEKED_NONE
    int PEEKED_BEGIN_OBJECT -> PEEKED_BEGIN_OBJECT
    int PEEKED_END_OBJECT -> PEEKED_END_OBJECT
    int PEEKED_BEGIN_ARRAY -> PEEKED_BEGIN_ARRAY
    int PEEKED_END_ARRAY -> PEEKED_END_ARRAY
    int PEEKED_TRUE -> PEEKED_TRUE
    int PEEKED_FALSE -> PEEKED_FALSE
    int PEEKED_NULL -> PEEKED_NULL
    int PEEKED_SINGLE_QUOTED -> PEEKED_SINGLE_QUOTED
    int PEEKED_DOUBLE_QUOTED -> PEEKED_DOUBLE_QUOTED
    int PEEKED_UNQUOTED -> PEEKED_UNQUOTED
    int PEEKED_BUFFERED -> PEEKED_BUFFERED
    int PEEKED_SINGLE_QUOTED_NAME -> PEEKED_SINGLE_QUOTED_NAME
    int PEEKED_DOUBLE_QUOTED_NAME -> PEEKED_DOUBLE_QUOTED_NAME
    int PEEKED_UNQUOTED_NAME -> PEEKED_UNQUOTED_NAME
    int PEEKED_LONG -> PEEKED_LONG
    int PEEKED_NUMBER -> PEEKED_NUMBER
    int PEEKED_EOF -> PEEKED_EOF
    int NUMBER_CHAR_NONE -> NUMBER_CHAR_NONE
    int NUMBER_CHAR_SIGN -> NUMBER_CHAR_SIGN
    int NUMBER_CHAR_DIGIT -> NUMBER_CHAR_DIGIT
    int NUMBER_CHAR_DECIMAL -> NUMBER_CHAR_DECIMAL
    int NUMBER_CHAR_FRACTION_DIGIT -> NUMBER_CHAR_FRACTION_DIGIT
    int NUMBER_CHAR_EXP_E -> NUMBER_CHAR_EXP_E
    int NUMBER_CHAR_EXP_SIGN -> NUMBER_CHAR_EXP_SIGN
    int NUMBER_CHAR_EXP_DIGIT -> NUMBER_CHAR_EXP_DIGIT
    java.io.Reader in -> in
    boolean lenient -> lenient
    char[] buffer -> buffer
    int pos -> pos
    int limit -> limit
    int lineNumber -> lineNumber
    int lineStart -> lineStart
    int peeked -> peeked
    long peekedLong -> peekedLong
    int peekedNumberLength -> peekedNumberLength
    java.lang.String peekedString -> peekedString
    int[] stack -> stack
    int stackSize -> stackSize
    void setLenient(boolean) -> setLenient
    boolean isLenient() -> isLenient
    void beginArray() -> beginArray
    void endArray() -> endArray
    void beginObject() -> beginObject
    void endObject() -> endObject
    boolean hasNext() -> hasNext
    com.google.gson.stream.JsonToken peek() -> peek
    int doPeek() -> doPeek
    int peekKeyword() -> peekKeyword
    int peekNumber() -> peekNumber
    boolean isLiteral(char) -> isLiteral
    java.lang.String nextName() -> nextName
    java.lang.String nextString() -> nextString
    boolean nextBoolean() -> nextBoolean
    void nextNull() -> nextNull
    double nextDouble() -> nextDouble
    long nextLong() -> nextLong
    java.lang.String nextQuotedValue(char) -> nextQuotedValue
    java.lang.String nextUnquotedValue() -> nextUnquotedValue
    void skipQuotedValue(char) -> skipQuotedValue
    void skipUnquotedValue() -> skipUnquotedValue
    int nextInt() -> nextInt
    void close() -> close
    void skipValue() -> skipValue
    void push(int) -> push
    boolean fillBuffer(int) -> fillBuffer
    int getLineNumber() -> getLineNumber
    int getColumnNumber() -> getColumnNumber
    int nextNonWhitespace(boolean) -> nextNonWhitespace
    void checkLenient() -> checkLenient
    void skipToEndOfLine() -> skipToEndOfLine
    boolean skipTo(java.lang.String) -> skipTo
    java.lang.String toString() -> toString
    char readEscapeCharacter() -> readEscapeCharacter
    java.io.IOException syntaxError(java.lang.String) -> syntaxError
    void consumeNonExecutePrefix() -> consumeNonExecutePrefix
    int access$000(com.google.gson.stream.JsonReader) -> access$000
    int access$100(com.google.gson.stream.JsonReader) -> access$100
    int access$002(com.google.gson.stream.JsonReader,int) -> access$002
    int access$200(com.google.gson.stream.JsonReader) -> access$200
    int access$300(com.google.gson.stream.JsonReader) -> access$300
com.google.gson.stream.JsonReader$1 -> com.google.gson.stream.JsonReader$1:
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> promoteNameToValue
com.google.gson.stream.JsonScope -> com.google.gson.stream.JsonScope:
    int EMPTY_ARRAY -> EMPTY_ARRAY
    int NONEMPTY_ARRAY -> NONEMPTY_ARRAY
    int EMPTY_OBJECT -> EMPTY_OBJECT
    int DANGLING_NAME -> DANGLING_NAME
    int NONEMPTY_OBJECT -> NONEMPTY_OBJECT
    int EMPTY_DOCUMENT -> EMPTY_DOCUMENT
    int NONEMPTY_DOCUMENT -> NONEMPTY_DOCUMENT
    int CLOSED -> CLOSED
com.google.gson.stream.JsonToken -> com.google.gson.stream.JsonToken:
    com.google.gson.stream.JsonToken BEGIN_ARRAY -> BEGIN_ARRAY
    com.google.gson.stream.JsonToken END_ARRAY -> END_ARRAY
    com.google.gson.stream.JsonToken BEGIN_OBJECT -> BEGIN_OBJECT
    com.google.gson.stream.JsonToken END_OBJECT -> END_OBJECT
    com.google.gson.stream.JsonToken NAME -> NAME
    com.google.gson.stream.JsonToken STRING -> STRING
    com.google.gson.stream.JsonToken NUMBER -> NUMBER
    com.google.gson.stream.JsonToken BOOLEAN -> BOOLEAN
    com.google.gson.stream.JsonToken NULL -> NULL
    com.google.gson.stream.JsonToken END_DOCUMENT -> END_DOCUMENT
    com.google.gson.stream.JsonToken[] $VALUES -> $VALUES
    com.google.gson.stream.JsonToken[] values() -> values
    com.google.gson.stream.JsonToken valueOf(java.lang.String) -> valueOf
com.google.gson.stream.JsonWriter -> com.google.gson.stream.JsonWriter:
    java.lang.String[] REPLACEMENT_CHARS -> REPLACEMENT_CHARS
    java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS -> HTML_SAFE_REPLACEMENT_CHARS
    java.io.Writer out -> out
    int[] stack -> stack
    int stackSize -> stackSize
    java.lang.String indent -> indent
    java.lang.String separator -> separator
    boolean lenient -> lenient
    boolean htmlSafe -> htmlSafe
    java.lang.String deferredName -> deferredName
    boolean serializeNulls -> serializeNulls
    void setIndent(java.lang.String) -> setIndent
    void setLenient(boolean) -> setLenient
    boolean isLenient() -> isLenient
    void setHtmlSafe(boolean) -> setHtmlSafe
    boolean isHtmlSafe() -> isHtmlSafe
    void setSerializeNulls(boolean) -> setSerializeNulls
    boolean getSerializeNulls() -> getSerializeNulls
    com.google.gson.stream.JsonWriter beginArray() -> beginArray
    com.google.gson.stream.JsonWriter endArray() -> endArray
    com.google.gson.stream.JsonWriter beginObject() -> beginObject
    com.google.gson.stream.JsonWriter endObject() -> endObject
    com.google.gson.stream.JsonWriter open(int,java.lang.String) -> open
    com.google.gson.stream.JsonWriter close(int,int,java.lang.String) -> close
    void push(int) -> push
    int peek() -> peek
    void replaceTop(int) -> replaceTop
    com.google.gson.stream.JsonWriter name(java.lang.String) -> name
    void writeDeferredName() -> writeDeferredName
    com.google.gson.stream.JsonWriter value(java.lang.String) -> value
    com.google.gson.stream.JsonWriter nullValue() -> nullValue
    com.google.gson.stream.JsonWriter value(boolean) -> value
    com.google.gson.stream.JsonWriter value(double) -> value
    com.google.gson.stream.JsonWriter value(long) -> value
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> value
    void flush() -> flush
    void close() -> close
    void string(java.lang.String) -> string
    void newline() -> newline
    void beforeName() -> beforeName
    void beforeValue(boolean) -> beforeValue
com.google.gson.stream.MalformedJsonException -> com.google.gson.stream.MalformedJsonException:
    long serialVersionUID -> serialVersionUID
com.ktpns.lib.KPNSApis -> com.ktpns.lib.KPNSApis:
    com.ktpns.lib.c.h mCurrentRequestManagerInfo -> mCurrentRequestManagerInfo
    android.content.Context mContext -> mContext
    com.ktpns.lib.KPNSApis kpnsApis -> kpnsApis
    android.net.LocalServerSocket mPushLocalSocket -> mPushLocalSocket
    android.os.Handler hanlder -> hanlder
    int MAX_RETRY_COUNT -> MAX_RETRY_COUNT
    int PUSH_CONNECTED -> PUSH_CONNECTED
    int PUSH_CONNECTING -> PUSH_CONNECTING
    int PUSH_DISCONNECTED -> PUSH_DISCONNECTED
    com.ktpns.lib.OnKPNSInitializeEventListener mListener -> mListener
    void requestInstance(android.content.Context,com.ktpns.lib.OnKPNSInitializeEventListener) -> requestInstance
    void register(java.lang.String,java.lang.String) -> register
    void register(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> register
    void registerGCM() -> registerGCM
    void invokePushClient(android.content.Context) -> invokePushClient
    int getConnectionState() -> getConnectionState
    void getConnectionState(boolean,android.content.Context) -> getConnectionState
    boolean sendServiceStatus(android.content.Context) -> sendServiceStatus
    int getConnectionState(android.content.Context) -> getConnectionState
    java.lang.String GetStatus(android.content.Context) -> GetStatus
    int PingToRQManager(android.content.Context) -> PingToRQManager
    void registerToClient(boolean,android.content.Context,java.lang.String,java.lang.String) -> registerToClient
    void setPushLocalSocket(android.content.Context) -> setPushLocalSocket
    void Wait(int) -> Wait
    int RegisgerID(java.lang.String,java.lang.String) -> RegisgerID
    com.ktpns.lib.KPNSApis access$0() -> access$0
    android.content.Context access$1() -> access$1
    void access$3(com.ktpns.lib.KPNSApis) -> access$3
    com.ktpns.lib.OnKPNSInitializeEventListener access$4() -> access$4
    android.os.Handler access$5() -> access$5
    void access$6(int) -> access$6
com.ktpns.lib.KPNSApis$a -> com.ktpns.lib.KPNSApis$a:
    void handleMessage(android.os.Message) -> handleMessage
com.ktpns.lib.OnKPNSInitializeEventListener -> com.ktpns.lib.OnKPNSInitializeEventListener:
    void onSuccessInitialize(com.ktpns.lib.KPNSApis) -> onSuccessInitialize
    void onFailInitialize() -> onFailInitialize
com.ktpns.lib.R -> com.ktpns.lib.R:
com.ktpns.lib.R$drawable -> com.ktpns.lib.R$drawable:
    int kpns_default_notice_symbol -> kpns_default_notice_symbol
    int kpns_notification_small_image_blank -> kpns_notification_small_image_blank
    int kpns_r200_bg_popup_btn -> kpns_r200_bg_popup_btn
    int kpns_r200_bg_popup_contents -> kpns_r200_bg_popup_contents
    int kpns_r200_bg_popuptitle -> kpns_r200_bg_popuptitle
    int kpns_r200_popup_btn -> kpns_r200_popup_btn
    int kpns_r200_popup_btp -> kpns_r200_popup_btp
    int kpns_r200_popup_button -> kpns_r200_popup_button
    int kpns_r200_scroll_bar -> kpns_r200_scroll_bar
com.ktpns.lib.R$id -> com.ktpns.lib.R$id:
    int notice_content -> notice_content
    int notice_logo -> notice_logo
    int notice_logo_blank -> notice_logo_blank
    int notice_title -> notice_title
    int ok_button -> ok_button
    int request_body -> request_body
    int request_btn -> request_btn
    int request_title -> request_title
com.ktpns.lib.R$layout -> com.ktpns.lib.R$layout:
    int kpns_granted_permission_ui -> kpns_granted_permission_ui
    int kpns_r200_notification_bar -> kpns_r200_notification_bar
    int kpns_r200_popup_activity -> kpns_r200_popup_activity
com.ktpns.lib.R$string -> com.ktpns.lib.R$string:
    int button_ok -> button_ok
    int label_push -> label_push
    int label_push_description -> label_push_description
    int label_push_notification -> label_push_notification
    int label_push_notification_description -> label_push_notification_description
    int label_push_register -> label_push_register
    int label_push_register_description -> label_push_register_description
    int notice_title -> notice_title
    int request_permission_3rd_call -> request_permission_3rd_call
    int request_permission_btn -> request_permission_btn
    int request_permission_call -> request_permission_call
    int request_permission_title -> request_permission_title
    int service_name -> service_name
com.ktpns.lib.a -> com.ktpns.lib.a:
    void run() -> run
com.ktpns.lib.a.a -> com.ktpns.lib.a.a:
    java.lang.Short a -> a
    java.lang.String b -> b
    boolean c -> c
com.ktpns.lib.a.b -> com.ktpns.lib.a.b:
    android.content.Context a -> a
    java.util.List b -> b
    java.lang.String a(int) -> a
    boolean a() -> a
    byte[][] a(byte[],int[]) -> a
    int a(byte[]) -> a
    void a(android.content.Context,java.lang.String) -> a
    void b(android.content.Context,java.lang.String) -> b
    void a(android.content.Context,int) -> a
    void c(android.content.Context,java.lang.String) -> c
    void a(android.content.Context,boolean) -> a
    boolean a(android.content.Context) -> a
    void d(android.content.Context,java.lang.String) -> d
    void e(android.content.Context,java.lang.String) -> e
    java.lang.String b(android.content.Context) -> b
    void b(android.content.Context,int) -> b
    void f(android.content.Context,java.lang.String) -> f
    void b(android.content.Context,boolean) -> b
    java.lang.String c(android.content.Context) -> c
    byte[] b(byte[]) -> b
    byte[] a(byte[],byte[]) -> a
    java.lang.String c(byte[]) -> c
com.ktpns.lib.b.a -> com.ktpns.lib.b.a:
com.ktpns.lib.c.a -> com.ktpns.lib.c.a:
    android.net.LocalSocket b -> b
    java.io.BufferedInputStream c -> c
    java.io.BufferedOutputStream d -> d
    boolean e -> e
    com.ktpns.lib.c.i a -> a
    java.util.Map f -> f
    android.content.Context g -> g
    void a(com.ktpns.lib.c.f) -> a
    void run() -> run
    void a() -> a
com.ktpns.lib.c.a$a -> com.ktpns.lib.c.a$a:
    void a(com.ktpns.lib.c.f) -> a
com.ktpns.lib.c.b -> com.ktpns.lib.c.b:
    com.ktpns.lib.c.a a -> a
    void a(com.ktpns.lib.c.f) -> a
com.ktpns.lib.c.c -> com.ktpns.lib.c.c:
    com.ktpns.lib.c.a a -> a
    void a(com.ktpns.lib.c.f) -> a
com.ktpns.lib.c.d -> com.ktpns.lib.c.d:
    com.ktpns.lib.c.a a -> a
    void a(com.ktpns.lib.c.f) -> a
com.ktpns.lib.c.e -> com.ktpns.lib.c.e:
    void a() -> a
    void a(java.lang.String,java.lang.String) -> a
com.ktpns.lib.c.f -> com.ktpns.lib.c.f:
    int c -> c
    int d -> d
    int e -> e
    byte[] f -> f
    byte[] g -> g
    java.lang.String a -> a
    java.lang.String b -> b
    int a(java.io.OutputStream) -> a
    int a(java.io.InputStream) -> a
com.ktpns.lib.c.g -> com.ktpns.lib.c.g:
    android.content.Context a -> a
    int a() -> a
com.ktpns.lib.c.h -> com.ktpns.lib.c.h:
    void a(java.lang.String) -> a
    java.lang.String a() -> a
    void b(java.lang.String) -> b
    java.lang.String b() -> b
com.ktpns.lib.c.i -> com.ktpns.lib.c.i:
    java.lang.Object a -> a
    android.content.Context b -> b
    android.os.Handler c -> c
    java.lang.Thread d -> d
    boolean e -> e
    boolean f -> f
    boolean g -> g
    java.lang.String h -> h
    com.ktpns.lib.c.h i -> i
    boolean j -> j
    java.lang.String b() -> b
    void f() -> f
    int c() -> c
    boolean d() -> d
    int e() -> e
    void run() -> run
    void a(com.ktpns.lib.c.h) -> a
    void a() -> a
    int g() -> g
    void a(java.lang.String,java.lang.String) -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.ktpns.lib.d.a -> com.ktpns.lib.d.a:
    boolean a(java.lang.String) -> a
com.ktpns.lib.database.DbAppInfo -> com.ktpns.lib.database.DbAppInfo:
    java.lang.String DATABASE_NAME -> DATABASE_NAME
    int DATABASE_VERSION -> DATABASE_VERSION
    java.lang.String TABLE_NAME -> TABLE_NAME
    java.lang.String FIELD_APP_ID -> FIELD_APP_ID
    java.lang.String FIELD_TOKEN -> FIELD_TOKEN
    java.lang.String FIELD_CLIENT_ID -> FIELD_CLIENT_ID
    java.lang.String FIELD_PACKAGE_NAME -> FIELD_PACKAGE_NAME
    java.lang.String FIELD_THIRD_TYPE -> FIELD_THIRD_TYPE
    java.lang.String FIELD_PUSH_FLAG -> FIELD_PUSH_FLAG
    java.lang.String FIELD_RECEIVE_DATE -> FIELD_RECEIVE_DATE
    java.lang.String FIELD_EXPIRED -> FIELD_EXPIRED
    int FLAG_PUSH_OFF -> FLAG_PUSH_OFF
    int FLAG_PUSH_ON -> FLAG_PUSH_ON
    int FLAG_PUSH_NONE -> FLAG_PUSH_NONE
    int EXPIRED_TRUE -> EXPIRED_TRUE
    int EXPIRED_FALSE -> EXPIRED_FALSE
    int IS_TTA -> IS_TTA
    int IS_NOT_TTA -> IS_NOT_TTA
    com.ktpns.lib.database.DbAppInfo dbHandle -> dbHandle
    com.ktpns.lib.database.DbAppInfo$a dbHelper -> dbHelper
    com.ktpns.lib.database.DbAppInfo getInstance() -> getInstance
    com.ktpns.lib.database.DbAppInfo$a getDbHelper(android.content.Context) -> getDbHelper
    boolean insert(android.content.Context,com.ktpns.lib.database.data.DataAppInfo) -> insert
    boolean insert(android.content.Context,com.ktpns.lib.database.data.DataReqTokenToServer,java.lang.String) -> insert
    long insert(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,long) -> insert
    long insert(android.content.Context,android.content.ContentValues) -> insert
    int update(android.content.Context,int,long) -> update
    void updateToAllExpired(android.content.Context) -> updateToAllExpired
    int updateAppInfo(android.content.Context,java.lang.String,java.lang.String,java.lang.String,byte[]) -> updateAppInfo
    int update(android.content.Context,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    int updateExpiredApp(android.content.Context) -> updateExpiredApp
    int updateAppIsExpired(android.content.Context,java.lang.String) -> updateAppIsExpired
    com.ktpns.lib.database.data.DataAppInfo updateAppInfo(android.content.Context,com.ktpns.lib.net.data.TokenAllocationResponse) -> updateAppInfo
    com.ktpns.lib.database.data.DataAppInfo getDataAppInfo(android.content.Context,java.lang.String) -> getDataAppInfo
    java.lang.String getPackageName(android.content.Context,java.lang.String) -> getPackageName
    java.lang.String queryAppIdFromPkgName(android.content.Context,java.lang.String) -> queryAppIdFromPkgName
    com.ktpns.lib.database.data.DataAppInfo queryNotExpiredAppInfo(android.content.Context,com.ktpns.lib.database.data.DataReqTokenFromApp) -> queryNotExpiredAppInfo
    java.util.List queryAll(android.content.Context) -> queryAll
    com.ktpns.lib.database.data.DataAppInfo[] queryNotExpiredAppInfoAll(android.content.Context) -> queryNotExpiredAppInfoAll
    com.ktpns.lib.database.data.DataAppInfo[] queryAppInfos(android.content.Context,java.lang.String,java.lang.String[]) -> queryAppInfos
    com.ktpns.lib.database.data.DataAppInfo queryAppInfo(android.content.Context,java.lang.String,java.lang.String[]) -> queryAppInfo
    int queryPushFlag(android.content.Context,java.lang.String,java.lang.String) -> queryPushFlag
    void replaceAllData(android.content.Context,com.ktpns.lib.database.data.DataAppInfo[]) -> replaceAllData
    int delete(android.content.Context,java.lang.String) -> delete
    void deleteFile(android.content.Context,java.lang.String) -> deleteFile
    void changeAppInfo(android.content.Context,android.content.Intent) -> changeAppInfo
com.ktpns.lib.database.DbAppInfo$a -> com.ktpns.lib.database.DbAppInfo$a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.ktpns.lib.database.DbAppInfo$b -> com.ktpns.lib.database.DbAppInfo$b:
    com.ktpns.lib.database.DbAppInfo a -> a
com.ktpns.lib.database.DbMsgLog -> com.ktpns.lib.database.DbMsgLog:
    java.lang.String DATABASE_NAME -> DATABASE_NAME
    int DATABASE_VERSION -> DATABASE_VERSION
    java.lang.String TABLE_NAME -> TABLE_NAME
    java.lang.String FIELD_CMD_NAME -> FIELD_CMD_NAME
    java.lang.String FIELD_LEVEL -> FIELD_LEVEL
    java.lang.String FIELD_DATE -> FIELD_DATE
    java.lang.String FIELD_TRANS_ID -> FIELD_TRANS_ID
    java.lang.String FIELD_APP_ID -> FIELD_APP_ID
    java.lang.String FIELD_CLIENT_ID -> FIELD_CLIENT_ID
    java.lang.String FIELD_RET_CODE -> FIELD_RET_CODE
    java.lang.String FIELD_ORG_MSG_LENGTH -> FIELD_ORG_MSG_LENGTH
    java.lang.String FIELD_ORG_MSG -> FIELD_ORG_MSG
    int LEVEL_NETWORK -> LEVEL_NETWORK
    int LEVEL_DEVELOPER -> LEVEL_DEVELOPER
    int LEVEL_TESTER -> LEVEL_TESTER
    int LEVEL_USER -> LEVEL_USER
    com.ktpns.lib.database.DbMsgLog dbHandle -> dbHandle
    com.ktpns.lib.database.DbMsgLog$a dbHelper -> dbHelper
    android.os.Handler notifier -> notifier
    com.ktpns.lib.database.DbMsgLog getInstance() -> getInstance
    com.ktpns.lib.database.DbMsgLog$a getDbHelper(android.content.Context) -> getDbHelper
    long insert(android.content.Context,java.lang.String,int,long,short,java.lang.String,java.lang.String,int,int,byte[]) -> insert
    long insert(android.content.Context,android.content.ContentValues) -> insert
    long putMsgLogForNetwork(android.content.Context,byte[]) -> putMsgLogForNetwork
    long putMsgLogForNetwork(android.content.Context,byte[],long) -> putMsgLogForNetwork
    long putMsgLogForDeveloper(android.content.Context,java.lang.String) -> putMsgLogForDeveloper
    long putMsgLogForDeveloper(android.content.Context,java.lang.String,long) -> putMsgLogForDeveloper
    long putMsgLogForTester(android.content.Context,java.lang.String) -> putMsgLogForTester
    long putMsgLogForTester(android.content.Context,java.lang.String,long) -> putMsgLogForTester
    long putMsgLogForUser(android.content.Context,java.lang.String) -> putMsgLogForUser
    long putMsgLogForUser(android.content.Context,java.lang.String,long) -> putMsgLogForUser
    long putMessageBlob(android.content.Context,android.content.ContentValues) -> putMessageBlob
    java.util.ArrayList query(android.content.Context,boolean,boolean,boolean,boolean) -> query
    android.database.Cursor query(android.content.Context,java.lang.String,java.lang.String[]) -> query
    android.database.Cursor query(android.content.Context,int) -> query
    int delete(android.content.Context,long) -> delete
    int deleteAll(android.content.Context) -> deleteAll
    void setHandler(android.os.Handler) -> setHandler
    void setDisplayHandler(android.os.Handler) -> setDisplayHandler
com.ktpns.lib.database.DbMsgLog$a -> com.ktpns.lib.database.DbMsgLog$a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.ktpns.lib.database.DbMsgLog$b -> com.ktpns.lib.database.DbMsgLog$b:
    com.ktpns.lib.database.DbMsgLog a -> a
com.ktpns.lib.database.DbPushMsg -> com.ktpns.lib.database.DbPushMsg:
    java.lang.String DATABASE_NAME -> DATABASE_NAME
    int DATABASE_VERSION -> DATABASE_VERSION
    java.lang.String TABLE_NAME -> TABLE_NAME
    java.lang.String FIELD_PAYLOAD -> FIELD_PAYLOAD
    java.lang.String FIELD_RECEIVE_DATE -> FIELD_RECEIVE_DATE
    java.lang.String FIELD_DELIVERY_DATE -> FIELD_DELIVERY_DATE
    java.lang.String FIELD_MSG_TYPE -> FIELD_MSG_TYPE
    java.lang.String FIELD_NEED_ACK -> FIELD_NEED_ACK
    java.lang.String FIELD_APP_ID -> FIELD_APP_ID
    java.lang.String FIELD_CLIENT_ID -> FIELD_CLIENT_ID
    java.lang.String FIELD_TRANSACTION_ID -> FIELD_TRANSACTION_ID
    java.lang.String FIELD_STATUS -> FIELD_STATUS
    java.lang.String FIELD_MSG_ID -> FIELD_MSG_ID
    int STATUS_NOT_INITIALIZED -> STATUS_NOT_INITIALIZED
    int STATUS_RECEIVED -> STATUS_RECEIVED
    int STATUS_SEND_SUCCESS -> STATUS_SEND_SUCCESS
    int STATUS_SEND_WAITING -> STATUS_SEND_WAITING
    int STATUS_SEND_FAILED_NO_APP_ID -> STATUS_SEND_FAILED_NO_APP_ID
    int STATUS_SEND_FAILED_APP_NOT_REGISTERED -> STATUS_SEND_FAILED_APP_NOT_REGISTERED
    int STATUS_SEND_FAILED_APP_NOT_EXIST -> STATUS_SEND_FAILED_APP_NOT_EXIST
    int STATUS_SEND_FAILED_DUPLICATE_MESSAGE -> STATUS_SEND_FAILED_DUPLICATE_MESSAGE
    int STATUS_SEND_FAILED_LIBAPP_NO_NOTICE -> STATUS_SEND_FAILED_LIBAPP_NO_NOTICE
    int STATUS_SEND_FAILED_FLAG_OFF -> STATUS_SEND_FAILED_FLAG_OFF
    int NEED_ACK_TRUE -> NEED_ACK_TRUE
    int NEED_ACK_FALSE -> NEED_ACK_FALSE
    com.ktpns.lib.database.DbPushMsg dbHandle -> dbHandle
    com.ktpns.lib.database.DbPushMsg$a dbHelper -> dbHelper
    java.lang.String[] PROJECTIONS -> PROJECTIONS
    com.ktpns.lib.database.DbPushMsg getInstance() -> getInstance
    com.ktpns.lib.database.DbPushMsg$a getDbHelper(android.content.Context) -> getDbHelper
    long insert(android.content.Context,java.lang.String,long,long,int,boolean,java.lang.String,java.lang.String,short,int) -> insert
    long insert(android.content.Context,java.lang.String,long,long,int,boolean,java.lang.String,java.lang.String,short,int,java.lang.String) -> insert
    long insert(android.content.Context,com.ktpns.lib.net.data.PushRequest) -> insert
    long insert(android.content.Context,com.ktpns.lib.net.data.AdaptivePushRequest) -> insert
    long insert(android.content.Context,com.ktpns.lib.net.data.GCMPushData) -> insert
    long insert(android.content.Context,android.content.ContentValues) -> insert
    int update(android.content.Context,int,long) -> update
    long update(android.content.Context,com.ktpns.lib.database.data.DataPushMsg) -> update
    int update(android.content.Context,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    boolean isDuplicateMessage(android.content.Context,java.lang.String,short) -> isDuplicateMessage
    boolean isDuplicateMessage(android.content.Context,java.lang.String,java.lang.String) -> isDuplicateMessage
    boolean isAdaptiveDuplicateMessage(android.content.Context,java.lang.String,java.lang.String) -> isAdaptiveDuplicateMessage
    void setPushCount(android.content.Context,com.ktpns.lib.database.data.DataAppInfo[]) -> setPushCount
    com.ktpns.lib.database.data.DataPushMsg[] query(android.content.Context,int) -> query
    java.util.ArrayList queryAll(android.content.Context) -> queryAll
    int delete(android.content.Context,long) -> delete
com.ktpns.lib.database.DbPushMsg$a -> com.ktpns.lib.database.DbPushMsg$a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.ktpns.lib.database.DbPushMsg$b -> com.ktpns.lib.database.DbPushMsg$b:
    com.ktpns.lib.database.DbPushMsg a -> a
com.ktpns.lib.database.DbReqToken -> com.ktpns.lib.database.DbReqToken:
    java.lang.String DATABASE_NAME -> DATABASE_NAME
    int DATABASE_VERSION -> DATABASE_VERSION
    int STATUS_SUCCESS -> STATUS_SUCCESS
    int STATUS_FAILED -> STATUS_FAILED
    int STATUS_WAITING -> STATUS_WAITING
    int STATUS_SEND_FAILED -> STATUS_SEND_FAILED
    com.ktpns.lib.database.DbReqToken dbHandle -> dbHandle
    com.ktpns.lib.database.DbReqToken$a dbHelper -> dbHelper
    com.ktpns.lib.database.DbReqToken getInstance() -> getInstance
    com.ktpns.lib.database.DbReqToken$a getDbHelper(android.content.Context) -> getDbHelper
    void updateTokenAllocationResponse(android.content.Context,com.ktpns.lib.database.data.DataReqTokenToServer,int) -> updateTokenAllocationResponse
    com.ktpns.lib.database.DbReqToken$a access$0(android.content.Context) -> access$0
    com.ktpns.lib.database.DbReqToken access$1() -> access$1
com.ktpns.lib.database.DbReqToken$FromApp -> com.ktpns.lib.database.DbReqToken$FromApp:
    java.lang.String TABLE_NAME -> TABLE_NAME
    java.lang.String FIELD_REQUEST_DATE -> FIELD_REQUEST_DATE
    java.lang.String FIELD_APP_ID -> FIELD_APP_ID
    java.lang.String FIELD_CLIENT_ID -> FIELD_CLIENT_ID
    java.lang.String FIELD_PACKAGE_NAME -> FIELD_PACKAGE_NAME
    java.lang.String FIELD_OPERATOR -> FIELD_OPERATOR
    java.lang.String FIELD_THIRD_TYPE -> FIELD_THIRD_TYPE
    java.lang.String FIELD_STATUS -> FIELD_STATUS
    java.lang.String STR_CREATE_TABLE -> STR_CREATE_TABLE
    long insert(android.content.Context,com.ktpns.lib.database.data.DataReqTokenFromApp,int) -> insert
    long insert(android.content.Context,long,java.lang.String,java.lang.String,java.lang.String,int,int,int) -> insert
    long insert(android.content.Context,android.content.ContentValues) -> insert
    long replace(android.content.Context,long,java.lang.String,java.lang.String,java.lang.String,int) -> replace
    int updateResult(android.content.Context,com.ktpns.lib.database.data.DataReqTokenToServer,java.lang.String,int) -> updateResult
    int update(android.content.Context,int,long) -> update
    int update(android.content.Context,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    int queryStatus(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> queryStatus
    java.util.List queryAll(android.content.Context) -> queryAll
    android.database.Cursor query(android.content.Context,int) -> query
    java.lang.String query(android.content.Context,java.lang.String) -> query
    int delete(android.content.Context,long) -> delete
    int delete(android.content.Context,java.lang.String) -> delete
com.ktpns.lib.database.DbReqToken$ToServer -> com.ktpns.lib.database.DbReqToken$ToServer:
    java.lang.String TABLE_NAME -> TABLE_NAME
    java.lang.String FIELD_ID_FROM_APP -> FIELD_ID_FROM_APP
    java.lang.String FIELD_REQUEST_DATE -> FIELD_REQUEST_DATE
    java.lang.String FIELD_RECEIVE_DATE -> FIELD_RECEIVE_DATE
    java.lang.String FIELD_APP_ID -> FIELD_APP_ID
    java.lang.String FIELD_TOKEN -> FIELD_TOKEN
    java.lang.String FIELD_CLIENT_ID -> FIELD_CLIENT_ID
    java.lang.String FIELD_PACKAGE_NAME -> FIELD_PACKAGE_NAME
    java.lang.String FIELD_TRANSACTION_ID -> FIELD_TRANSACTION_ID
    java.lang.String FIELD_THIRD_TYPE -> FIELD_THIRD_TYPE
    java.lang.String FIELD_STATUS -> FIELD_STATUS
    java.lang.String STR_CREATE_TABLE -> STR_CREATE_TABLE
    com.ktpns.lib.database.data.DataReqTokenToServer insert(android.content.Context,com.ktpns.lib.database.data.DataReqTokenFromApp,short,int) -> insert
    long insert(android.content.Context,android.content.ContentValues) -> insert
    int updateResult(android.content.Context,com.ktpns.lib.database.data.DataReqTokenToServer,java.lang.String,int) -> updateResult
    int update(android.content.Context,int,long) -> update
    int update(android.content.Context,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    com.ktpns.lib.database.data.DataReqTokenToServer queryByAppId(android.content.Context,java.lang.String,short,int) -> queryByAppId
    com.ktpns.lib.database.data.DataReqTokenToServer queryByPackageName(android.content.Context,java.lang.String,short,int) -> queryByPackageName
    java.util.ArrayList query(android.content.Context,int) -> query
    java.util.List queryAll(android.content.Context) -> queryAll
    int delete(android.content.Context,long) -> delete
com.ktpns.lib.database.DbReqToken$a -> com.ktpns.lib.database.DbReqToken$a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.ktpns.lib.database.DbReqToken$b -> com.ktpns.lib.database.DbReqToken$b:
    com.ktpns.lib.database.DbReqToken a -> a
com.ktpns.lib.database.data.DataAppInfo -> com.ktpns.lib.database.data.DataAppInfo:
    long id -> id
    java.lang.String appId -> appId
    java.lang.String token -> token
    java.lang.String clientId -> clientId
    java.lang.String packageName -> packageName
    int thirdType -> thirdType
    int pushFlag -> pushFlag
    long receiveDate -> receiveDate
    int expired -> expired
    java.lang.String versionName -> versionName
    int versionCode -> versionCode
    int count -> count
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
    java.lang.String printThirdType() -> printThirdType
    java.lang.String printPushFlag() -> printPushFlag
    java.lang.String printExpired() -> printExpired
com.ktpns.lib.database.data.DataMsgLog -> com.ktpns.lib.database.data.DataMsgLog:
    long id -> id
    java.lang.String cmdName -> cmdName
    int level -> level
    long date -> date
    short transId -> transId
    java.lang.String appId -> appId
    java.lang.String clientId -> clientId
    int retCode -> retCode
    int orgMsgLength -> orgMsgLength
    byte[] orgMsg -> orgMsg
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
    java.lang.String getLog(android.content.Context) -> getLog
com.ktpns.lib.database.data.DataPushMsg -> com.ktpns.lib.database.data.DataPushMsg:
    long id -> id
    java.lang.String payload -> payload
    long receiveDate -> receiveDate
    long deliveryDate -> deliveryDate
    int msgType -> msgType
    int needAck -> needAck
    java.lang.String appId -> appId
    java.lang.String clientId -> clientId
    short transactionId -> transactionId
    int status -> status
    java.lang.String msgId -> msgId
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
    java.lang.String printMsgType() -> printMsgType
    java.lang.String printNeedAck() -> printNeedAck
    java.lang.String printStatus() -> printStatus
    int getPushType() -> getPushType
com.ktpns.lib.database.data.DataReqTokenFromApp -> com.ktpns.lib.database.data.DataReqTokenFromApp:
    long id -> id
    long requestDate -> requestDate
    java.lang.String appId -> appId
    java.lang.String clientId -> clientId
    java.lang.String packageName -> packageName
    int operator -> operator
    int thirdType -> thirdType
    int status -> status
    android.os.Parcelable$Creator CREATOR -> CREATOR
    boolean isRequestValid() -> isRequestValid
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
    java.lang.String printOperator() -> printOperator
    java.lang.String printThirdType() -> printThirdType
    java.lang.String printStatus() -> printStatus
com.ktpns.lib.database.data.DataReqTokenToServer -> com.ktpns.lib.database.data.DataReqTokenToServer:
    long id -> id
    long idFromApp -> idFromApp
    long requestDate -> requestDate
    long receiveDate -> receiveDate
    java.lang.String appId -> appId
    java.lang.String token -> token
    java.lang.String clientId -> clientId
    java.lang.String packageName -> packageName
    short transactionId -> transactionId
    int thirdType -> thirdType
    int status -> status
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
    void setValuesToResponse(com.ktpns.lib.net.data.TokenAllocationResponse,java.lang.String) -> setValuesToResponse
    void setValuesToResponse(com.ktpns.lib.net.data.AdaptiveTokenAllocationResponse,java.lang.String) -> setValuesToResponse
    void updateWithResponse(com.ktpns.lib.net.data.AdaptiveTokenAllocationResponse,java.lang.String) -> updateWithResponse
    java.lang.String printThirdType() -> printThirdType
    java.lang.String printStatus() -> printStatus
com.ktpns.lib.database.data.DataSysInfo -> com.ktpns.lib.database.data.DataSysInfo:
    long id -> id
    java.lang.String authType -> authType
    java.lang.String userId -> userId
    java.lang.String netType -> netType
    java.lang.String imei -> imei
    java.lang.String msisdn -> msisdn
    java.lang.String deviceId -> deviceId
    java.lang.String osVer -> osVer
    long updateTime -> updateTime
    java.lang.String clientId -> clientId
    int keepAliveInterval -> keepAliveInterval
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
com.ktpns.lib.database.data.a -> com.ktpns.lib.database.data.a:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.ktpns.lib.database.data.b -> com.ktpns.lib.database.data.b:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.ktpns.lib.database.data.c -> com.ktpns.lib.database.data.c:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.ktpns.lib.database.data.d -> com.ktpns.lib.database.data.d:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.ktpns.lib.database.data.e -> com.ktpns.lib.database.data.e:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.ktpns.lib.database.data.f -> com.ktpns.lib.database.data.f:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.ktpns.lib.e.a -> com.ktpns.lib.e.a:
    boolean a -> a
    void a(android.content.Context,java.lang.String) -> a
    void a(android.content.Context,android.content.Intent) -> a
    void a(android.content.Context,java.lang.String,android.content.Intent) -> a
com.ktpns.lib.f.a -> com.ktpns.lib.f.a:
    boolean a(java.lang.String) -> a
com.ktpns.lib.net.HeaderDecoder -> com.ktpns.lib.net.HeaderDecoder:
    int getBodylength(byte[]) -> getBodylength
    int getHeaderlength() -> getHeaderlength
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
com.ktpns.lib.net.MessageHandler -> com.ktpns.lib.net.MessageHandler:
    android.content.Context a -> a
    com.ktpns.lib.net.data.PushInfoResponse b -> b
    int[] c -> c
    int[] d -> d
    void a(com.ktpns.lib.net.g) -> a
    void b(com.ktpns.lib.net.g) -> b
    void a() -> a
    void a(org.jboss.netty.handler.timeout.IdleStateEvent) -> a
    void a(java.lang.Throwable,com.ktpns.lib.net.g) -> a
    void a(com.ktpns.lib.net.d,com.ktpns.lib.net.g) -> a
    boolean a(android.content.Context,com.ktpns.lib.net.data.AdaptivePushRequest) -> a
    boolean a(android.content.Context,com.ktpns.lib.net.data.PushRequest) -> a
    boolean b(android.content.Context,com.ktpns.lib.net.data.AdaptivePushRequest) -> b
    boolean b(android.content.Context,com.ktpns.lib.net.data.PushRequest) -> b
    int a(java.lang.String[]) -> a
    void a(android.content.Context) -> a
    void a(int,android.content.Context) -> a
    int[] b() -> b
    int[] c() -> c
com.ktpns.lib.net.a -> com.ktpns.lib.net.a:
    void a(com.ktpns.lib.net.d,com.ktpns.lib.net.g) -> a
    void a(com.ktpns.lib.net.g) -> a
    void b(com.ktpns.lib.net.g) -> b
    void a(org.jboss.netty.handler.timeout.IdleStateEvent) -> a
    void a(java.lang.Throwable,com.ktpns.lib.net.g) -> a
    void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelConnected
    void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent) -> channelIdle
    void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelInterestChanged
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelDisconnected
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelBound
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelOpen
    void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelUnbound
    void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent) -> childChannelClosed
    void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent) -> childChannelOpen
com.ktpns.lib.net.b -> com.ktpns.lib.net.b:
    java.util.HashMap a -> a
    java.lang.Object a(java.lang.String) -> a
com.ktpns.lib.net.c -> com.ktpns.lib.net.c:
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
com.ktpns.lib.net.d -> com.ktpns.lib.net.d:
    byte[] a -> a
com.ktpns.lib.net.data.AdaptKeepAliveRequest -> com.ktpns.lib.net.data.AdaptKeepAliveRequest:
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
com.ktpns.lib.net.data.AdaptiveKeepAliveRequest -> com.ktpns.lib.net.data.AdaptiveKeepAliveRequest:
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
com.ktpns.lib.net.data.AdaptiveKeepAliveResponse -> com.ktpns.lib.net.data.AdaptiveKeepAliveResponse:
    int mKeepAliveInterval -> mKeepAliveInterval
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    int getKeepAliveInterval() -> getKeepAliveInterval
    boolean isDevEnvInfoRequested() -> isDevEnvInfoRequested
    int getTokenExpireTime() -> getTokenExpireTime
    boolean isReTokenAllocRequested() -> isReTokenAllocRequested
    java.lang.String getDevEnvInfoFlags() -> getDevEnvInfoFlags
com.ktpns.lib.net.data.AdaptivePushRequest -> com.ktpns.lib.net.data.AdaptivePushRequest:
    int PUSH_TYPE_NORMAL -> PUSH_TYPE_NORMAL
    int PUSH_TYPE_KT_NOTICE -> PUSH_TYPE_KT_NOTICE
    int PUSH_TYPE_NSRM -> PUSH_TYPE_NSRM
    long receiveDate -> receiveDate
    long deliveryDate -> deliveryDate
    java.lang.String clientId -> clientId
    int status -> status
    java.lang.String packageName -> packageName
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    long getReceiveDate() -> getReceiveDate
    void setReceiveDate(long) -> setReceiveDate
    long getDeliveryDate() -> getDeliveryDate
    void setDeliveryDate(long) -> setDeliveryDate
    java.lang.String getClientId() -> getClientId
    void setClientId(java.lang.String) -> setClientId
    int getStatus() -> getStatus
    void setStatus(int) -> setStatus
    boolean isNeedAck() -> isNeedAck
    int getPushType() -> getPushType
    java.lang.String getPackageName() -> getPackageName
    void setPackageName(java.lang.String) -> setPackageName
    java.lang.String getPushMsgID() -> getPushMsgID
    void setPushMsgID(java.lang.String) -> setPushMsgID
    java.lang.String printExtentionPayload(byte[]) -> printExtentionPayload
    java.lang.String extractPushMsgId(byte[]) -> extractPushMsgId
com.ktpns.lib.net.data.AdaptiveTokenAllocationRequest -> com.ktpns.lib.net.data.AdaptiveTokenAllocationRequest:
    byte[] mCpId -> mCpId
    byte[] mPkgName -> mPkgName
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
com.ktpns.lib.net.data.AdaptiveTokenAllocationResponse -> com.ktpns.lib.net.data.AdaptiveTokenAllocationResponse:
    java.lang.String mPackageName -> mPackageName
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    java.lang.String getPackageName() -> getPackageName
com.ktpns.lib.net.data.GCMPushData -> com.ktpns.lib.net.data.GCMPushData:
    int PUSH_TYPE_NORMAL -> PUSH_TYPE_NORMAL
    int PUSH_TYPE_KT_NOTICE -> PUSH_TYPE_KT_NOTICE
    int PUSH_TYPE_NSRM -> PUSH_TYPE_NSRM
    long receiveDate -> receiveDate
    long deliveryDate -> deliveryDate
    java.lang.String clientId -> clientId
    int status -> status
    java.lang.String packageName -> packageName
    java.lang.String mPushMsgID -> mPushMsgID
    java.lang.String mAppID -> mAppID
    short mTransactionId -> mTransactionId
    java.lang.String mType -> mType
    java.lang.String mPayload -> mPayload
    long getReceiveDate() -> getReceiveDate
    void setReceiveDate(long) -> setReceiveDate
    long getDeliveryDate() -> getDeliveryDate
    void setDeliveryDate(long) -> setDeliveryDate
    java.lang.String getClientId() -> getClientId
    void setClientId(java.lang.String) -> setClientId
    int getStatus() -> getStatus
    void setStatus(int) -> setStatus
    boolean isNeedAck() -> isNeedAck
    int getPushType() -> getPushType
    java.lang.String getAppId() -> getAppId
    java.lang.String getPackageName() -> getPackageName
    void setPackageName(java.lang.String) -> setPackageName
    java.lang.String getPushMsgID() -> getPushMsgID
    void setPushMsgID(java.lang.String) -> setPushMsgID
    short getTransactionId() -> getTransactionId
    void setTransactionId(short) -> setTransactionId
    java.lang.String getPayloadStr() -> getPayloadStr
    void setPayloadStr(java.lang.String) -> setPayloadStr
    java.lang.String toString() -> toString
com.ktpns.lib.net.data.KeepAliveRequest -> com.ktpns.lib.net.data.KeepAliveRequest:
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
com.ktpns.lib.net.data.KeepAliveResponse -> com.ktpns.lib.net.data.KeepAliveResponse:
    int mKeepAliveInterval -> mKeepAliveInterval
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    int getKeepAliveInterval() -> getKeepAliveInterval
com.ktpns.lib.net.data.Payload -> com.ktpns.lib.net.data.Payload:
    java.lang.String KEY_AUTH_TYPE -> KEY_AUTH_TYPE
    java.lang.String KEY_USER_ID -> KEY_USER_ID
    java.lang.String KEY_NET_TYPE -> KEY_NET_TYPE
    java.lang.String KEY_REGI_COUNT -> KEY_REGI_COUNT
    java.lang.String KEY_OS -> KEY_OS
    java.lang.String KEY_OS_VER -> KEY_OS_VER
    java.lang.String KEY_MODEL -> KEY_MODEL
    java.lang.String KEY_KAM -> KEY_KAM
    java.lang.String KEY_PUSH_CLIENT_ID -> KEY_PUSH_CLIENT_ID
    java.lang.String KEY_PUSH_CLIENT_VER -> KEY_PUSH_CLIENT_VER
    java.lang.String KEY_WWW_AUTHENTICATE -> KEY_WWW_AUTHENTICATE
    java.lang.String KEY_AUTHORIZATION -> KEY_AUTHORIZATION
    java.lang.String KEY_KEEP_ALIVE_INTERVAL -> KEY_KEEP_ALIVE_INTERVAL
    java.lang.String KEY_PUSH_CLIENT_UPDATE -> KEY_PUSH_CLIENT_UPDATE
    java.lang.String KEY_PUSH_CLIENT_LAST_VER -> KEY_PUSH_CLIENT_LAST_VER
    java.lang.String KEY_GCM_TOKEN -> KEY_GCM_TOKEN
    java.lang.String KEY_GCM_AUTHKEY -> KEY_GCM_AUTHKEY
    java.lang.String KEY_IS_DEVICEIDLE -> KEY_IS_DEVICEIDLE
    java.lang.String KEY_ISDOZEPERMIT -> KEY_ISDOZEPERMIT
    java.lang.String AUTH_DIGEST_ALGORITHM -> AUTH_DIGEST_ALGORITHM
    java.lang.String AUTH_USERNAME -> AUTH_USERNAME
    java.lang.String AUTH_REALM -> AUTH_REALM
    java.lang.String AUTH_NONCE -> AUTH_NONCE
    java.lang.String AUTH_URI -> AUTH_URI
    java.lang.String AUTH_RESPONSE -> AUTH_RESPONSE
    java.lang.String ITEM_DIV -> ITEM_DIV
    java.lang.String KEY_VALUE_DIV -> KEY_VALUE_DIV
    java.lang.String KEY_VALUE_DIV_ADAPTIVE -> KEY_VALUE_DIV_ADAPTIVE
    java.lang.String QUOTE -> QUOTE
    java.lang.String OS_ANDROID -> OS_ANDROID
    java.lang.String Auth_VALUE_URI -> Auth_VALUE_URI
    java.util.Map mPayload -> mPayload
    byte[] mRawPayload -> mRawPayload
    java.lang.String mPayloadString -> mPayloadString
    void put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.String) -> get
    byte[] generateRawBytes() -> generateRawBytes
    java.lang.String toString() -> toString
    void setBytes(byte[]) -> setBytes
    byte[] getBytes() -> getBytes
    java.lang.String getString() -> getString
    com.ktpns.lib.net.data.PushData$PushValidity isValid(short) -> isValid
com.ktpns.lib.net.data.Payload$AuthInfo -> com.ktpns.lib.net.data.Payload$AuthInfo:
    java.lang.String USIM -> USIM
    java.lang.String WEB -> WEB
    java.lang.String SMS -> SMS
    java.lang.String IMEI -> IMEI
    java.lang.String MAC -> MAC
    java.lang.String NONE -> NONE
    java.lang.String mUserId -> mUserId
    java.lang.String mAuthType -> mAuthType
    java.lang.String mNetType -> mNetType
    java.lang.String getAuthType() -> getAuthType
    java.lang.String getUserId() -> getUserId
    java.lang.String getNetType() -> getNetType
com.ktpns.lib.net.data.Payload$NetType -> com.ktpns.lib.net.data.Payload$NetType:
    java.lang.String TYPE_3G -> TYPE_3G
    java.lang.String TYPE_3G_OB -> TYPE_3G_OB
    java.lang.String TYPE_WIFI -> TYPE_WIFI
com.ktpns.lib.net.data.PushData -> com.ktpns.lib.net.data.PushData:
    short DELIMITER -> DELIMITER
    byte VERSION -> VERSION
    byte DEFAULT_QOS -> DEFAULT_QOS
    com.ktpns.lib.net.data.ResponseData$ReturnCode mReturnCode -> mReturnCode
    short mDelimiter -> mDelimiter
    byte mHeader -> mHeader
    com.ktpns.lib.net.data.PushData$Type mType -> mType
    byte mOperatorID -> mOperatorID
    short mTransactionId -> mTransactionId
    int mMessageLength -> mMessageLength
    byte[] mPushClientID -> mPushClientID
    byte[] mApplicationId -> mApplicationId
    short mPayloadLength -> mPayloadLength
    com.ktpns.lib.net.data.Payload mPayload -> mPayload
    java.lang.String mExtentionPayload -> mExtentionPayload
    java.lang.String mPushMsgID -> mPushMsgID
    byte[] mRawData -> mRawData
    android.content.Context mContext -> mContext
    int minimumLength -> minimumLength
    long mTimeMillis -> mTimeMillis
    int[] $SWITCH_TABLE$com$ktpns$lib$net$data$PushData$Type -> $SWITCH_TABLE$com$ktpns$lib$net$data$PushData$Type
    com.ktpns.lib.net.data.Payload getPayload() -> getPayload
    java.lang.String getExtentionPayload() -> getExtentionPayload
    java.lang.String getPayloadStr() -> getPayloadStr
    byte[] getRawPayload() -> getRawPayload
    byte[] getBytes() -> getBytes
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    byte getVersion() -> getVersion
    com.ktpns.lib.net.data.PushData fromBlob(android.content.Context,byte[],long) -> fromBlob
    long getTimeMillis() -> getTimeMillis
    void setTimeMillis(long) -> setTimeMillis
    boolean isValidClientId() -> isValidClientId
    com.ktpns.lib.net.data.PushData$Type getType() -> getType
    java.lang.String getAppId() -> getAppId
    short getTransactionId() -> getTransactionId
    byte[][] parsingMessage(byte[],int[]) -> parsingMessage
    byte[][] parsingMessageExtentionPayload(byte[],int[]) -> parsingMessageExtentionPayload
    int[] $SWITCH_TABLE$com$ktpns$lib$net$data$PushData$Type() -> $SWITCH_TABLE$com$ktpns$lib$net$data$PushData$Type
com.ktpns.lib.net.data.PushData$PushValidity -> com.ktpns.lib.net.data.PushData$PushValidity:
    com.ktpns.lib.net.data.PushData$PushValidity VALID -> VALID
    com.ktpns.lib.net.data.PushData$PushValidity RAW_DATA_IS_NULL -> RAW_DATA_IS_NULL
    com.ktpns.lib.net.data.PushData$PushValidity RAW_DATA_LENGTH_IS_SHORT -> RAW_DATA_LENGTH_IS_SHORT
    com.ktpns.lib.net.data.PushData$PushValidity INVALID_DELIMITER -> INVALID_DELIMITER
    com.ktpns.lib.net.data.PushData$PushValidity PROTOCOL_VERSION_MISMATCH -> PROTOCOL_VERSION_MISMATCH
    com.ktpns.lib.net.data.PushData$PushValidity UNKNOWN_TYPE -> UNKNOWN_TYPE
    com.ktpns.lib.net.data.PushData$PushValidity MESSAGE_LENGTH_IS_ZERO -> MESSAGE_LENGTH_IS_ZERO
    com.ktpns.lib.net.data.PushData$PushValidity PAYLOAD_IS_NULL -> PAYLOAD_IS_NULL
    com.ktpns.lib.net.data.PushData$PushValidity PAYLOAD_RAW_BYTES_IS_NULL -> PAYLOAD_RAW_BYTES_IS_NULL
    com.ktpns.lib.net.data.PushData$PushValidity PAYLOAD_STRING_NULL -> PAYLOAD_STRING_NULL
    com.ktpns.lib.net.data.PushData$PushValidity PAYLOAD_LENGTH_MISMATCH -> PAYLOAD_LENGTH_MISMATCH
    com.ktpns.lib.net.data.PushData$PushValidity UNKNOWN -> UNKNOWN
    com.ktpns.lib.net.data.PushData$PushValidity PUSH_CLIENT_ID_INVALID -> PUSH_CLIENT_ID_INVALID
    com.ktpns.lib.net.data.PushData$PushValidity PAYLOAD_PARSE_ERROR -> PAYLOAD_PARSE_ERROR
    com.ktpns.lib.net.data.PushData$PushValidity RETURN_CODE_FAILED -> RETURN_CODE_FAILED
    java.lang.String msg -> msg
    com.ktpns.lib.net.data.PushData$PushValidity[] ENUM$VALUES -> ENUM$VALUES
    java.lang.String getMessage() -> getMessage
    com.ktpns.lib.net.data.PushData$PushValidity setMessage(java.lang.String) -> setMessage
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity[] values() -> values
    com.ktpns.lib.net.data.PushData$PushValidity valueOf(java.lang.String) -> valueOf
com.ktpns.lib.net.data.PushData$Type -> com.ktpns.lib.net.data.PushData$Type:
    com.ktpns.lib.net.data.PushData$Type PUSH_REQUEST -> PUSH_REQUEST
    com.ktpns.lib.net.data.PushData$Type PUSH_RESPONSE -> PUSH_RESPONSE
    com.ktpns.lib.net.data.PushData$Type ADAPTIVE_PUSH_REQUEST -> ADAPTIVE_PUSH_REQUEST
    com.ktpns.lib.net.data.PushData$Type PUSH_ACK -> PUSH_ACK
    com.ktpns.lib.net.data.PushData$Type REGISTER_REQUEST -> REGISTER_REQUEST
    com.ktpns.lib.net.data.PushData$Type REGISTER_RESPONSE -> REGISTER_RESPONSE
    com.ktpns.lib.net.data.PushData$Type TOKEN_ALLOCATION_REQUEST -> TOKEN_ALLOCATION_REQUEST
    com.ktpns.lib.net.data.PushData$Type TOKEN_ALLOCATION_RESPONSE -> TOKEN_ALLOCATION_RESPONSE
    com.ktpns.lib.net.data.PushData$Type ADAPTIVE_TOKEN_ALLOCATION_REQUEST -> ADAPTIVE_TOKEN_ALLOCATION_REQUEST
    com.ktpns.lib.net.data.PushData$Type ADAPTIVE_TOKEN_ALLOCATION_RESPONSE -> ADAPTIVE_TOKEN_ALLOCATION_RESPONSE
    com.ktpns.lib.net.data.PushData$Type KEEP_ALIVE_REQUEST -> KEEP_ALIVE_REQUEST
    com.ktpns.lib.net.data.PushData$Type KEEP_ALIVE_RESPONSE -> KEEP_ALIVE_RESPONSE
    com.ktpns.lib.net.data.PushData$Type ADAPTIVE_KEEP_ALIVE_REQUEST -> ADAPTIVE_KEEP_ALIVE_REQUEST
    com.ktpns.lib.net.data.PushData$Type ADAPTIVE_KEEP_ALIVE_RESPONSE -> ADAPTIVE_KEEP_ALIVE_RESPONSE
    com.ktpns.lib.net.data.PushData$Type PUSH_INFO_REQUEST -> PUSH_INFO_REQUEST
    com.ktpns.lib.net.data.PushData$Type PUSH_INFO_RESPONSE -> PUSH_INFO_RESPONSE
    com.ktpns.lib.net.data.PushData$Type UNKNOWN -> UNKNOWN
    byte value -> value
    com.ktpns.lib.net.data.PushData$Type[] ENUM$VALUES -> ENUM$VALUES
    com.ktpns.lib.net.data.PushData$Type fromByte(byte) -> fromByte
    byte value() -> value
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$Type[] values() -> values
    com.ktpns.lib.net.data.PushData$Type valueOf(java.lang.String) -> valueOf
com.ktpns.lib.net.data.PushInfoRequest -> com.ktpns.lib.net.data.PushInfoRequest:
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
com.ktpns.lib.net.data.PushInfoResponse -> com.ktpns.lib.net.data.PushInfoResponse:
    long ALIVE_INTERVAL -> ALIVE_INTERVAL
    java.util.concurrent.LinkedBlockingQueue mPushInfoList -> mPushInfoList
    java.util.concurrent.LinkedBlockingQueue mPushInfoListForTLS -> mPushInfoListForTLS
    void parsePushInfo(java.lang.String) -> parsePushInfo
    java.lang.String toString() -> toString
    java.lang.String printPushInfoList(java.util.concurrent.LinkedBlockingQueue) -> printPushInfoList
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    boolean isExpired() -> isExpired
    java.util.concurrent.LinkedBlockingQueue getPushInfoList() -> getPushInfoList
    java.util.concurrent.LinkedBlockingQueue getPushInfoListForTLS() -> getPushInfoListForTLS
com.ktpns.lib.net.data.PushInfoResponse$PushInfo -> com.ktpns.lib.net.data.PushInfoResponse$PushInfo:
    java.lang.String connect -> connect
    java.lang.String ver -> ver
    java.lang.String ip -> ip
    java.lang.String port -> port
    java.lang.String getKey(java.lang.String) -> getKey
    java.lang.String getValue(java.lang.String) -> getValue
    java.lang.String toString() -> toString
com.ktpns.lib.net.data.PushRequest -> com.ktpns.lib.net.data.PushRequest:
    int PUSH_TYPE_NORMAL -> PUSH_TYPE_NORMAL
    int PUSH_TYPE_KT_NOTICE -> PUSH_TYPE_KT_NOTICE
    int PUSH_TYPE_NSRM -> PUSH_TYPE_NSRM
    long receiveDate -> receiveDate
    long deliveryDate -> deliveryDate
    java.lang.String clientId -> clientId
    int status -> status
    java.lang.String packageName -> packageName
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    long getReceiveDate() -> getReceiveDate
    void setReceiveDate(long) -> setReceiveDate
    long getDeliveryDate() -> getDeliveryDate
    void setDeliveryDate(long) -> setDeliveryDate
    java.lang.String getClientId() -> getClientId
    void setClientId(java.lang.String) -> setClientId
    int getStatus() -> getStatus
    void setStatus(int) -> setStatus
    boolean isNeedAck() -> isNeedAck
    int getPushType() -> getPushType
    java.lang.String getPackageName() -> getPackageName
    void setPackageName(java.lang.String) -> setPackageName
com.ktpns.lib.net.data.PushResponse -> com.ktpns.lib.net.data.PushResponse:
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
com.ktpns.lib.net.data.RegisterRequest -> com.ktpns.lib.net.data.RegisterRequest:
    java.lang.String FIRST -> FIRST
    java.lang.String SECOND -> SECOND
    java.lang.String IS_IDLE -> IS_IDLE
    java.lang.String IS_NOT_IDLE -> IS_NOT_IDLE
    java.lang.String mRegiCount -> mRegiCount
    com.ktpns.lib.net.data.Payload$AuthInfo mAuthInfo -> mAuthInfo
    void init(android.content.Context,java.lang.String,java.lang.String) -> init
    com.ktpns.lib.net.data.Payload createPayload(android.content.Context,java.lang.String,java.lang.String) -> createPayload
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
com.ktpns.lib.net.data.RegisterResponse -> com.ktpns.lib.net.data.RegisterResponse:
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    java.lang.String getKeepAliveInterval() -> getKeepAliveInterval
com.ktpns.lib.net.data.RequestData -> com.ktpns.lib.net.data.RequestData:
    short mTransactionIdOriginator -> mTransactionIdOriginator
    java.lang.Object obj -> obj
    short getNextTransactionID() -> getNextTransactionID
com.ktpns.lib.net.data.ResponseData -> com.ktpns.lib.net.data.ResponseData:
    com.ktpns.lib.net.data.ResponseData$ReturnCode getReturnCode(short) -> getReturnCode
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    com.ktpns.lib.net.data.ResponseData$ReturnCode getReturnCode() -> getReturnCode
    void setReturnCode(com.ktpns.lib.net.data.ResponseData$ReturnCode) -> setReturnCode
com.ktpns.lib.net.data.ResponseData$ReturnCode -> com.ktpns.lib.net.data.ResponseData$ReturnCode:
    com.ktpns.lib.net.data.ResponseData$ReturnCode SUCCESS -> SUCCESS
    com.ktpns.lib.net.data.ResponseData$ReturnCode NOT_SUPPORTED_VERSION -> NOT_SUPPORTED_VERSION
    com.ktpns.lib.net.data.ResponseData$ReturnCode NOT_SUPPORTED_QOS -> NOT_SUPPORTED_QOS
    com.ktpns.lib.net.data.ResponseData$ReturnCode TRANSACTION_ID_PARSING_ERROR -> TRANSACTION_ID_PARSING_ERROR
    com.ktpns.lib.net.data.ResponseData$ReturnCode AOC_ID_PARSING_ERROR -> AOC_ID_PARSING_ERROR
    com.ktpns.lib.net.data.ResponseData$ReturnCode APPLICATION_ID_PARSING_ERROR -> APPLICATION_ID_PARSING_ERROR
    com.ktpns.lib.net.data.ResponseData$ReturnCode PAYLOAD_LENGTH_PARSING_ERROR -> PAYLOAD_LENGTH_PARSING_ERROR
    com.ktpns.lib.net.data.ResponseData$ReturnCode PAYLOAD_PARSING_ERROR -> PAYLOAD_PARSING_ERROR
    com.ktpns.lib.net.data.ResponseData$ReturnCode PL_LEN_FIELD_VALUE_NOT_MATCHED_THE_LENGTH_OF_THE_PAYLOAD -> PL_LEN_FIELD_VALUE_NOT_MATCHED_THE_LENGTH_OF_THE_PAYLOAD
    com.ktpns.lib.net.data.ResponseData$ReturnCode LIST_LEN_FIELD_VALUE_NOT_MATCHED_THE_LENGTH_OF_THE_APPLICATION -> LIST_LEN_FIELD_VALUE_NOT_MATCHED_THE_LENGTH_OF_THE_APPLICATION
    com.ktpns.lib.net.data.ResponseData$ReturnCode LIST_LEN_VALUE_IS_NOT_MULTIPLE_OF_THE_LENGTH_OF_THE_APPLICATION -> LIST_LEN_VALUE_IS_NOT_MULTIPLE_OF_THE_LENGTH_OF_THE_APPLICATION
    com.ktpns.lib.net.data.ResponseData$ReturnCode SERVICE_UNAVAILABLE -> SERVICE_UNAVAILABLE
    com.ktpns.lib.net.data.ResponseData$ReturnCode AOC_ID_NOT_MATCH -> AOC_ID_NOT_MATCH
    com.ktpns.lib.net.data.ResponseData$ReturnCode NOT_EXIST_APPLICATION -> NOT_EXIST_APPLICATION
    com.ktpns.lib.net.data.ResponseData$ReturnCode NOT_FOUND_PUSH_CLIENT_ID -> NOT_FOUND_PUSH_CLIENT_ID
    com.ktpns.lib.net.data.ResponseData$ReturnCode NOT_FOUND_AOMC_CONNECTION -> NOT_FOUND_AOMC_CONNECTION
    com.ktpns.lib.net.data.ResponseData$ReturnCode TIMEOUT -> TIMEOUT
    com.ktpns.lib.net.data.ResponseData$ReturnCode PUSH_RECEPTION_STATUS_OFF -> PUSH_RECEPTION_STATUS_OFF
    com.ktpns.lib.net.data.ResponseData$ReturnCode SESSION_CLOSED -> SESSION_CLOSED
    com.ktpns.lib.net.data.ResponseData$ReturnCode RE_REG_EXCEPTION -> RE_REG_EXCEPTION
    com.ktpns.lib.net.data.ResponseData$ReturnCode REG_RESPONSE_401_UNAUTHORIZED -> REG_RESPONSE_401_UNAUTHORIZED
    com.ktpns.lib.net.data.ResponseData$ReturnCode REG_RESPONSE_403 -> REG_RESPONSE_403
    com.ktpns.lib.net.data.ResponseData$ReturnCode PERMANENT_ERROR -> PERMANENT_ERROR
    com.ktpns.lib.net.data.ResponseData$ReturnCode TEMPORARY_ERROR -> TEMPORARY_ERROR
    com.ktpns.lib.net.data.ResponseData$ReturnCode REG_RESPONSE_UNKNOWN -> REG_RESPONSE_UNKNOWN
    byte code -> code
    com.ktpns.lib.net.data.ResponseData$ReturnCode[] ENUM$VALUES -> ENUM$VALUES
    byte getCode() -> getCode
    com.ktpns.lib.net.data.ResponseData$ReturnCode fromByte(byte) -> fromByte
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.ResponseData$ReturnCode[] values() -> values
    com.ktpns.lib.net.data.ResponseData$ReturnCode valueOf(java.lang.String) -> valueOf
com.ktpns.lib.net.data.TLV -> com.ktpns.lib.net.data.TLV:
    int TAG_TOPLEVEL -> TAG_TOPLEVEL
    byte[] mValue -> mValue
    int mIndex -> mIndex
    int mLength -> mLength
    int mTag -> mTag
    java.util.List mChildren -> mChildren
    int getTag() -> getTag
    byte[] getValue() -> getValue
    java.util.List getChildren() -> getChildren
    boolean isConstructed() -> isConstructed
    void parse() -> parse
    int getLength() -> getLength
    int getNext(int) -> getNext
    int getFirstTagByte(int) -> getFirstTagByte
    boolean tagHasMultipleBytes(int) -> tagHasMultipleBytes
    boolean tagHasAnotherByte(int) -> tagHasAnotherByte
com.ktpns.lib.net.data.TLV$TLVException -> com.ktpns.lib.net.data.TLV$TLVException:
    long serialVersionUID -> serialVersionUID
    com.ktpns.lib.net.data.TLV this$0 -> this$0
com.ktpns.lib.net.data.TokenAllocationRequest -> com.ktpns.lib.net.data.TokenAllocationRequest:
    int OPERATOR_NONE -> OPERATOR_NONE
    int OPERATOR_SKT -> OPERATOR_SKT
    int OPERATOR_KT -> OPERATOR_KT
    int OPERATOR_LGT -> OPERATOR_LGT
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
com.ktpns.lib.net.data.TokenAllocationResponse -> com.ktpns.lib.net.data.TokenAllocationResponse:
    java.lang.String NETWORK_ERROR -> NETWORK_ERROR
    java.lang.String SERVER_ERROR -> SERVER_ERROR
    java.lang.String NOT_SUPPORTED_CONDITION -> NOT_SUPPORTED_CONDITION
    java.lang.String STATUS_OF_PUSH_CLIENT_IS_DISABLED -> STATUS_OF_PUSH_CLIENT_IS_DISABLED
    java.lang.String FAIL_TO_CREATE_TOKEN -> FAIL_TO_CREATE_TOKEN
    java.lang.String CONFIGURE_ERROR -> CONFIGURE_ERROR
    java.lang.String INTERNAL_ERROR -> INTERNAL_ERROR
    java.lang.String mToken -> mToken
    int[] $SWITCH_TABLE$com$ktpns$lib$net$data$ResponseData$ReturnCode -> $SWITCH_TABLE$com$ktpns$lib$net$data$ResponseData$ReturnCode
    java.lang.String toString() -> toString
    com.ktpns.lib.net.data.PushData$PushValidity checkValidity() -> checkValidity
    java.lang.String getToken() -> getToken
    java.lang.String getErrorString() -> getErrorString
    int[] $SWITCH_TABLE$com$ktpns$lib$net$data$ResponseData$ReturnCode() -> $SWITCH_TABLE$com$ktpns$lib$net$data$ResponseData$ReturnCode
com.ktpns.lib.net.e -> com.ktpns.lib.net.e:
    java.lang.String a -> a
    java.lang.String b -> b
    android.content.Context c -> c
    com.ktpns.lib.net.data.AdaptivePushRequest d -> d
    void run() -> run
com.ktpns.lib.net.f -> com.ktpns.lib.net.f:
    java.lang.String a -> a
    java.lang.String b -> b
    android.content.Context c -> c
    com.ktpns.lib.net.data.PushRequest d -> d
    void run() -> run
com.ktpns.lib.net.g -> com.ktpns.lib.net.g:
    org.jboss.netty.channel.Channel a -> a
    org.jboss.netty.channel.Channel a() -> a
    java.net.SocketAddress b() -> b
com.ktpns.lib.net.h -> com.ktpns.lib.net.h:
    org.jboss.netty.channel.group.ChannelGroup a -> a
    java.lang.Object b -> b
    com.ktpns.lib.net.h c -> c
    org.jboss.netty.channel.Channel d -> d
    com.ktpns.lib.c.e e -> e
    org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory f -> f
    org.jboss.netty.bootstrap.ClientBootstrap g -> g
    com.ktpns.lib.net.h a() -> a
    com.ktpns.lib.c.e b() -> b
    void a(com.ktpns.lib.c.e) -> a
    void a(org.jboss.netty.channel.Channel) -> a
    void c() -> c
    org.jboss.netty.channel.Channel d() -> d
    boolean e() -> e
    boolean a(byte[]) -> a
    void a(android.content.Context,java.lang.String,int,org.jboss.netty.channel.ChannelFutureListener) -> a
    void f() -> f
com.ktpns.lib.net.h$a -> com.ktpns.lib.net.h$a:
    com.ktpns.lib.net.h a -> a
com.ktpns.lib.net.i -> com.ktpns.lib.net.i:
    org.jboss.netty.util.Timer a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
com.ktpns.lib.net.j -> com.ktpns.lib.net.j:
    javax.net.ssl.SSLContext a -> a
    javax.net.ssl.SSLContext a() -> a
com.ktpns.lib.net.k -> com.ktpns.lib.net.k:
    javax.net.ssl.TrustManager a -> a
    javax.net.ssl.TrustManager[] a() -> a
    javax.net.ssl.TrustManager[] engineGetTrustManagers() -> engineGetTrustManagers
    void engineInit(java.security.KeyStore) -> engineInit
    void engineInit(javax.net.ssl.ManagerFactoryParameters) -> engineInit
com.ktpns.lib.net.l -> com.ktpns.lib.net.l:
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
com.ktpns.lib.nsrm.NsrmApi -> com.ktpns.lib.nsrm.NsrmApi:
    void requestRegister(android.content.Context) -> requestRegister
    void debugNsrmApi(android.content.Context) -> debugNsrmApi
    void requestAck(android.content.Context) -> requestAck
    void requestSetService(android.content.Context,boolean) -> requestSetService
    java.lang.String getPolicyPref(android.content.Context) -> getPolicyPref
    java.lang.String getPolicyJson(android.content.Context) -> getPolicyJson
    void processNsrmPush(android.content.Context,com.ktpns.lib.net.data.PushRequest) -> processNsrmPush
    void processNsrmAdaptivePush(android.content.Context,com.ktpns.lib.net.data.AdaptivePushRequest) -> processNsrmAdaptivePush
    void processNsrmAdaptivePush(android.content.Context,com.ktpns.lib.net.data.GCMPushData) -> processNsrmAdaptivePush
    java.lang.Float getPolicyVer(android.content.Context) -> getPolicyVer
    boolean getNsrmEnabled(android.content.Context) -> getNsrmEnabled
    boolean updatePolicy(android.content.Context,java.lang.String) -> updatePolicy
com.ktpns.lib.nsrm.NsrmBroadCastReceiver -> com.ktpns.lib.nsrm.NsrmBroadCastReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.ktpns.lib.nsrm.NsrmService -> com.ktpns.lib.nsrm.NsrmService:
    java.lang.String PHONENUMBER -> PHONENUMBER
    int LOGGER_LEVEL -> LOGGER_LEVEL
    boolean ERROR_CODE -> ERROR_CODE
    int RESULT_SUCCESS -> RESULT_SUCCESS
    int RESULT_FAIL -> RESULT_FAIL
    android.os.Handler mResponseHandler -> mResponseHandler
    void onCreate() -> onCreate
    void setPhoneNumber(java.lang.String) -> setPhoneNumber
    android.os.IBinder onBind(android.content.Intent) -> onBind
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void requestRegisterKpod(android.content.Context) -> requestRegisterKpod
    void downloadPolicy(android.content.Context) -> downloadPolicy
    void requestSetServiceKPOD(android.content.Context) -> requestSetServiceKPOD
    void requestAck(android.content.Context) -> requestAck
    void makeFile(android.content.Context,java.lang.String,android.os.Message) -> makeFile
    java.util.ArrayList getPolicyListFromJson(java.lang.String) -> getPolicyListFromJson
    com.ktpns.lib.nsrm.http.KPODPolicyJSON getPolicyResponseResultFromJson(java.lang.String) -> getPolicyResponseResultFromJson
    boolean isRertyConnect(com.ktpns.lib.nsrm.http.KPODPolicyJSON) -> isRertyConnect
    void setAlarmManager(android.content.Context) -> setAlarmManager
    void actionAfterRegister(android.content.Context,android.os.Message,java.lang.String) -> actionAfterRegister
    void cancelAlarmManage(android.content.Context) -> cancelAlarmManage
    void debugMessage(android.content.Context,java.lang.String) -> debugMessage
    void onDestroy() -> onDestroy
    void access$0(com.ktpns.lib.nsrm.NsrmService,android.content.Context,java.lang.String) -> access$0
    void access$1(com.ktpns.lib.nsrm.NsrmService,android.content.Context) -> access$1
    com.ktpns.lib.nsrm.http.KPODPolicyJSON access$2(com.ktpns.lib.nsrm.NsrmService,java.lang.String) -> access$2
    boolean access$3(com.ktpns.lib.nsrm.NsrmService,com.ktpns.lib.nsrm.http.KPODPolicyJSON) -> access$3
    void access$4(com.ktpns.lib.nsrm.NsrmService,android.content.Context,android.os.Message,java.lang.String) -> access$4
    void access$5(com.ktpns.lib.nsrm.NsrmService,android.content.Context) -> access$5
    void access$6(com.ktpns.lib.nsrm.NsrmService,android.content.Context,java.lang.String,android.os.Message) -> access$6
com.ktpns.lib.nsrm.a -> com.ktpns.lib.nsrm.a:
    void a(com.ktpns.lib.nsrm.http.a) -> a
com.ktpns.lib.nsrm.b -> com.ktpns.lib.nsrm.b:
    com.ktpns.lib.nsrm.NsrmService a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ktpns.lib.nsrm.c -> com.ktpns.lib.nsrm.c:
    com.ktpns.lib.nsrm.NsrmService a -> a
    void a(com.ktpns.lib.nsrm.http.a) -> a
com.ktpns.lib.nsrm.d -> com.ktpns.lib.nsrm.d:
    com.ktpns.lib.nsrm.NsrmService a -> a
    void a(com.ktpns.lib.nsrm.http.a) -> a
com.ktpns.lib.nsrm.data.NsrmConstant -> com.ktpns.lib.nsrm.data.NsrmConstant:
com.ktpns.lib.nsrm.data.a -> com.ktpns.lib.nsrm.data.a:
    android.content.Context a -> a
    com.ktpns.lib.nsrm.data.a$b b -> b
    com.ktpns.lib.nsrm.data.a$a c -> c
com.ktpns.lib.nsrm.data.a$a -> com.ktpns.lib.nsrm.data.a$a:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
com.ktpns.lib.nsrm.data.a$b -> com.ktpns.lib.nsrm.data.a$b:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
com.ktpns.lib.nsrm.data.b -> com.ktpns.lib.nsrm.data.b:
    void a(com.ktpns.lib.net.data.PushRequest) -> a
    void a(com.ktpns.lib.net.data.AdaptivePushRequest) -> a
    void a(com.ktpns.lib.net.data.GCMPushData) -> a
    void a() -> a
    void a(java.lang.String) -> a
    void b() -> b
    void c() -> c
    void d() -> d
    java.lang.String toString() -> toString
com.ktpns.lib.nsrm.e -> com.ktpns.lib.nsrm.e:
    com.ktpns.lib.nsrm.NsrmService a -> a
    void a(com.ktpns.lib.nsrm.http.a) -> a
com.ktpns.lib.nsrm.f -> com.ktpns.lib.nsrm.f:
    com.ktpns.lib.nsrm.NsrmService a -> a
    void a(com.ktpns.lib.nsrm.http.a) -> a
com.ktpns.lib.nsrm.g -> com.ktpns.lib.nsrm.g:
com.ktpns.lib.nsrm.h -> com.ktpns.lib.nsrm.h:
    java.lang.Thread a -> a
    com.ktpns.lib.nsrm.a b -> b
    android.content.Context c -> c
    java.lang.String d -> d
    void a(java.lang.String) -> a
    void a() -> a
    void run() -> run
com.ktpns.lib.nsrm.http.KPODHttpClient -> com.ktpns.lib.nsrm.http.KPODHttpClient:
    int HTTPS_SOCKET_TIMEOUT -> HTTPS_SOCKET_TIMEOUT
    java.lang.String KPOD_SERVER_URL -> KPOD_SERVER_URL
    int KPOD_HTTPS_SERVER_PORT -> KPOD_HTTPS_SERVER_PORT
    java.lang.String KPOD_ACK -> KPOD_ACK
    java.lang.String KPOD_REGISTER -> KPOD_REGISTER
    java.lang.String KPOD_SETSERVICE -> KPOD_SETSERVICE
    boolean ERROR_CODE -> ERROR_CODE
    java.lang.String sForceKpodIp -> sForceKpodIp
    int sForceKpodPort -> sForceKpodPort
    com.ktpns.lib.nsrm.http.a get(android.content.Context,java.lang.String) -> get
    org.apache.http.client.HttpClient getHttpClient(android.content.Context) -> getHttpClient
    void settingHeader(android.content.Context,org.apache.http.client.methods.HttpGet) -> settingHeader
    java.lang.String getApiUrl(android.content.Context,java.lang.String) -> getApiUrl
    java.lang.String getKpodIp() -> getKpodIp
    int getKpodPort() -> getKpodPort
    void setForceKpodIp(java.lang.String) -> setForceKpodIp
    void setForceKpodPort(int) -> setForceKpodPort
    java.lang.String getForceKpodIp() -> getForceKpodIp
    void removeForceKpodIp() -> removeForceKpodIp
    int getForceKpodPort() -> getForceKpodPort
    void removeForceKpodPort() -> removeForceKpodPort
    void setIlsanSetting() -> setIlsanSetting
    void removeForceKpodIlsan() -> removeForceKpodIlsan
    void debugHeaders(android.content.Context,org.apache.http.Header[]) -> debugHeaders
com.ktpns.lib.nsrm.http.KPODPolicyJSON -> com.ktpns.lib.nsrm.http.KPODPolicyJSON:
    java.lang.String code -> code
    java.lang.String msg -> msg
    com.ktpns.lib.nsrm.http.KPODPolicyJSON$a response -> response
com.ktpns.lib.nsrm.http.KPODPolicyJSON$a -> com.ktpns.lib.nsrm.http.KPODPolicyJSON$a:
    java.util.ArrayList a -> a
    java.util.ArrayList a() -> a
com.ktpns.lib.nsrm.http.a -> com.ktpns.lib.nsrm.http.a:
    java.lang.Object a -> a
    int b -> b
    java.lang.Object a() -> a
    void a(java.lang.Object) -> a
    int b() -> b
    void a(int) -> a
com.ktpns.lib.nsrm.http.b -> com.ktpns.lib.nsrm.http.b:
    int a -> a
    int a() -> a
com.ktpns.lib.nsrm.http.c -> com.ktpns.lib.nsrm.http.c:
    javax.net.ssl.SSLContext a -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.ktpns.lib.nsrm.http.d -> com.ktpns.lib.nsrm.http.d:
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
com.ktpns.lib.nsrm.i -> com.ktpns.lib.nsrm.i:
    java.lang.String toString() -> toString
com.ktpns.lib.nsrm.j -> com.ktpns.lib.nsrm.j:
com.ktpns.lib.popup.GrantedPermission -> com.ktpns.lib.popup.GrantedPermission:
    void onCreate(android.os.Bundle) -> onCreate
    void settingWidget() -> settingWidget
    java.lang.String[] setRequestPermissions() -> setRequestPermissions
    void requestPermission() -> requestPermission
    boolean getPermission(java.lang.String[],int[],java.lang.String) -> getPermission
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onBackPressed() -> onBackPressed
    void access$0(com.ktpns.lib.popup.GrantedPermission) -> access$0
com.ktpns.lib.popup.PopupActivity -> com.ktpns.lib.popup.PopupActivity:
    android.widget.ImageView mNoticeIconView -> mNoticeIconView
    android.widget.ImageView mNoticeIconBlankView -> mNoticeIconBlankView
    android.webkit.WebView mWebView -> mWebView
    android.widget.Button mOkButton -> mOkButton
    android.widget.TextView mNoticeTitleView -> mNoticeTitleView
    void onCreate(android.os.Bundle) -> onCreate
    void findView() -> findView
    void initView(android.content.Intent) -> initView
    void onPause() -> onPause
    void drawNoticeIcon(java.lang.String) -> drawNoticeIcon
    void onClick(android.view.View) -> onClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    android.widget.ImageView access$0(com.ktpns.lib.popup.PopupActivity) -> access$0
    android.widget.ImageView access$1(com.ktpns.lib.popup.PopupActivity) -> access$1
com.ktpns.lib.popup.PopupUtil -> com.ktpns.lib.popup.PopupUtil:
    void createNotification(android.content.Context,com.ktpns.lib.net.data.PushRequest,android.graphics.Bitmap,android.graphics.Bitmap) -> createNotification
    void createAdaptiveNotification(android.content.Context,com.ktpns.lib.net.data.AdaptivePushRequest,android.graphics.Bitmap,android.graphics.Bitmap) -> createAdaptiveNotification
    void createAdaptiveNotification(android.content.Context,com.ktpns.lib.net.data.GCMPushData,android.graphics.Bitmap,android.graphics.Bitmap) -> createAdaptiveNotification
    android.content.Intent createIntent(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> createIntent
com.ktpns.lib.popup.a -> com.ktpns.lib.popup.a:
    com.ktpns.lib.popup.GrantedPermission a -> a
    void onClick(android.view.View) -> onClick
com.ktpns.lib.popup.b -> com.ktpns.lib.popup.b:
    com.ktpns.lib.popup.PopupActivity a -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.ktpns.lib.popup.c -> com.ktpns.lib.popup.c:
    com.ktpns.lib.popup.PopupActivity a -> a
    java.lang.String b -> b
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.ktpns.lib.receiver.DeviceEventReceiver -> com.ktpns.lib.receiver.DeviceEventReceiver:
    android.os.Handler a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void a(android.content.Context,boolean) -> a
    void a(android.content.Context,android.content.Intent,java.lang.String) -> a
    java.lang.String a(android.content.Intent) -> a
    void a(android.content.Context) -> a
com.ktpns.lib.receiver.LocalEventReceiver -> com.ktpns.lib.receiver.LocalEventReceiver:
    int[] a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.ktpns.lib.receiver.SsomonResponseReceiver -> com.ktpns.lib.receiver.SsomonResponseReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.ktpns.lib.receiver.ThirdPartyReceiver -> com.ktpns.lib.receiver.ThirdPartyReceiver:
    java.util.HashMap a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.ktpns.lib.receiver.a -> com.ktpns.lib.receiver.a:
    void handleMessage(android.os.Message) -> handleMessage
com.ktpns.lib.receiver.b -> com.ktpns.lib.receiver.b:
    android.content.Context a -> a
    java.lang.String b -> b
    void run() -> run
com.ktpns.lib.service.KeepAliveService -> com.ktpns.lib.service.KeepAliveService:
    void onHandleIntent(android.content.Intent) -> onHandleIntent
com.ktpns.lib.service.PreVerRequestService -> com.ktpns.lib.service.PreVerRequestService:
    android.content.Context a -> a
    android.os.Looper b -> b
    com.ktpns.lib.service.PreVerRequestService$a c -> c
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    boolean a(android.content.Intent) -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean a(com.ktpns.lib.service.PreVerRequestService,android.content.Intent) -> a
    void a(com.ktpns.lib.service.PreVerRequestService,java.lang.String) -> a
com.ktpns.lib.service.PreVerRequestService$a -> com.ktpns.lib.service.PreVerRequestService$a:
    com.ktpns.lib.service.PreVerRequestService a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ktpns.lib.service.PushClientManager -> com.ktpns.lib.service.PushClientManager:
    boolean mConnectTLS -> mConnectTLS
    java.lang.String mEncUserName -> mEncUserName
    android.content.Context mContext -> mContext
    com.ktpns.lib.service.PushClientManager mPushClient -> mPushClient
    com.ktpns.lib.net.data.PushInfoResponse mPushInfoResp -> mPushInfoResp
    java.util.concurrent.LinkedBlockingQueue registerWaitingQueue -> registerWaitingQueue
    android.app.PendingIntent mPendingKeepAlive -> mPendingKeepAlive
    int mCountForRegTry -> mCountForRegTry
    android.os.PowerManager$WakeLock mWakeLock -> mWakeLock
    android.net.wifi.WifiManager$WifiLock wifiLock -> wifiLock
    java.lang.Object mLockSync -> mLockSync
    org.jboss.netty.channel.ChannelFutureListener connResultListener -> connResultListener
    com.ktpns.lib.service.PushClientManager getInstance(android.content.Context) -> getInstance
    android.content.Context a() -> a
    void a(android.content.Intent) -> a
    void b() -> b
    void j() -> j
    void c() -> c
    void d() -> d
    void k() -> k
    void a(java.lang.String) -> a
    short a(com.ktpns.lib.database.data.DataReqTokenFromApp) -> a
    void a(java.lang.String,short,com.ktpns.lib.net.data.ResponseData$ReturnCode) -> a
    void e() -> e
    void f() -> f
    boolean g() -> g
    java.util.concurrent.LinkedBlockingQueue l() -> l
    void h() -> h
    void a(com.ktpns.lib.net.data.PushInfoResponse) -> a
    void a(java.lang.String,java.lang.String) -> a
    void a(android.app.PendingIntent) -> a
    com.ktpns.lib.net.data.PushInfoResponse getPushInfoResponse() -> getPushInfoResponse
    void a(com.ktpns.lib.net.data.GCMPushData) -> a
    boolean a(android.content.Context,com.ktpns.lib.net.data.GCMPushData) -> a
    boolean b(android.content.Context,com.ktpns.lib.net.data.GCMPushData) -> b
    android.content.Context i() -> i
    void a(com.ktpns.lib.service.PushClientManager) -> a
    void a(com.ktpns.lib.service.PushClientManager,java.lang.String) -> a
    com.ktpns.lib.net.data.PushInfoResponse b(com.ktpns.lib.service.PushClientManager) -> b
com.ktpns.lib.service.PushClientManager$a -> com.ktpns.lib.service.PushClientManager$a:
    com.ktpns.lib.service.PushClientManager a -> a
com.ktpns.lib.service.PushClientService -> com.ktpns.lib.service.PushClientService:
    android.content.Context a -> a
    android.os.Looper b -> b
    com.ktpns.lib.service.PushClientService$b c -> c
    com.ktpns.lib.receiver.ThirdPartyReceiver d -> d
    com.ktpns.lib.receiver.SsomonResponseReceiver e -> e
    com.ktpns.lib.receiver.LocalEventReceiver f -> f
    android.net.LocalServerSocket g -> g
    android.net.LocalServerSocket h -> h
    android.net.LocalServerSocket i -> i
    android.net.LocalServerSocket j -> j
    com.ktpns.lib.c.i k -> k
    boolean l -> l
    java.util.concurrent.LinkedBlockingQueue m -> m
    int n -> n
    com.ktpns.lib.service.PushClientService$a o -> o
    boolean p -> p
    boolean q -> q
    android.content.Intent r -> r
    void onCreate() -> onCreate
    void a() -> a
    boolean b() -> b
    void c() -> c
    boolean d() -> d
    boolean e() -> e
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void a(android.content.Intent) -> a
    void onDestroy() -> onDestroy
    void a(java.lang.String) -> a
    int a(android.content.Context) -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean a(com.ktpns.lib.service.PushClientService) -> a
    void a(com.ktpns.lib.service.PushClientService,java.lang.String) -> a
    void b(com.ktpns.lib.service.PushClientService) -> b
com.ktpns.lib.service.PushClientService$a -> com.ktpns.lib.service.PushClientService$a:
    com.ktpns.lib.service.PushClientService a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ktpns.lib.service.PushClientService$b -> com.ktpns.lib.service.PushClientService$b:
    com.ktpns.lib.service.PushClientService a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ktpns.lib.service.ServiceGateway -> com.ktpns.lib.service.ServiceGateway:
    void a(android.content.Context,java.lang.String) -> a
    void a(android.content.Context) -> a
    void b(android.content.Context) -> b
    void sendReRegister(android.content.Context) -> sendReRegister
    void sendReRegister(android.content.Context,java.lang.String) -> sendReRegister
    void a(android.content.Context,com.ktpns.lib.net.data.PushRequest) -> a
    void a(android.content.Context,com.ktpns.lib.net.data.AdaptivePushRequest) -> a
    void a(android.content.Context,com.ktpns.lib.net.data.GCMPushData) -> a
    void b(android.content.Context,com.ktpns.lib.net.data.PushRequest) -> b
    void b(android.content.Context,com.ktpns.lib.net.data.AdaptivePushRequest) -> b
    void a(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void a(android.content.Context,java.lang.String,int,byte[],boolean,short) -> a
    void a(android.content.Context,java.lang.String,int,byte[],boolean,java.lang.String) -> a
    void a(android.content.Context,java.lang.String,int) -> a
    void b(android.content.Context,java.lang.String,int) -> b
    void a(android.content.Context,com.ktpns.lib.database.data.DataReqTokenFromApp) -> a
    void a(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean a(android.content.Context,java.lang.String,java.lang.String) -> a
    void a(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> a
    void startPushClientService(android.content.Context) -> startPushClientService
    void startPushClientService(android.content.Context,android.content.Intent) -> startPushClientService
    void receivedGCMPushMessage(android.content.Context,android.content.Intent) -> receivedGCMPushMessage
    void registerGCMRegiID(android.content.Context,java.lang.String,java.lang.String) -> registerGCMRegiID
    void unregisterGCMRegiID(android.content.Context,java.lang.String) -> unregisterGCMRegiID
    void a(android.content.Context,boolean) -> a
    void a(android.content.Context,int) -> a
    void c(android.content.Context) -> c
    void a(android.content.Context,android.content.Intent,java.lang.String) -> a
com.ktpns.lib.service.a -> com.ktpns.lib.service.a:
    com.ktpns.lib.service.PushClientManager a -> a
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
com.ktpns.lib.service.b -> com.ktpns.lib.service.b:
    java.lang.String a -> a
    java.lang.String b -> b
    android.content.Context c -> c
    com.ktpns.lib.net.data.GCMPushData d -> d
    void run() -> run
com.ktpns.lib.service.c -> com.ktpns.lib.service.c:
    com.ktpns.lib.service.PushClientService a -> a
    void run() -> run
com.ktpns.lib.service.d -> com.ktpns.lib.service.d:
    android.content.Context a -> a
    java.lang.String b -> b
    void run() -> run
com.ktpns.lib.service.e -> com.ktpns.lib.service.e:
    android.content.Context a -> a
    void run() -> run
com.ktpns.lib.util.Constant -> com.ktpns.lib.util.Constant:
    int THIRD_TYPE_LIB_1X -> THIRD_TYPE_LIB_1X
    int THIRD_TYPE_NOR_1X -> THIRD_TYPE_NOR_1X
    int THIRD_TYPE_LIB_2X -> THIRD_TYPE_LIB_2X
    int THIRD_TYPE_NOR_2X -> THIRD_TYPE_NOR_2X
    java.lang.String KPNS_VERSION -> KPNS_VERSION
    java.lang.String KPNS_CLIENT_CP_ID -> KPNS_CLIENT_CP_ID
    java.lang.String KPNS_KPOD_APP_ID -> KPNS_KPOD_APP_ID
    java.lang.String KPNS_KPOD_PACKAGE_NAME -> KPNS_KPOD_PACKAGE_NAME
    java.lang.String KPNS_TOKEN_FLAG -> KPNS_TOKEN_FLAG
    int MAX_RETRY_COUNT -> MAX_RETRY_COUNT
    boolean isNeedAck -> isNeedAck
    int NOTI_IMAGE_WIDTH -> NOTI_IMAGE_WIDTH
    int NOTI_IMAGE_HEIGHT -> NOTI_IMAGE_HEIGHT
    int ICON_IMAGE_WIDTH -> ICON_IMAGE_WIDTH
    int ICON_IMAGE_HEIGHT -> ICON_IMAGE_HEIGHT
    java.lang.String KPNS_MSG_WAKEUP -> KPNS_MSG_WAKEUP
    java.lang.String KPNS_MSG_TYPE -> KPNS_MSG_TYPE
    java.lang.String KPNS_MSG_TUNNELING -> KPNS_MSG_TUNNELING
    java.lang.String KPNS_MSG_ID -> KPNS_MSG_ID
    java.lang.String KPNS_GCM_REGI_ID -> KPNS_GCM_REGI_ID
    java.lang.String KPNS_GCM_API_KEY -> KPNS_GCM_API_KEY
    java.lang.String KPNS_TRY_NO -> KPNS_TRY_NO
    java.lang.String KPNS_CAUSE -> KPNS_CAUSE
    java.lang.String KPNS_WAKE_SEND_TIME -> KPNS_WAKE_SEND_TIME
    java.lang.String PREFS_M_REQUEST_TIME -> PREFS_M_REQUEST_TIME
    java.lang.String PREFS_M_SERVICE_STATE -> PREFS_M_SERVICE_STATE
    java.lang.String PREFS_M_SERVICE_RETRY_TIME -> PREFS_M_SERVICE_RETRY_TIME
    java.lang.String PREFS_M_SERVICE_STATE_DENY_COUNT -> PREFS_M_SERVICE_STATE_DENY_COUNT
    java.lang.String ACTION_USER_SWITCHED -> ACTION_USER_SWITCHED
    java.lang.String PREFS_GCM_REGID -> PREFS_GCM_REGID
    java.lang.String PREFS_GCM_AUTHKEY -> PREFS_GCM_AUTHKEY
    java.lang.String LOCALSOCKET_CLIENT_RUNNING -> LOCALSOCKET_CLIENT_RUNNING
    java.lang.String LOCALSOCKET_MQTT -> LOCALSOCKET_MQTT
    java.lang.String LOCALSOCKET_MQTT_2X -> LOCALSOCKET_MQTT_2X
    java.lang.String LOCALSOCKET_MQTT_5X -> LOCALSOCKET_MQTT_5X
    java.lang.String PUSH_CLIENT_PACKAGE_NAME -> PUSH_CLIENT_PACKAGE_NAME
    java.lang.String PUSH_CLIENT_DEV_PACKAGE_NAME -> PUSH_CLIENT_DEV_PACKAGE_NAME
    java.lang.String POPUP_ACTIVITY_NAME -> POPUP_ACTIVITY_NAME
    java.lang.String HTTP_DIGEST_ALGORITHM_MD5 -> HTTP_DIGEST_ALGORITHM_MD5
    java.lang.String HTTP_DIGEST_AUTH_PASSWORD -> HTTP_DIGEST_AUTH_PASSWORD
    java.lang.String HTTP_DIGEST_REALM -> HTTP_DIGEST_REALM
    java.lang.String HTTP_DIGEST_METHOD -> HTTP_DIGEST_METHOD
    java.lang.String HTTP_DIGEST_URI -> HTTP_DIGEST_URI
    java.lang.String HTTP_DIGEST_CLIENT_NONCE -> HTTP_DIGEST_CLIENT_NONCE
    java.lang.String HTTP_DIGEST_QOP -> HTTP_DIGEST_QOP
    java.lang.String HTTP_DIGEST_NONCE_COUNT -> HTTP_DIGEST_NONCE_COUNT
    java.lang.String KPNS_SERVER_IP -> KPNS_SERVER_IP
    int KPNS_SERVER_PORT -> KPNS_SERVER_PORT
    java.lang.String CHAR_SET -> CHAR_SET
    int REQ_ACTION_KEEP_ALIVE -> REQ_ACTION_KEEP_ALIVE
    int REQ_ACTION_START_PUSH_CLIENT -> REQ_ACTION_START_PUSH_CLIENT
    int REQ_ACTION_DEV_ENV_INFO -> REQ_ACTION_DEV_ENV_INFO
    int REQ_ACTION_DELETE_PUSH_MSG -> REQ_ACTION_DELETE_PUSH_MSG
    int REQ_ACTION_NOTIFICATION_PUSH_MSG -> REQ_ACTION_NOTIFICATION_PUSH_MSG
    int INTERVAL_KEEP_ALIVE_DEFAULT -> INTERVAL_KEEP_ALIVE_DEFAULT
    int INTERVAL_START_PUSH_CLIENT -> INTERVAL_START_PUSH_CLIENT
    int INTERVAL_COLLECT_DEVENVINFO -> INTERVAL_COLLECT_DEVENVINFO
    int INTERVAL_DELETE_PUSH_MSG -> INTERVAL_DELETE_PUSH_MSG
    int INTERVAL_CHECK_REQUEST_DELAY -> INTERVAL_CHECK_REQUEST_DELAY
    int INTERVAL_WAKE_LOCK_DEFAULT -> INTERVAL_WAKE_LOCK_DEFAULT
    java.lang.String ACTION_TOKEN_ALLOCATE -> ACTION_TOKEN_ALLOCATE
    java.lang.String ACTION_START_SERVICE -> ACTION_START_SERVICE
    java.lang.String ACTION_FINISH_SERVICE -> ACTION_FINISH_SERVICE
    java.lang.String ACTION_FINISH_LIBRARY -> ACTION_FINISH_LIBRARY
    java.lang.String ACTION_KEEP_ALIVE -> ACTION_KEEP_ALIVE
    java.lang.String ACTION_ACK -> ACTION_ACK
    java.lang.String ACTION_DEV_ENV_INFO -> ACTION_DEV_ENV_INFO
    java.lang.String ACTION_DELETE_PUSH_MSG -> ACTION_DELETE_PUSH_MSG
    java.lang.String ACTION_CHECK_SERVICE_PRIORITY -> ACTION_CHECK_SERVICE_PRIORITY
    java.lang.String ACTION_COPY_DB_TO_SDCARD -> ACTION_COPY_DB_TO_SDCARD
    int PRIORITY_TYPE_START_CLIENT -> PRIORITY_TYPE_START_CLIENT
    int PRIORITY_TYPE_CANCEL_SCHEDULE -> PRIORITY_TYPE_CANCEL_SCHEDULE
    int PRIORITY_TYPE_SHARE_APP_INFO -> PRIORITY_TYPE_SHARE_APP_INFO
    int PRIORITY_TYPE_CHANGE_LOG_LEVEL -> PRIORITY_TYPE_CHANGE_LOG_LEVEL
    int PRIORITY_TYPE_FINISH_LIB -> PRIORITY_TYPE_FINISH_LIB
    int PRIORITY_TYPE_START_MAIN_ACTIVITY -> PRIORITY_TYPE_START_MAIN_ACTIVITY
    java.lang.String ACTION_SEND_REGISTER -> ACTION_SEND_REGISTER
    java.lang.String ACTION_SEND_CHECK_STATUS_OF_MY_PUSH -> ACTION_SEND_CHECK_STATUS_OF_MY_PUSH
    java.lang.String ACTION_SEND_CHECK_STATUS_OF_SERVICE -> ACTION_SEND_CHECK_STATUS_OF_SERVICE
    java.lang.String ACTION_SEND_CHECK_SERVICE_AVAILABILITY -> ACTION_SEND_CHECK_SERVICE_AVAILABILITY
    java.lang.String ACTION_SEND_ACK -> ACTION_SEND_ACK
    java.lang.String ACTION_SEND_SERVICE_STATUS -> ACTION_SEND_SERVICE_STATUS
    java.lang.String ACTION_SHOW_TESTVIEW -> ACTION_SHOW_TESTVIEW
    java.lang.String ACTION_NSRM_FEATURES_ENABLED -> ACTION_NSRM_FEATURES_ENABLED
    java.lang.String ACTION_NSRM_FEATURES_DISABLED -> ACTION_NSRM_FEATURES_DISABLED
    java.lang.String ACTION_RECEIVE_RE_REGISTER -> ACTION_RECEIVE_RE_REGISTER
    java.lang.String ACTION_RECEIVE_REGISTRATION -> ACTION_RECEIVE_REGISTRATION
    java.lang.String ACTION_RECEIVE_REGISTRATION_1X -> ACTION_RECEIVE_REGISTRATION_1X
    java.lang.String ACTION_RECEIVE_SERVICE_UNAVAILABLE -> ACTION_RECEIVE_SERVICE_UNAVAILABLE
    java.lang.String ACTION_RECEIVE_SERVICE_AVAILABLE -> ACTION_RECEIVE_SERVICE_AVAILABLE
    java.lang.String ACTION_RECEIVE_MESSAGE -> ACTION_RECEIVE_MESSAGE
    java.lang.String ACTION_RECEIVE_MESSAGE_1X -> ACTION_RECEIVE_MESSAGE_1X
    java.lang.String ACTION_RECEIVE_STATUS_OF_MY_PUSH -> ACTION_RECEIVE_STATUS_OF_MY_PUSH
    java.lang.String ACTION_RECEIVE_STATUS_OF_SERVICE -> ACTION_RECEIVE_STATUS_OF_SERVICE
    java.lang.String ACTION_RECEIVE_WAP_PUSH_MESSAGE -> ACTION_RECEIVE_WAP_PUSH_MESSAGE
    java.lang.String ACTION_RECEIVE_KAM_MESSAGE -> ACTION_RECEIVE_KAM_MESSAGE
    java.lang.String ACTION_SEND_UPDATE_CHECK -> ACTION_SEND_UPDATE_CHECK
    java.lang.String ACTION_SEND_FORCE_UPDATE -> ACTION_SEND_FORCE_UPDATE
    java.lang.String ACTION_1X_PUSH -> ACTION_1X_PUSH
    java.lang.String PERMISSION_PUSH_MESSAGE_TAIL -> PERMISSION_PUSH_MESSAGE_TAIL
    java.lang.String PERMISSION_PUSH_SEND -> PERMISSION_PUSH_SEND
    java.lang.String PERMISSION_PUSH_RECEIVE -> PERMISSION_PUSH_RECEIVE
    java.lang.String APPID_FOR_KT_NOTICE -> APPID_FOR_KT_NOTICE
    java.lang.String APPID_FOR_KT_NOTICE_TEST -> APPID_FOR_KT_NOTICE_TEST
    java.lang.String EXTRA_APP_ID -> EXTRA_APP_ID
    java.lang.String EXTRA_THIRD_TYPE -> EXTRA_THIRD_TYPE
    java.lang.String EXTRA_CP_ID -> EXTRA_CP_ID
    java.lang.String EXTRA_PACKAGE -> EXTRA_PACKAGE
    java.lang.String EXTRA_PRIORITY -> EXTRA_PRIORITY
    java.lang.String EXTRA_INFO_STRING -> EXTRA_INFO_STRING
    java.lang.String EXTRA_OPERATOR -> EXTRA_OPERATOR
    java.lang.String EXTRA_STATUS -> EXTRA_STATUS
    java.lang.String EXTRA_TRANSACTION_ID -> EXTRA_TRANSACTION_ID
    java.lang.String EXTRA_TYPE -> EXTRA_TYPE
    java.lang.String EXTRA_MESSAGE -> EXTRA_MESSAGE
    java.lang.String EXTRA_NEED_ACK -> EXTRA_NEED_ACK
    java.lang.String EXTRA_ONLY_PUSH_CLIENT -> EXTRA_ONLY_PUSH_CLIENT
    java.lang.String EXTRA_LOG_LEVEL -> EXTRA_LOG_LEVEL
    java.lang.String EXTRA_REG_ID_1X -> EXTRA_REG_ID_1X
    java.lang.String EXTRA_DETAIL_1X -> EXTRA_DETAIL_1X
    java.lang.String EXTRA_RESULT_1X -> EXTRA_RESULT_1X
    java.lang.String MONITOR_LOCALSOCKET_NAME_SUFFIX -> MONITOR_LOCALSOCKET_NAME_SUFFIX
    java.lang.String EXTRA_PAYLOAD -> EXTRA_PAYLOAD
    java.lang.String GCM_KPNS_MSG_ID -> GCM_KPNS_MSG_ID
    java.lang.String GCM_KPNS_APP_PKGNAME -> GCM_KPNS_APP_PKGNAME
    java.lang.String GCM_KPNS_PUSH_MSG -> GCM_KPNS_PUSH_MSG
    java.lang.String GCM_KPNS_APP_ID -> GCM_KPNS_APP_ID
    java.lang.String GCM_KPNS_DATA -> GCM_KPNS_DATA
    java.lang.String PREFS_KPNS -> PREFS_KPNS
    java.lang.String PREFS_KEEP_ALIVE_INTERVAL -> PREFS_KEEP_ALIVE_INTERVAL
    java.lang.String PREFS_SERVICE_RETRY_TIME -> PREFS_SERVICE_RETRY_TIME
    java.lang.String PREFS_SERVICE_RUNNING -> PREFS_SERVICE_RUNNING
    java.lang.String PREFS_KPNS_KPOD_TOKEN -> PREFS_KPNS_KPOD_TOKEN
    java.lang.String PREFS_CLINET_ID -> PREFS_CLINET_ID
    java.lang.String PREFS_REGISTER_FAILED_COUNT -> PREFS_REGISTER_FAILED_COUNT
    java.lang.String PREFS_USIM_INFO -> PREFS_USIM_INFO
    java.lang.String PREFS_IS_MAIN_LIB_APP -> PREFS_IS_MAIN_LIB_APP
    java.lang.String PREFS_IS_INITIALIZE_PRE_APP -> PREFS_IS_INITIALIZE_PRE_APP
    java.lang.String PREFS_TOKEN_EXPIRE_TIME -> PREFS_TOKEN_EXPIRE_TIME
    java.lang.String PREFS_APP_ID -> PREFS_APP_ID
    java.lang.String PREFS_APP_STATUS -> PREFS_APP_STATUS
    java.lang.String PREFS_APP_ABNORMAL_DATA -> PREFS_APP_ABNORMAL_DATA
    java.lang.String PREFS_APP_ABNORMAL_TIME -> PREFS_APP_ABNORMAL_TIME
    java.lang.String PREFS_APP_ABNORMAL_CLASS -> PREFS_APP_ABNORMAL_CLASS
    java.lang.String PREFS_LOG_DISPLAY -> PREFS_LOG_DISPLAY
    java.lang.String PREFS_DEV_ENV_INFO_FLAGS -> PREFS_DEV_ENV_INFO_FLAGS
    java.lang.String PREFS_DEV_ENV_INFO -> PREFS_DEV_ENV_INFO
    java.lang.String PREFS_PRE_NETWORK_TYPE -> PREFS_PRE_NETWORK_TYPE
    int APP_STATUS_NORMAL -> APP_STATUS_NORMAL
    int APP_STATUS_ABNORMAL -> APP_STATUS_ABNORMAL
    java.lang.String NOTI_BAR_TITLE -> NOTI_BAR_TITLE
    java.lang.String NOTI_DATA_SEPERATER -> NOTI_DATA_SEPERATER
    java.lang.String NOTI_DATA_NOTI_TYPE -> NOTI_DATA_NOTI_TYPE
    java.lang.String NOTI_DATA_NOTI_ACTION -> NOTI_DATA_NOTI_ACTION
    java.lang.String NOTI_DATA_NOTI_TO -> NOTI_DATA_NOTI_TO
    java.lang.String NOTI_DATA_NOTI_ICON -> NOTI_DATA_NOTI_ICON
    java.lang.String NOTI_DATA_NOTI_BANNER -> NOTI_DATA_NOTI_BANNER
    java.lang.String NOTI_DATA_NOTI_TITLE -> NOTI_DATA_NOTI_TITLE
    java.lang.String NOTI_DATA_NOTI_CONTENT -> NOTI_DATA_NOTI_CONTENT
    java.lang.String NOTI_DATA_POPUP_TITLE -> NOTI_DATA_POPUP_TITLE
    java.lang.String NOTI_DATA_POPUP_ICON -> NOTI_DATA_POPUP_ICON
    java.lang.String NOTI_DATA_POPUP_TYPE -> NOTI_DATA_POPUP_TYPE
    java.lang.String NOTI_DATA_POPUP_CONTENT -> NOTI_DATA_POPUP_CONTENT
    java.lang.String MARKET_RESULT_KEY -> MARKET_RESULT_KEY
    java.lang.String MARKET_UPDATE_VERSION_KEY -> MARKET_UPDATE_VERSION_KEY
    java.lang.String GCM_REGISTRATION_ID -> GCM_REGISTRATION_ID
    java.lang.String SENDER_ID -> SENDER_ID
    java.lang.String GCM_AUTH_KEY -> GCM_AUTH_KEY
    java.lang.String ACTION_VIEW_NOTICE_ACTIVITY -> ACTION_VIEW_NOTICE_ACTIVITY
    boolean SAM_IS_TEST -> SAM_IS_TEST
    boolean SAM_IS_LOGON -> SAM_IS_LOGON
    int PUSH_MESSAGE_1x -> PUSH_MESSAGE_1x
    int TOKEN_MESSAGE_1x -> TOKEN_MESSAGE_1x
    int MSG_NEW_PUSH_INOUT -> MSG_NEW_PUSH_INOUT
    java.lang.String[] PUSH_LIB_HIGH_PRIORITY -> PUSH_LIB_HIGH_PRIORITY
    java.lang.String[] CLIENT_LINK_APPLICATION_LIST -> CLIENT_LINK_APPLICATION_LIST
com.ktpns.lib.util.DozeWhitelistHelper -> com.ktpns.lib.util.DozeWhitelistHelper:
    java.lang.String TAG -> TAG
    android.app.usage.UsageStatsManager sUsageStatsManager -> sUsageStatsManager
    java.lang.reflect.Method sMethodWhitelist -> sMethodWhitelist
    boolean whitelistAppTemporarily(android.content.Context,java.lang.String,long,android.os.UserHandle) -> whitelistAppTemporarily
com.ktpns.lib.util.Logger -> com.ktpns.lib.util.Logger:
    java.lang.String TAG -> TAG
    int mLogLevel -> mLogLevel
    int v(java.lang.Class,java.lang.String) -> v
    int v(java.lang.Class,java.lang.Throwable) -> v
    int v(java.lang.Class,java.lang.String,java.lang.Throwable) -> v
    int d(java.lang.Class,java.lang.String) -> d
    int d(java.lang.Class,java.lang.Throwable) -> d
    int d(java.lang.Class,java.lang.String,java.lang.Throwable) -> d
    int i(java.lang.Class,java.lang.String) -> i
    int i(java.lang.Class,java.lang.Throwable) -> i
    int i(java.lang.Class,java.lang.String,java.lang.Throwable) -> i
    int w(java.lang.Class,java.lang.String) -> w
    int w(java.lang.Class,java.lang.Throwable) -> w
    int w(java.lang.Class,java.lang.String,java.lang.Throwable) -> w
    int e(java.lang.Class,java.lang.String) -> e
    int e(java.lang.Class,java.lang.Throwable) -> e
    int e(java.lang.Class,java.lang.String,java.lang.Throwable) -> e
    void stackTrace(java.lang.Class,java.lang.String) -> stackTrace
    void stackTrace(int,java.lang.Class,java.lang.String) -> stackTrace
    boolean isVerboseEnabled() -> isVerboseEnabled
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isAssertEnabled() -> isAssertEnabled
    boolean isLevelEnabled(int) -> isLevelEnabled
    java.lang.String getClassLineNumber(java.lang.Class) -> getClassLineNumber
com.ktpns.lib.util.Prefs -> com.ktpns.lib.util.Prefs:
    void setKpnsKpodToken(android.content.Context,java.lang.String) -> setKpnsKpodToken
    void setKpnsAppInfo(android.content.Context,java.lang.String,java.lang.String) -> setKpnsAppInfo
    java.lang.String getKpnsAppInfo(android.content.Context,java.lang.String) -> getKpnsAppInfo
    java.lang.String getKpnsKpodToken(android.content.Context) -> getKpnsKpodToken
    void resetConnectRetryPrefs(android.content.Context,int) -> resetConnectRetryPrefs
    void setRetryLevel(android.content.Context,int) -> setRetryLevel
    int getRetryLevel(android.content.Context) -> getRetryLevel
    void setConnectSkipCount(android.content.Context,int) -> setConnectSkipCount
    int getConnectSkipCount(android.content.Context) -> getConnectSkipCount
    void setConnectFailCount(android.content.Context,int) -> setConnectFailCount
    int getConnectFailCount(android.content.Context) -> getConnectFailCount
    void setServiceRunning(android.content.Context,boolean) -> setServiceRunning
    boolean getServiceRunning(android.content.Context) -> getServiceRunning
    void setServiceRetryTime(android.content.Context,long) -> setServiceRetryTime
    long getServiceRetryTime(android.content.Context) -> getServiceRetryTime
    int setKeepAliveInterval(android.content.Context,java.lang.String) -> setKeepAliveInterval
    int setKeepAliveInterval(android.content.Context,int) -> setKeepAliveInterval
    int getKeepAliveInterval(android.content.Context) -> getKeepAliveInterval
    boolean setClientId(android.content.Context,java.lang.String) -> setClientId
    java.lang.String getClientId(android.content.Context) -> getClientId
    boolean setRegisterFailedCount(android.content.Context,int) -> setRegisterFailedCount
    boolean setRegisterFailedCountAdd1(android.content.Context) -> setRegisterFailedCountAdd1
    int getRegisterFailedCount(android.content.Context) -> getRegisterFailedCount
    byte[] getClientIdBytes(android.content.Context) -> getClientIdBytes
    boolean saveUsimInfo(android.content.Context) -> saveUsimInfo
    boolean checkUsimChanged(android.content.Context) -> checkUsimChanged
    boolean isMainLibApp(android.content.Context) -> isMainLibApp
    boolean setMainLibApp(android.content.Context,boolean) -> setMainLibApp
    boolean isInitializePreApp(android.content.Context) -> isInitializePreApp
    boolean setInitializePreApp(android.content.Context,boolean) -> setInitializePreApp
    boolean setTokenExpireTime(android.content.Context,long) -> setTokenExpireTime
    long getTokenExpireTime(android.content.Context) -> getTokenExpireTime
    boolean setLogDisplay(android.content.Context,boolean,boolean,boolean,boolean,boolean) -> setLogDisplay
    boolean[] getLogDisplay(android.content.Context) -> getLogDisplay
    boolean setDevEnvInfoFlags(android.content.Context,java.lang.String) -> setDevEnvInfoFlags
    java.lang.String getDevEnvInfoFlags(android.content.Context) -> getDevEnvInfoFlags
    int getPreNetwotkType(android.content.Context) -> getPreNetwotkType
    void setNetworkType(android.content.Context,int) -> setNetworkType
    void setDevEnvInfo(android.content.Context,byte[]) -> setDevEnvInfo
    byte[] getDevEnvInfo(android.content.Context) -> getDevEnvInfo
    boolean removeDevEnvInfo(android.content.Context) -> removeDevEnvInfo
    boolean isPermissionRetry(android.content.Context) -> isPermissionRetry
    void initRequestPermission(android.content.Context) -> initRequestPermission
    void setRequestTime(android.content.Context) -> setRequestTime
    long getReqeustTime(android.content.Context) -> getReqeustTime
    int getServiceDenyCount(android.content.Context) -> getServiceDenyCount
    void setServiceDenyCount(android.content.Context,int) -> setServiceDenyCount
    void setServiceTime(android.content.Context,long) -> setServiceTime
    boolean isServiceRetryTime(android.content.Context) -> isServiceRetryTime
    void setGCMRegisterID(android.content.Context,java.lang.String) -> setGCMRegisterID
    void setGCMAuthKey(android.content.Context,java.lang.String) -> setGCMAuthKey
    java.lang.String getGCMRegisterID(android.content.Context) -> getGCMRegisterID
    java.lang.String getGCMAuthKey(android.content.Context) -> getGCMAuthKey
com.ktpns.lib.util.Utils -> com.ktpns.lib.util.Utils:
    int forceLbPort -> forceLbPort
    java.lang.String forceLbIp -> forceLbIp
    java.lang.String forceUserName -> forceUserName
    java.lang.String forceNetType -> forceNetType
    java.lang.String forceClientId -> forceClientId
    com.ktpns.lib.net.data.ResponseData$ReturnCode forceError -> forceError
    com.ktpns.lib.util.c getDeviceInfo(android.content.Context) -> getDeviceInfo
    java.lang.String getNetworkName(int) -> getNetworkName
    com.ktpns.lib.util.g getNetworkInfo(android.content.Context) -> getNetworkInfo
    java.lang.String getLbIp() -> getLbIp
    int getLbPort() -> getLbPort
    java.lang.String getUserName(android.content.Context) -> getUserName
    boolean isNetworkAvailable(android.content.Context) -> isNetworkAvailable
    boolean isDeviceIdle(android.content.Context) -> isDeviceIdle
    boolean isOnWhitelist(android.content.Context) -> isOnWhitelist
    void parseString(java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String) -> parseString
    java.lang.String parseValue(java.lang.String,java.lang.String) -> parseValue
    void putKeyValuePair(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> putKeyValuePair
    java.lang.String newString(byte[]) -> newString
    byte[] getBytes(java.lang.String) -> getBytes
    boolean isEmpty(java.lang.String) -> isEmpty
    boolean isEmpty(byte[]) -> isEmpty
    int getPushClientVer(android.content.Context) -> getPushClientVer
    boolean isMqtt2XRunning() -> isMqtt2XRunning
    boolean isMqtt5XRunning() -> isMqtt5XRunning
    boolean isMqtt1XRunning() -> isMqtt1XRunning
    boolean isClientRunning() -> isClientRunning
    boolean isExistClient(android.content.Context) -> isExistClient
    boolean checkPermission(android.content.Context,java.lang.String) -> checkPermission
    boolean isPushClient(android.content.Context) -> isPushClient
    boolean isPushClient(java.lang.String) -> isPushClient
    boolean isHighPriorityPackage(android.content.Context) -> isHighPriorityPackage
    boolean isServiceRunning(android.content.Context) -> isServiceRunning
    java.lang.String getMD5Hash(java.lang.String,java.lang.String,java.lang.String) -> getMD5Hash
    char[] DigestCalcResponse(char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> DigestCalcResponse
    char[] DigestCalcHA1(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> DigestCalcHA1
    char[] convertToHex(byte[]) -> convertToHex
    char getHexChar(byte) -> getHexChar
    boolean isPackageExist(android.content.Context,java.lang.String) -> isPackageExist
    boolean isClientLinkApplication(java.lang.String) -> isClientLinkApplication
    java.lang.String getAppName(android.content.Context,java.lang.String) -> getAppName
    boolean isLbServer(org.jboss.netty.channel.Channel) -> isLbServer
    java.lang.String isWapPushAvailable(android.content.Context) -> isWapPushAvailable
    java.lang.String printDate(long) -> printDate
    java.lang.String getNetType(android.content.Context) -> getNetType
    void invokePushClient(android.content.Context) -> invokePushClient
    byte[] parsePayloadVer1x(java.lang.String) -> parsePayloadVer1x
    java.lang.String getImsi(android.content.Context) -> getImsi
    boolean existPopupActivity(android.content.Context) -> existPopupActivity
    java.lang.String getNoticeValue(java.lang.String[],java.lang.String) -> getNoticeValue
    java.lang.String getMyVersionName(android.content.Context) -> getMyVersionName
    void setForceLbPort(int) -> setForceLbPort
    int getForceLbPort() -> getForceLbPort
    void removeForceLbPort() -> removeForceLbPort
    void setForceLbIp(java.lang.String) -> setForceLbIp
    java.lang.String getForceLbIp() -> getForceLbIp
    void removeForceLbIp() -> removeForceLbIp
    void setForceUserName(java.lang.String) -> setForceUserName
    java.lang.String getForceUserName() -> getForceUserName
    void removeForceUserName() -> removeForceUserName
    void setForceNetType(java.lang.String) -> setForceNetType
    java.lang.String getForceNetType() -> getForceNetType
    void removeForceNetType() -> removeForceNetType
    void setForceClientId(java.lang.String) -> setForceClientId
    java.lang.String getForceClientId() -> getForceClientId
    void removeForceClientId() -> removeForceClientId
    void setForceError(com.ktpns.lib.net.data.ResponseData$ReturnCode) -> setForceError
    com.ktpns.lib.net.data.ResponseData$ReturnCode getForceError() -> getForceError
    void removeForceError() -> removeForceError
    void checkPermission(android.content.Context) -> checkPermission
    boolean isAvailableRequest(android.content.Context) -> isAvailableRequest
    long getNextTime(long,int,int) -> getNextTime
    boolean isRequestPermission(android.content.Context) -> isRequestPermission
    java.lang.String isDozePermission(android.content.Context) -> isDozePermission
com.ktpns.lib.util.Utils$a -> com.ktpns.lib.util.Utils$a:
    com.ktpns.lib.util.Utils$a a -> a
    com.ktpns.lib.util.Utils$a b -> b
    com.ktpns.lib.util.Utils$a c -> c
    com.ktpns.lib.util.Utils$a[] d -> d
    com.ktpns.lib.util.Utils$a[] values() -> values
    com.ktpns.lib.util.Utils$a valueOf(java.lang.String) -> valueOf
com.ktpns.lib.util.a -> com.ktpns.lib.util.a:
    byte[] a -> a
    java.lang.String a(byte[],byte[]) -> a
    java.lang.String a(byte) -> a
    byte[] b(byte[],byte[]) -> b
com.ktpns.lib.util.b -> com.ktpns.lib.util.b:
    java.lang.String a(byte) -> a
    java.lang.String a(byte[]) -> a
    int b(byte[]) -> b
    short c(byte[]) -> c
    void d(byte[]) -> d
com.ktpns.lib.util.c -> com.ktpns.lib.util.c:
com.ktpns.lib.util.d -> com.ktpns.lib.util.d:
    char[] a -> a
    char[] b -> b
    char[] c -> c
    byte[] d -> d
    java.lang.String a(byte[]) -> a
    byte[] a(java.lang.String) -> a
com.ktpns.lib.util.e -> com.ktpns.lib.util.e:
    android.graphics.Bitmap a(java.lang.String,int,int) -> a
com.ktpns.lib.util.e$a -> com.ktpns.lib.util.e$a:
    int a -> a
    int b -> b
com.ktpns.lib.util.f -> com.ktpns.lib.util.f:
    android.content.Context a -> a
    java.util.Timer b -> b
    boolean c -> c
    java.lang.String a() -> a
    java.lang.String a(java.lang.String) -> a
    void a(com.ktpns.lib.util.f) -> a
com.ktpns.lib.util.f$a -> com.ktpns.lib.util.f$a:
    com.ktpns.lib.util.f a -> a
    void run() -> run
com.ktpns.lib.util.g -> com.ktpns.lib.util.g:
    com.ktpns.lib.util.Utils$a a -> a
    boolean b -> b
com.ktpns.lib.util.h -> com.ktpns.lib.util.h:
    byte[] a() -> a
    byte[] a(byte[]) -> a
    java.lang.String a(byte[],byte[],int) -> a
com.ktpns.lib.util.i -> com.ktpns.lib.util.i:
    int a -> a
    int b -> b
org.jboss.netty.bootstrap.Bootstrap -> org.jboss.netty.bootstrap.Bootstrap:
    org.jboss.netty.channel.ChannelFactory factory -> factory
    org.jboss.netty.channel.ChannelPipeline pipeline -> pipeline
    org.jboss.netty.channel.ChannelPipelineFactory pipelineFactory -> pipelineFactory
    java.util.Map options -> options
    short[] ORDER_TEST_SAMPLES -> ORDER_TEST_SAMPLES
    org.jboss.netty.channel.ChannelFactory getFactory() -> getFactory
    void setFactory(org.jboss.netty.channel.ChannelFactory) -> setFactory
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
    void setPipeline(org.jboss.netty.channel.ChannelPipeline) -> setPipeline
    java.util.Map getPipelineAsMap() -> getPipelineAsMap
    void setPipelineAsMap(java.util.Map) -> setPipelineAsMap
    org.jboss.netty.channel.ChannelPipelineFactory getPipelineFactory() -> getPipelineFactory
    void setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory) -> setPipelineFactory
    java.util.Map getOptions() -> getOptions
    void setOptions(java.util.Map) -> setOptions
    java.lang.Object getOption(java.lang.String) -> getOption
    void setOption(java.lang.String,java.lang.Object) -> setOption
    void releaseExternalResources() -> releaseExternalResources
    void shutdown() -> shutdown
    boolean isOrderedMap(java.util.Map) -> isOrderedMap
org.jboss.netty.bootstrap.ClientBootstrap -> org.jboss.netty.bootstrap.ClientBootstrap:
    org.jboss.netty.channel.ChannelFuture connect() -> connect
    org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress) -> connect
    org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress) -> connect
    org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress) -> bind
org.jboss.netty.bootstrap.ConnectionlessBootstrap -> org.jboss.netty.bootstrap.ConnectionlessBootstrap:
    org.jboss.netty.channel.Channel bind() -> bind
    org.jboss.netty.channel.Channel bind(java.net.SocketAddress) -> bind
    org.jboss.netty.channel.ChannelFuture connect() -> connect
    org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress) -> connect
    org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress) -> connect
org.jboss.netty.bootstrap.ServerBootstrap -> org.jboss.netty.bootstrap.ServerBootstrap:
    org.jboss.netty.channel.ChannelHandler parentHandler -> parentHandler
    void setFactory(org.jboss.netty.channel.ChannelFactory) -> setFactory
    org.jboss.netty.channel.ChannelHandler getParentHandler() -> getParentHandler
    void setParentHandler(org.jboss.netty.channel.ChannelHandler) -> setParentHandler
    org.jboss.netty.channel.Channel bind() -> bind
    org.jboss.netty.channel.Channel bind(java.net.SocketAddress) -> bind
    org.jboss.netty.channel.ChannelFuture bindAsync() -> bindAsync
    org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress) -> bindAsync
org.jboss.netty.bootstrap.ServerBootstrap$1 -> org.jboss.netty.bootstrap.ServerBootstrap$1:
    org.jboss.netty.channel.ChannelFuture val$bfuture -> val$bfuture
    org.jboss.netty.bootstrap.ServerBootstrap this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.bootstrap.ServerBootstrap$Binder -> org.jboss.netty.bootstrap.ServerBootstrap$Binder:
    java.net.SocketAddress localAddress -> localAddress
    java.util.Map childOptions -> childOptions
    org.jboss.netty.channel.DefaultChannelFuture bindFuture -> bindFuture
    org.jboss.netty.bootstrap.ServerBootstrap this$0 -> this$0
    void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelOpen
    void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent) -> childChannelOpen
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    org.jboss.netty.channel.DefaultChannelFuture access$000(org.jboss.netty.bootstrap.ServerBootstrap$Binder) -> access$000
org.jboss.netty.bootstrap.ServerBootstrap$Binder$1 -> org.jboss.netty.bootstrap.ServerBootstrap$Binder$1:
    org.jboss.netty.bootstrap.ServerBootstrap$Binder this$1 -> this$1
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.buffer.AbstractChannelBuffer -> org.jboss.netty.buffer.AbstractChannelBuffer:
    int readerIndex -> readerIndex
    int writerIndex -> writerIndex
    int markedReaderIndex -> markedReaderIndex
    int markedWriterIndex -> markedWriterIndex
    int readerIndex() -> readerIndex
    void readerIndex(int) -> readerIndex
    int writerIndex() -> writerIndex
    void writerIndex(int) -> writerIndex
    void setIndex(int,int) -> setIndex
    void clear() -> clear
    boolean readable() -> readable
    boolean writable() -> writable
    int readableBytes() -> readableBytes
    int writableBytes() -> writableBytes
    void markReaderIndex() -> markReaderIndex
    void resetReaderIndex() -> resetReaderIndex
    void markWriterIndex() -> markWriterIndex
    void resetWriterIndex() -> resetWriterIndex
    void discardReadBytes() -> discardReadBytes
    void ensureWritableBytes(int) -> ensureWritableBytes
    short getUnsignedByte(int) -> getUnsignedByte
    int getUnsignedShort(int) -> getUnsignedShort
    int getMedium(int) -> getMedium
    long getUnsignedInt(int) -> getUnsignedInt
    char getChar(int) -> getChar
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    void getBytes(int,byte[]) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int) -> getBytes
    void setChar(int,int) -> setChar
    void setFloat(int,float) -> setFloat
    void setDouble(int,double) -> setDouble
    void setBytes(int,byte[]) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int) -> setBytes
    void setZero(int,int) -> setZero
    byte readByte() -> readByte
    short readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    int readMedium() -> readMedium
    int readUnsignedMedium() -> readUnsignedMedium
    int readInt() -> readInt
    long readUnsignedInt() -> readUnsignedInt
    long readLong() -> readLong
    char readChar() -> readChar
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    org.jboss.netty.buffer.ChannelBuffer readBytes(int) -> readBytes
    org.jboss.netty.buffer.ChannelBuffer readSlice(int) -> readSlice
    void readBytes(byte[],int,int) -> readBytes
    void readBytes(byte[]) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer,int) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> readBytes
    void readBytes(java.nio.ByteBuffer) -> readBytes
    int readBytes(java.nio.channels.GatheringByteChannel,int) -> readBytes
    void readBytes(java.io.OutputStream,int) -> readBytes
    void skipBytes(int) -> skipBytes
    void writeByte(int) -> writeByte
    void writeShort(int) -> writeShort
    void writeMedium(int) -> writeMedium
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeChar(int) -> writeChar
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeBytes(byte[],int,int) -> writeBytes
    void writeBytes(byte[]) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> writeBytes
    void writeBytes(java.nio.ByteBuffer) -> writeBytes
    int writeBytes(java.io.InputStream,int) -> writeBytes
    int writeBytes(java.nio.channels.ScatteringByteChannel,int) -> writeBytes
    void writeZero(int) -> writeZero
    org.jboss.netty.buffer.ChannelBuffer copy() -> copy
    org.jboss.netty.buffer.ChannelBuffer slice() -> slice
    java.nio.ByteBuffer toByteBuffer() -> toByteBuffer
    java.nio.ByteBuffer[] toByteBuffers() -> toByteBuffers
    java.nio.ByteBuffer[] toByteBuffers(int,int) -> toByteBuffers
    java.lang.String toString(java.nio.charset.Charset) -> toString
    java.lang.String toString(int,int,java.nio.charset.Charset) -> toString
    int indexOf(int,int,byte) -> indexOf
    int indexOf(int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> indexOf
    int bytesBefore(byte) -> bytesBefore
    int bytesBefore(org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    int bytesBefore(int,byte) -> bytesBefore
    int bytesBefore(int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    int bytesBefore(int,int,byte) -> bytesBefore
    int bytesBefore(int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.buffer.ChannelBuffer) -> compareTo
    java.lang.String toString() -> toString
    void checkReadableBytes(int) -> checkReadableBytes
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.buffer.AbstractChannelBufferFactory -> org.jboss.netty.buffer.AbstractChannelBufferFactory:
    java.nio.ByteOrder defaultOrder -> defaultOrder
    org.jboss.netty.buffer.ChannelBuffer getBuffer(int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(byte[],int,int) -> getBuffer
    java.nio.ByteOrder getDefaultOrder() -> getDefaultOrder
org.jboss.netty.buffer.BigEndianHeapChannelBuffer -> org.jboss.netty.buffer.BigEndianHeapChannelBuffer:
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
org.jboss.netty.buffer.ByteBufferBackedChannelBuffer -> org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:
    java.nio.ByteBuffer buffer -> buffer
    java.nio.ByteOrder order -> order
    int capacity -> capacity
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    boolean isDirect() -> isDirect
    java.nio.ByteOrder order() -> order
    int capacity() -> capacity
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    byte getByte(int) -> getByte
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    void setByte(int,int) -> setByte
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
org.jboss.netty.buffer.ChannelBuffer -> org.jboss.netty.buffer.ChannelBuffer:
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    int capacity() -> capacity
    java.nio.ByteOrder order() -> order
    boolean isDirect() -> isDirect
    int readerIndex() -> readerIndex
    void readerIndex(int) -> readerIndex
    int writerIndex() -> writerIndex
    void writerIndex(int) -> writerIndex
    void setIndex(int,int) -> setIndex
    int readableBytes() -> readableBytes
    int writableBytes() -> writableBytes
    boolean readable() -> readable
    boolean writable() -> writable
    void clear() -> clear
    void markReaderIndex() -> markReaderIndex
    void resetReaderIndex() -> resetReaderIndex
    void markWriterIndex() -> markWriterIndex
    void resetWriterIndex() -> resetWriterIndex
    void discardReadBytes() -> discardReadBytes
    void ensureWritableBytes(int) -> ensureWritableBytes
    byte getByte(int) -> getByte
    short getUnsignedByte(int) -> getUnsignedByte
    short getShort(int) -> getShort
    int getUnsignedShort(int) -> getUnsignedShort
    int getMedium(int) -> getMedium
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getUnsignedInt(int) -> getUnsignedInt
    long getLong(int) -> getLong
    char getChar(int) -> getChar
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,byte[]) -> getBytes
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    void setByte(int,int) -> setByte
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    void setChar(int,int) -> setChar
    void setFloat(int,float) -> setFloat
    void setDouble(int,double) -> setDouble
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,byte[]) -> setBytes
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    void setZero(int,int) -> setZero
    byte readByte() -> readByte
    short readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    int readMedium() -> readMedium
    int readUnsignedMedium() -> readUnsignedMedium
    int readInt() -> readInt
    long readUnsignedInt() -> readUnsignedInt
    long readLong() -> readLong
    char readChar() -> readChar
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    org.jboss.netty.buffer.ChannelBuffer readBytes(int) -> readBytes
    org.jboss.netty.buffer.ChannelBuffer readSlice(int) -> readSlice
    void readBytes(org.jboss.netty.buffer.ChannelBuffer) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer,int) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> readBytes
    void readBytes(byte[]) -> readBytes
    void readBytes(byte[],int,int) -> readBytes
    void readBytes(java.nio.ByteBuffer) -> readBytes
    void readBytes(java.io.OutputStream,int) -> readBytes
    int readBytes(java.nio.channels.GatheringByteChannel,int) -> readBytes
    void skipBytes(int) -> skipBytes
    void writeByte(int) -> writeByte
    void writeShort(int) -> writeShort
    void writeMedium(int) -> writeMedium
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeChar(int) -> writeChar
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> writeBytes
    void writeBytes(byte[]) -> writeBytes
    void writeBytes(byte[],int,int) -> writeBytes
    void writeBytes(java.nio.ByteBuffer) -> writeBytes
    int writeBytes(java.io.InputStream,int) -> writeBytes
    int writeBytes(java.nio.channels.ScatteringByteChannel,int) -> writeBytes
    void writeZero(int) -> writeZero
    int indexOf(int,int,byte) -> indexOf
    int indexOf(int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> indexOf
    int bytesBefore(byte) -> bytesBefore
    int bytesBefore(org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    int bytesBefore(int,byte) -> bytesBefore
    int bytesBefore(int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    int bytesBefore(int,int,byte) -> bytesBefore
    int bytesBefore(int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    org.jboss.netty.buffer.ChannelBuffer copy() -> copy
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
    org.jboss.netty.buffer.ChannelBuffer slice() -> slice
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    java.nio.ByteBuffer toByteBuffer() -> toByteBuffer
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
    java.nio.ByteBuffer[] toByteBuffers() -> toByteBuffers
    java.nio.ByteBuffer[] toByteBuffers(int,int) -> toByteBuffers
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    java.lang.String toString(java.nio.charset.Charset) -> toString
    java.lang.String toString(int,int,java.nio.charset.Charset) -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.buffer.ChannelBuffer) -> compareTo
    java.lang.String toString() -> toString
org.jboss.netty.buffer.ChannelBufferFactory -> org.jboss.netty.buffer.ChannelBufferFactory:
    org.jboss.netty.buffer.ChannelBuffer getBuffer(int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(byte[],int,int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,byte[],int,int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteBuffer) -> getBuffer
    java.nio.ByteOrder getDefaultOrder() -> getDefaultOrder
org.jboss.netty.buffer.ChannelBufferIndexFinder -> org.jboss.netty.buffer.ChannelBufferIndexFinder:
    org.jboss.netty.buffer.ChannelBufferIndexFinder NUL -> NUL
    org.jboss.netty.buffer.ChannelBufferIndexFinder NOT_NUL -> NOT_NUL
    org.jboss.netty.buffer.ChannelBufferIndexFinder CR -> CR
    org.jboss.netty.buffer.ChannelBufferIndexFinder NOT_CR -> NOT_CR
    org.jboss.netty.buffer.ChannelBufferIndexFinder LF -> LF
    org.jboss.netty.buffer.ChannelBufferIndexFinder NOT_LF -> NOT_LF
    org.jboss.netty.buffer.ChannelBufferIndexFinder CRLF -> CRLF
    org.jboss.netty.buffer.ChannelBufferIndexFinder NOT_CRLF -> NOT_CRLF
    org.jboss.netty.buffer.ChannelBufferIndexFinder LINEAR_WHITESPACE -> LINEAR_WHITESPACE
    org.jboss.netty.buffer.ChannelBufferIndexFinder NOT_LINEAR_WHITESPACE -> NOT_LINEAR_WHITESPACE
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$1 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$1:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$10 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$10:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$2 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$2:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$3 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$3:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$4 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$4:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$5 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$5:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$6 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$6:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$7 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$7:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$8 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$8:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferIndexFinder$9 -> org.jboss.netty.buffer.ChannelBufferIndexFinder$9:
    boolean find(org.jboss.netty.buffer.ChannelBuffer,int) -> find
org.jboss.netty.buffer.ChannelBufferInputStream -> org.jboss.netty.buffer.ChannelBufferInputStream:
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    int startIndex -> startIndex
    int endIndex -> endIndex
    java.lang.StringBuilder lineBuf -> lineBuf
    int readBytes() -> readBytes
    int available() -> available
    void mark(int) -> mark
    boolean markSupported() -> markSupported
    int read() -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    char readChar() -> readChar
    double readDouble() -> readDouble
    float readFloat() -> readFloat
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int readInt() -> readInt
    java.lang.String readLine() -> readLine
    long readLong() -> readLong
    short readShort() -> readShort
    java.lang.String readUTF() -> readUTF
    int readUnsignedByte() -> readUnsignedByte
    int readUnsignedShort() -> readUnsignedShort
    int skipBytes(int) -> skipBytes
    void checkAvailable(int) -> checkAvailable
org.jboss.netty.buffer.ChannelBufferOutputStream -> org.jboss.netty.buffer.ChannelBufferOutputStream:
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    int startIndex -> startIndex
    java.io.DataOutputStream utf8out -> utf8out
    int writtenBytes() -> writtenBytes
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeBytes(java.lang.String) -> writeBytes
    void writeChar(int) -> writeChar
    void writeChars(java.lang.String) -> writeChars
    void writeDouble(double) -> writeDouble
    void writeFloat(float) -> writeFloat
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeShort(int) -> writeShort
    void writeUTF(java.lang.String) -> writeUTF
    org.jboss.netty.buffer.ChannelBuffer buffer() -> buffer
org.jboss.netty.buffer.ChannelBuffers -> org.jboss.netty.buffer.ChannelBuffers:
    java.nio.ByteOrder BIG_ENDIAN -> BIG_ENDIAN
    java.nio.ByteOrder LITTLE_ENDIAN -> LITTLE_ENDIAN
    org.jboss.netty.buffer.ChannelBuffer EMPTY_BUFFER -> EMPTY_BUFFER
    char[] HEXDUMP_TABLE -> HEXDUMP_TABLE
    org.jboss.netty.buffer.ChannelBuffer buffer(int) -> buffer
    org.jboss.netty.buffer.ChannelBuffer buffer(java.nio.ByteOrder,int) -> buffer
    org.jboss.netty.buffer.ChannelBuffer directBuffer(int) -> directBuffer
    org.jboss.netty.buffer.ChannelBuffer directBuffer(java.nio.ByteOrder,int) -> directBuffer
    org.jboss.netty.buffer.ChannelBuffer dynamicBuffer() -> dynamicBuffer
    org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(org.jboss.netty.buffer.ChannelBufferFactory) -> dynamicBuffer
    org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(int) -> dynamicBuffer
    org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(java.nio.ByteOrder,int) -> dynamicBuffer
    org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(int,org.jboss.netty.buffer.ChannelBufferFactory) -> dynamicBuffer
    org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory) -> dynamicBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(byte[]) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(java.nio.ByteOrder,byte[]) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(byte[],int,int) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(java.nio.ByteOrder,byte[],int,int) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(java.nio.ByteBuffer) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(byte[][]) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(java.nio.ByteOrder,byte[][]) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer compositeBuffer(java.nio.ByteOrder,java.util.List,boolean) -> compositeBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer[]) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(boolean,org.jboss.netty.buffer.ChannelBuffer[]) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(java.nio.ByteBuffer[]) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(boolean,java.nio.ByteBuffer[]) -> wrappedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(byte[]) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[]) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(byte[],int,int) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[],int,int) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteBuffer) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(org.jboss.netty.buffer.ChannelBuffer) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(byte[][]) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[][]) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(org.jboss.netty.buffer.ChannelBuffer[]) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteBuffer[]) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.lang.CharSequence,int,int,java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,int,int,java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(char[],java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(char[],int,int,java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,char[],java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,char[],int,int,java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.nio.CharBuffer,java.nio.charset.Charset) -> copiedBuffer
    org.jboss.netty.buffer.ChannelBuffer unmodifiableBuffer(org.jboss.netty.buffer.ChannelBuffer) -> unmodifiableBuffer
    org.jboss.netty.buffer.ChannelBuffer hexDump(java.lang.String) -> hexDump
    java.lang.String hexDump(org.jboss.netty.buffer.ChannelBuffer) -> hexDump
    java.lang.String hexDump(org.jboss.netty.buffer.ChannelBuffer,int,int) -> hexDump
    int hashCode(org.jboss.netty.buffer.ChannelBuffer) -> hashCode
    boolean equals(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer) -> equals
    int compare(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer) -> compare
    int indexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte) -> indexOf
    int indexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> indexOf
    short swapShort(short) -> swapShort
    int swapMedium(int) -> swapMedium
    int swapInt(int) -> swapInt
    long swapLong(long) -> swapLong
    int firstIndexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte) -> firstIndexOf
    int lastIndexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte) -> lastIndexOf
    int firstIndexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> firstIndexOf
    int lastIndexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> lastIndexOf
    java.nio.ByteBuffer encodeString(java.nio.CharBuffer,java.nio.charset.Charset) -> encodeString
    java.lang.String decodeString(java.nio.ByteBuffer,java.nio.charset.Charset) -> decodeString
org.jboss.netty.buffer.CompositeChannelBuffer -> org.jboss.netty.buffer.CompositeChannelBuffer:
    java.nio.ByteOrder order -> order
    org.jboss.netty.buffer.ChannelBuffer[] components -> components
    int[] indices -> indices
    int lastAccessedComponentId -> lastAccessedComponentId
    boolean gathering -> gathering
    boolean $assertionsDisabled -> $assertionsDisabled
    boolean useGathering() -> useGathering
    java.util.List decompose(int,int) -> decompose
    void setComponents(java.util.List) -> setComponents
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    boolean isDirect() -> isDirect
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    int capacity() -> capacity
    int numComponents() -> numComponents
    byte getByte(int) -> getByte
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    void setByte(int,int) -> setByte
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
    void copyTo(int,int,int,org.jboss.netty.buffer.ChannelBuffer) -> copyTo
    org.jboss.netty.buffer.ChannelBuffer getBuffer(int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
    java.nio.ByteBuffer[] toByteBuffers(int,int) -> toByteBuffers
    int componentId(int) -> componentId
    void discardReadBytes() -> discardReadBytes
    java.lang.String toString() -> toString
org.jboss.netty.buffer.DirectChannelBufferFactory -> org.jboss.netty.buffer.DirectChannelBufferFactory:
    org.jboss.netty.buffer.DirectChannelBufferFactory INSTANCE_BE -> INSTANCE_BE
    org.jboss.netty.buffer.DirectChannelBufferFactory INSTANCE_LE -> INSTANCE_LE
    java.lang.Object bigEndianLock -> bigEndianLock
    java.lang.Object littleEndianLock -> littleEndianLock
    int preallocatedBufCapacity -> preallocatedBufCapacity
    org.jboss.netty.buffer.ChannelBuffer preallocatedBEBuf -> preallocatedBEBuf
    int preallocatedBEBufPos -> preallocatedBEBufPos
    org.jboss.netty.buffer.ChannelBuffer preallocatedLEBuf -> preallocatedLEBuf
    int preallocatedLEBufPos -> preallocatedLEBufPos
    org.jboss.netty.buffer.ChannelBufferFactory getInstance() -> getInstance
    org.jboss.netty.buffer.ChannelBufferFactory getInstance(java.nio.ByteOrder) -> getInstance
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,byte[],int,int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteBuffer) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer allocateBigEndianBuffer(int) -> allocateBigEndianBuffer
    org.jboss.netty.buffer.ChannelBuffer allocateLittleEndianBuffer(int) -> allocateLittleEndianBuffer
org.jboss.netty.buffer.DuplicatedChannelBuffer -> org.jboss.netty.buffer.DuplicatedChannelBuffer:
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    org.jboss.netty.buffer.ChannelBuffer unwrap() -> unwrap
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    boolean isDirect() -> isDirect
    int capacity() -> capacity
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    byte getByte(int) -> getByte
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    void setByte(int,int) -> setByte
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
org.jboss.netty.buffer.DynamicChannelBuffer -> org.jboss.netty.buffer.DynamicChannelBuffer:
    org.jboss.netty.buffer.ChannelBufferFactory factory -> factory
    java.nio.ByteOrder endianness -> endianness
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    void ensureWritableBytes(int) -> ensureWritableBytes
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    boolean isDirect() -> isDirect
    int capacity() -> capacity
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    byte getByte(int) -> getByte
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    void setByte(int,int) -> setByte
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    void writeByte(int) -> writeByte
    void writeShort(int) -> writeShort
    void writeMedium(int) -> writeMedium
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeBytes(byte[],int,int) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> writeBytes
    void writeBytes(java.nio.ByteBuffer) -> writeBytes
    int writeBytes(java.io.InputStream,int) -> writeBytes
    int writeBytes(java.nio.channels.ScatteringByteChannel,int) -> writeBytes
    void writeZero(int) -> writeZero
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
org.jboss.netty.buffer.EmptyChannelBuffer -> org.jboss.netty.buffer.EmptyChannelBuffer:
    byte[] BUFFER -> BUFFER
    void clear() -> clear
    void readerIndex(int) -> readerIndex
    void writerIndex(int) -> writerIndex
    void setIndex(int,int) -> setIndex
    void markReaderIndex() -> markReaderIndex
    void resetReaderIndex() -> resetReaderIndex
    void markWriterIndex() -> markWriterIndex
    void resetWriterIndex() -> resetWriterIndex
    void discardReadBytes() -> discardReadBytes
    org.jboss.netty.buffer.ChannelBuffer readBytes(int) -> readBytes
    org.jboss.netty.buffer.ChannelBuffer readSlice(int) -> readSlice
    void readBytes(byte[],int,int) -> readBytes
    void readBytes(byte[]) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer,int) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> readBytes
    void readBytes(java.nio.ByteBuffer) -> readBytes
    int readBytes(java.nio.channels.GatheringByteChannel,int) -> readBytes
    void readBytes(java.io.OutputStream,int) -> readBytes
    void skipBytes(int) -> skipBytes
    void writeBytes(byte[],int,int) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> writeBytes
    void writeBytes(java.nio.ByteBuffer) -> writeBytes
    int writeBytes(java.io.InputStream,int) -> writeBytes
    int writeBytes(java.nio.channels.ScatteringByteChannel,int) -> writeBytes
    void writeZero(int) -> writeZero
    void checkWritableBytes(int) -> checkWritableBytes
    void checkReadableBytes(int) -> checkReadableBytes
org.jboss.netty.buffer.HeapChannelBuffer -> org.jboss.netty.buffer.HeapChannelBuffer:
    byte[] array -> array
    boolean isDirect() -> isDirect
    int capacity() -> capacity
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    byte getByte(int) -> getByte
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    void setByte(int,int) -> setByte
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
org.jboss.netty.buffer.HeapChannelBufferFactory -> org.jboss.netty.buffer.HeapChannelBufferFactory:
    org.jboss.netty.buffer.HeapChannelBufferFactory INSTANCE_BE -> INSTANCE_BE
    org.jboss.netty.buffer.HeapChannelBufferFactory INSTANCE_LE -> INSTANCE_LE
    org.jboss.netty.buffer.ChannelBufferFactory getInstance() -> getInstance
    org.jboss.netty.buffer.ChannelBufferFactory getInstance(java.nio.ByteOrder) -> getInstance
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,byte[],int,int) -> getBuffer
    org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteBuffer) -> getBuffer
org.jboss.netty.buffer.LittleEndianHeapChannelBuffer -> org.jboss.netty.buffer.LittleEndianHeapChannelBuffer:
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
org.jboss.netty.buffer.ReadOnlyChannelBuffer -> org.jboss.netty.buffer.ReadOnlyChannelBuffer:
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    org.jboss.netty.buffer.ChannelBuffer unwrap() -> unwrap
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    boolean isDirect() -> isDirect
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    void discardReadBytes() -> discardReadBytes
    void setByte(int,int) -> setByte
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    byte getByte(int) -> getByte
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
    java.nio.ByteBuffer[] toByteBuffers(int,int) -> toByteBuffers
    int capacity() -> capacity
org.jboss.netty.buffer.SlicedChannelBuffer -> org.jboss.netty.buffer.SlicedChannelBuffer:
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    int adjustment -> adjustment
    int length -> length
    org.jboss.netty.buffer.ChannelBuffer unwrap() -> unwrap
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    boolean isDirect() -> isDirect
    int capacity() -> capacity
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    byte getByte(int) -> getByte
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    void setByte(int,int) -> setByte
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
    void checkIndex(int) -> checkIndex
    void checkIndex(int,int) -> checkIndex
org.jboss.netty.buffer.TruncatedChannelBuffer -> org.jboss.netty.buffer.TruncatedChannelBuffer:
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    int length -> length
    org.jboss.netty.buffer.ChannelBuffer unwrap() -> unwrap
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    boolean isDirect() -> isDirect
    int capacity() -> capacity
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    byte getByte(int) -> getByte
    short getShort(int) -> getShort
    int getUnsignedMedium(int) -> getUnsignedMedium
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    void setByte(int,int) -> setByte
    void setShort(int,int) -> setShort
    void setMedium(int,int) -> setMedium
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
    void checkIndex(int) -> checkIndex
    void checkIndex(int,int) -> checkIndex
org.jboss.netty.buffer.WrappedChannelBuffer -> org.jboss.netty.buffer.WrappedChannelBuffer:
    org.jboss.netty.buffer.ChannelBuffer unwrap() -> unwrap
org.jboss.netty.channel.AbstractChannel -> org.jboss.netty.channel.AbstractChannel:
    java.util.concurrent.ConcurrentMap allChannels -> allChannels
    java.util.Random random -> random
    java.lang.Integer id -> id
    org.jboss.netty.channel.Channel parent -> parent
    org.jboss.netty.channel.ChannelFactory factory -> factory
    org.jboss.netty.channel.ChannelPipeline pipeline -> pipeline
    org.jboss.netty.channel.ChannelFuture succeededFuture -> succeededFuture
    org.jboss.netty.channel.AbstractChannel$ChannelCloseFuture closeFuture -> closeFuture
    int interestOps -> interestOps
    boolean strValConnected -> strValConnected
    java.lang.String strVal -> strVal
    java.lang.Object attachment -> attachment
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater UNWRITABLE_UPDATER -> UNWRITABLE_UPDATER
    int unwritable -> unwritable
    boolean $assertionsDisabled -> $assertionsDisabled
    java.lang.Integer allocateId(org.jboss.netty.channel.Channel) -> allocateId
    java.lang.Integer getId() -> getId
    org.jboss.netty.channel.Channel getParent() -> getParent
    org.jboss.netty.channel.ChannelFactory getFactory() -> getFactory
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
    org.jboss.netty.channel.ChannelFuture getSucceededFuture() -> getSucceededFuture
    org.jboss.netty.channel.ChannelFuture getUnsupportedOperationFuture() -> getUnsupportedOperationFuture
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.channel.Channel) -> compareTo
    boolean isOpen() -> isOpen
    boolean setClosed() -> setClosed
    org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress) -> bind
    org.jboss.netty.channel.ChannelFuture unbind() -> unbind
    org.jboss.netty.channel.ChannelFuture close() -> close
    org.jboss.netty.channel.ChannelFuture getCloseFuture() -> getCloseFuture
    org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress) -> connect
    org.jboss.netty.channel.ChannelFuture disconnect() -> disconnect
    int getInterestOps() -> getInterestOps
    org.jboss.netty.channel.ChannelFuture setInterestOps(int) -> setInterestOps
    int getInternalInterestOps() -> getInternalInterestOps
    void setInternalInterestOps(int) -> setInternalInterestOps
    boolean isReadable() -> isReadable
    boolean isWritable() -> isWritable
    boolean getUserDefinedWritability(int) -> getUserDefinedWritability
    void setUserDefinedWritability(int,boolean) -> setUserDefinedWritability
    void setUserDefinedWritability(int) -> setUserDefinedWritability
    void clearUserDefinedWritability(int) -> clearUserDefinedWritability
    int writabilityMask(int) -> writabilityMask
    boolean setWritable() -> setWritable
    boolean setUnwritable() -> setUnwritable
    org.jboss.netty.channel.ChannelFuture setReadable(boolean) -> setReadable
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object) -> write
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress) -> write
    java.lang.Object getAttachment() -> getAttachment
    void setAttachment(java.lang.Object) -> setAttachment
    java.lang.String toString() -> toString
    java.lang.String getIdString() -> getIdString
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.channel.AbstractChannel$ChannelCloseFuture -> org.jboss.netty.channel.AbstractChannel$ChannelCloseFuture:
    org.jboss.netty.channel.AbstractChannel this$0 -> this$0
    boolean setSuccess() -> setSuccess
    boolean setFailure(java.lang.Throwable) -> setFailure
    boolean setClosed() -> setClosed
org.jboss.netty.channel.AbstractChannelSink -> org.jboss.netty.channel.AbstractChannelSink:
    void exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException) -> exceptionCaught
    boolean isFireExceptionCaughtLater(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable) -> isFireExceptionCaughtLater
    org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable) -> execute
org.jboss.netty.channel.AbstractServerChannel -> org.jboss.netty.channel.AbstractServerChannel:
    org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress) -> connect
    org.jboss.netty.channel.ChannelFuture disconnect() -> disconnect
    int getInterestOps() -> getInterestOps
    org.jboss.netty.channel.ChannelFuture setInterestOps(int) -> setInterestOps
    void setInternalInterestOps(int) -> setInternalInterestOps
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object) -> write
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress) -> write
    boolean isConnected() -> isConnected
org.jboss.netty.channel.AdaptiveReceiveBufferSizePredictor -> org.jboss.netty.channel.AdaptiveReceiveBufferSizePredictor:
    int DEFAULT_MINIMUM -> DEFAULT_MINIMUM
    int DEFAULT_INITIAL -> DEFAULT_INITIAL
    int DEFAULT_MAXIMUM -> DEFAULT_MAXIMUM
    int INDEX_INCREMENT -> INDEX_INCREMENT
    int INDEX_DECREMENT -> INDEX_DECREMENT
    int[] SIZE_TABLE -> SIZE_TABLE
    int minIndex -> minIndex
    int maxIndex -> maxIndex
    int index -> index
    int nextReceiveBufferSize -> nextReceiveBufferSize
    boolean decreaseNow -> decreaseNow
    int getSizeTableIndex(int) -> getSizeTableIndex
    int nextReceiveBufferSize() -> nextReceiveBufferSize
    void previousReceiveBufferSize(int) -> previousReceiveBufferSize
org.jboss.netty.channel.AdaptiveReceiveBufferSizePredictorFactory -> org.jboss.netty.channel.AdaptiveReceiveBufferSizePredictorFactory:
    int minimum -> minimum
    int initial -> initial
    int maximum -> maximum
    org.jboss.netty.channel.ReceiveBufferSizePredictor getPredictor() -> getPredictor
org.jboss.netty.channel.Channel -> org.jboss.netty.channel.Channel:
    int OP_NONE -> OP_NONE
    int OP_READ -> OP_READ
    int OP_WRITE -> OP_WRITE
    int OP_READ_WRITE -> OP_READ_WRITE
    java.lang.Integer getId() -> getId
    org.jboss.netty.channel.ChannelFactory getFactory() -> getFactory
    org.jboss.netty.channel.Channel getParent() -> getParent
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
    boolean isOpen() -> isOpen
    boolean isBound() -> isBound
    boolean isConnected() -> isConnected
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object) -> write
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress) -> write
    org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress) -> bind
    org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress) -> connect
    org.jboss.netty.channel.ChannelFuture disconnect() -> disconnect
    org.jboss.netty.channel.ChannelFuture unbind() -> unbind
    org.jboss.netty.channel.ChannelFuture close() -> close
    org.jboss.netty.channel.ChannelFuture getCloseFuture() -> getCloseFuture
    int getInterestOps() -> getInterestOps
    boolean isReadable() -> isReadable
    boolean isWritable() -> isWritable
    org.jboss.netty.channel.ChannelFuture setInterestOps(int) -> setInterestOps
    org.jboss.netty.channel.ChannelFuture setReadable(boolean) -> setReadable
    boolean getUserDefinedWritability(int) -> getUserDefinedWritability
    void setUserDefinedWritability(int,boolean) -> setUserDefinedWritability
    java.lang.Object getAttachment() -> getAttachment
    void setAttachment(java.lang.Object) -> setAttachment
org.jboss.netty.channel.ChannelConfig -> org.jboss.netty.channel.ChannelConfig:
    void setOptions(java.util.Map) -> setOptions
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    org.jboss.netty.buffer.ChannelBufferFactory getBufferFactory() -> getBufferFactory
    void setBufferFactory(org.jboss.netty.buffer.ChannelBufferFactory) -> setBufferFactory
    org.jboss.netty.channel.ChannelPipelineFactory getPipelineFactory() -> getPipelineFactory
    void setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory) -> setPipelineFactory
    int getConnectTimeoutMillis() -> getConnectTimeoutMillis
    void setConnectTimeoutMillis(int) -> setConnectTimeoutMillis
org.jboss.netty.channel.ChannelDownstreamHandler -> org.jboss.netty.channel.ChannelDownstreamHandler:
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
org.jboss.netty.channel.ChannelEvent -> org.jboss.netty.channel.ChannelEvent:
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
org.jboss.netty.channel.ChannelException -> org.jboss.netty.channel.ChannelException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.channel.ChannelFactory -> org.jboss.netty.channel.ChannelFactory:
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void shutdown() -> shutdown
    void releaseExternalResources() -> releaseExternalResources
org.jboss.netty.channel.ChannelFuture -> org.jboss.netty.channel.ChannelFuture:
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    boolean isDone() -> isDone
    boolean isCancelled() -> isCancelled
    boolean isSuccess() -> isSuccess
    java.lang.Throwable getCause() -> getCause
    boolean cancel() -> cancel
    boolean setSuccess() -> setSuccess
    boolean setFailure(java.lang.Throwable) -> setFailure
    boolean setProgress(long,long,long) -> setProgress
    void addListener(org.jboss.netty.channel.ChannelFutureListener) -> addListener
    void removeListener(org.jboss.netty.channel.ChannelFutureListener) -> removeListener
    org.jboss.netty.channel.ChannelFuture sync() -> sync
    org.jboss.netty.channel.ChannelFuture syncUninterruptibly() -> syncUninterruptibly
    org.jboss.netty.channel.ChannelFuture await() -> await
    org.jboss.netty.channel.ChannelFuture awaitUninterruptibly() -> awaitUninterruptibly
    boolean await(long,java.util.concurrent.TimeUnit) -> await
    boolean await(long) -> await
    boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    boolean awaitUninterruptibly(long) -> awaitUninterruptibly
org.jboss.netty.channel.ChannelFutureListener -> org.jboss.netty.channel.ChannelFutureListener:
    org.jboss.netty.channel.ChannelFutureListener CLOSE -> CLOSE
    org.jboss.netty.channel.ChannelFutureListener CLOSE_ON_FAILURE -> CLOSE_ON_FAILURE
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.ChannelFutureListener$1 -> org.jboss.netty.channel.ChannelFutureListener$1:
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.ChannelFutureListener$2 -> org.jboss.netty.channel.ChannelFutureListener$2:
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.ChannelFutureNotifier -> org.jboss.netty.channel.ChannelFutureNotifier:
    org.jboss.netty.channel.ChannelFuture future -> future
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.ChannelFutureProgressListener -> org.jboss.netty.channel.ChannelFutureProgressListener:
    void operationProgressed(org.jboss.netty.channel.ChannelFuture,long,long,long) -> operationProgressed
org.jboss.netty.channel.ChannelHandler -> org.jboss.netty.channel.ChannelHandler:
org.jboss.netty.channel.ChannelHandler$Sharable -> org.jboss.netty.channel.ChannelHandler$Sharable:
org.jboss.netty.channel.ChannelHandlerContext -> org.jboss.netty.channel.ChannelHandlerContext:
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
    java.lang.String getName() -> getName
    org.jboss.netty.channel.ChannelHandler getHandler() -> getHandler
    boolean canHandleUpstream() -> canHandleUpstream
    boolean canHandleDownstream() -> canHandleDownstream
    void sendUpstream(org.jboss.netty.channel.ChannelEvent) -> sendUpstream
    void sendDownstream(org.jboss.netty.channel.ChannelEvent) -> sendDownstream
    java.lang.Object getAttachment() -> getAttachment
    void setAttachment(java.lang.Object) -> setAttachment
org.jboss.netty.channel.ChannelHandlerLifeCycleException -> org.jboss.netty.channel.ChannelHandlerLifeCycleException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.channel.ChannelLocal -> org.jboss.netty.channel.ChannelLocal:
    java.util.concurrent.ConcurrentMap map -> map
    org.jboss.netty.channel.ChannelFutureListener remover -> remover
    boolean removeOnClose -> removeOnClose
    java.lang.Object initialValue(org.jboss.netty.channel.Channel) -> initialValue
    java.lang.Object get(org.jboss.netty.channel.Channel) -> get
    java.lang.Object set(org.jboss.netty.channel.Channel,java.lang.Object) -> set
    java.lang.Object setIfAbsent(org.jboss.netty.channel.Channel,java.lang.Object) -> setIfAbsent
    java.lang.Object remove(org.jboss.netty.channel.Channel) -> remove
    java.util.Iterator iterator() -> iterator
org.jboss.netty.channel.ChannelLocal$1 -> org.jboss.netty.channel.ChannelLocal$1:
    org.jboss.netty.channel.ChannelLocal this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.ChannelPipeline -> org.jboss.netty.channel.ChannelPipeline:
    void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler) -> addFirst
    void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler) -> addLast
    void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> addBefore
    void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> addAfter
    void remove(org.jboss.netty.channel.ChannelHandler) -> remove
    org.jboss.netty.channel.ChannelHandler remove(java.lang.String) -> remove
    org.jboss.netty.channel.ChannelHandler remove(java.lang.Class) -> remove
    org.jboss.netty.channel.ChannelHandler removeFirst() -> removeFirst
    org.jboss.netty.channel.ChannelHandler removeLast() -> removeLast
    void replace(org.jboss.netty.channel.ChannelHandler,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> replace
    org.jboss.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> replace
    org.jboss.netty.channel.ChannelHandler replace(java.lang.Class,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> replace
    org.jboss.netty.channel.ChannelHandler getFirst() -> getFirst
    org.jboss.netty.channel.ChannelHandler getLast() -> getLast
    org.jboss.netty.channel.ChannelHandler get(java.lang.String) -> get
    org.jboss.netty.channel.ChannelHandler get(java.lang.Class) -> get
    org.jboss.netty.channel.ChannelHandlerContext getContext(org.jboss.netty.channel.ChannelHandler) -> getContext
    org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String) -> getContext
    org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.Class) -> getContext
    void sendUpstream(org.jboss.netty.channel.ChannelEvent) -> sendUpstream
    void sendDownstream(org.jboss.netty.channel.ChannelEvent) -> sendDownstream
    org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable) -> execute
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelSink getSink() -> getSink
    void attach(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelSink) -> attach
    boolean isAttached() -> isAttached
    java.util.List getNames() -> getNames
    java.util.Map toMap() -> toMap
org.jboss.netty.channel.ChannelPipelineException -> org.jboss.netty.channel.ChannelPipelineException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.channel.ChannelPipelineFactory -> org.jboss.netty.channel.ChannelPipelineFactory:
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
org.jboss.netty.channel.ChannelSink -> org.jboss.netty.channel.ChannelSink:
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException) -> exceptionCaught
    org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable) -> execute
org.jboss.netty.channel.ChannelState -> org.jboss.netty.channel.ChannelState:
    org.jboss.netty.channel.ChannelState OPEN -> OPEN
    org.jboss.netty.channel.ChannelState BOUND -> BOUND
    org.jboss.netty.channel.ChannelState CONNECTED -> CONNECTED
    org.jboss.netty.channel.ChannelState INTEREST_OPS -> INTEREST_OPS
    org.jboss.netty.channel.ChannelState[] $VALUES -> $VALUES
    org.jboss.netty.channel.ChannelState[] values() -> values
    org.jboss.netty.channel.ChannelState valueOf(java.lang.String) -> valueOf
org.jboss.netty.channel.ChannelStateEvent -> org.jboss.netty.channel.ChannelStateEvent:
    org.jboss.netty.channel.ChannelState getState() -> getState
    java.lang.Object getValue() -> getValue
org.jboss.netty.channel.ChannelUpstreamHandler -> org.jboss.netty.channel.ChannelUpstreamHandler:
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
org.jboss.netty.channel.Channels -> org.jboss.netty.channel.Channels:
    org.jboss.netty.channel.ChannelPipeline pipeline() -> pipeline
    org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelHandler[]) -> pipeline
    org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelPipeline) -> pipeline
    org.jboss.netty.channel.ChannelPipelineFactory pipelineFactory(org.jboss.netty.channel.ChannelPipeline) -> pipelineFactory
    org.jboss.netty.channel.ChannelFuture future(org.jboss.netty.channel.Channel) -> future
    org.jboss.netty.channel.ChannelFuture future(org.jboss.netty.channel.Channel,boolean) -> future
    org.jboss.netty.channel.ChannelFuture succeededFuture(org.jboss.netty.channel.Channel) -> succeededFuture
    org.jboss.netty.channel.ChannelFuture failedFuture(org.jboss.netty.channel.Channel,java.lang.Throwable) -> failedFuture
    void fireChannelOpen(org.jboss.netty.channel.Channel) -> fireChannelOpen
    void fireChannelOpen(org.jboss.netty.channel.ChannelHandlerContext) -> fireChannelOpen
    void fireChannelBound(org.jboss.netty.channel.Channel,java.net.SocketAddress) -> fireChannelBound
    void fireChannelBound(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress) -> fireChannelBound
    void fireChannelConnected(org.jboss.netty.channel.Channel,java.net.SocketAddress) -> fireChannelConnected
    void fireChannelConnected(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress) -> fireChannelConnected
    void fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object) -> fireMessageReceived
    void fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress) -> fireMessageReceived
    void fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object) -> fireMessageReceived
    void fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress) -> fireMessageReceived
    org.jboss.netty.channel.ChannelFuture fireWriteCompleteLater(org.jboss.netty.channel.Channel,long) -> fireWriteCompleteLater
    void fireWriteComplete(org.jboss.netty.channel.Channel,long) -> fireWriteComplete
    void fireWriteComplete(org.jboss.netty.channel.ChannelHandlerContext,long) -> fireWriteComplete
    org.jboss.netty.channel.ChannelFuture fireChannelInterestChangedLater(org.jboss.netty.channel.Channel) -> fireChannelInterestChangedLater
    void fireChannelInterestChanged(org.jboss.netty.channel.Channel) -> fireChannelInterestChanged
    void fireChannelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext) -> fireChannelInterestChanged
    org.jboss.netty.channel.ChannelFuture fireChannelDisconnectedLater(org.jboss.netty.channel.Channel) -> fireChannelDisconnectedLater
    void fireChannelDisconnected(org.jboss.netty.channel.Channel) -> fireChannelDisconnected
    void fireChannelDisconnected(org.jboss.netty.channel.ChannelHandlerContext) -> fireChannelDisconnected
    org.jboss.netty.channel.ChannelFuture fireChannelUnboundLater(org.jboss.netty.channel.Channel) -> fireChannelUnboundLater
    void fireChannelUnbound(org.jboss.netty.channel.Channel) -> fireChannelUnbound
    void fireChannelUnbound(org.jboss.netty.channel.ChannelHandlerContext) -> fireChannelUnbound
    org.jboss.netty.channel.ChannelFuture fireChannelClosedLater(org.jboss.netty.channel.Channel) -> fireChannelClosedLater
    void fireChannelClosed(org.jboss.netty.channel.Channel) -> fireChannelClosed
    void fireChannelClosed(org.jboss.netty.channel.ChannelHandlerContext) -> fireChannelClosed
    org.jboss.netty.channel.ChannelFuture fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable) -> fireExceptionCaughtLater
    org.jboss.netty.channel.ChannelFuture fireExceptionCaughtLater(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable) -> fireExceptionCaughtLater
    void fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable) -> fireExceptionCaught
    void fireExceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable) -> fireExceptionCaught
    void fireChildChannelStateChanged(org.jboss.netty.channel.Channel,org.jboss.netty.channel.Channel) -> fireChildChannelStateChanged
    org.jboss.netty.channel.ChannelFuture bind(org.jboss.netty.channel.Channel,java.net.SocketAddress) -> bind
    void bind(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> bind
    void unbind(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture) -> unbind
    org.jboss.netty.channel.ChannelFuture unbind(org.jboss.netty.channel.Channel) -> unbind
    org.jboss.netty.channel.ChannelFuture connect(org.jboss.netty.channel.Channel,java.net.SocketAddress) -> connect
    void connect(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> connect
    org.jboss.netty.channel.ChannelFuture write(org.jboss.netty.channel.Channel,java.lang.Object) -> write
    void write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object) -> write
    org.jboss.netty.channel.ChannelFuture write(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress) -> write
    void write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress) -> write
    org.jboss.netty.channel.ChannelFuture setInterestOps(org.jboss.netty.channel.Channel,int) -> setInterestOps
    void setInterestOps(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int) -> setInterestOps
    org.jboss.netty.channel.ChannelFuture disconnect(org.jboss.netty.channel.Channel) -> disconnect
    void disconnect(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture) -> disconnect
    org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel) -> close
    void close(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture) -> close
    void validateInterestOps(int) -> validateInterestOps
    int filterDownstreamInterestOps(int) -> filterDownstreamInterestOps
org.jboss.netty.channel.Channels$1 -> org.jboss.netty.channel.Channels$1:
    org.jboss.netty.channel.ChannelPipeline val$pipeline -> val$pipeline
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
org.jboss.netty.channel.Channels$2 -> org.jboss.netty.channel.Channels$2:
    org.jboss.netty.channel.Channel val$channel -> val$channel
    long val$amount -> val$amount
    void run() -> run
org.jboss.netty.channel.Channels$3 -> org.jboss.netty.channel.Channels$3:
    org.jboss.netty.channel.Channel val$channel -> val$channel
    void run() -> run
org.jboss.netty.channel.Channels$4 -> org.jboss.netty.channel.Channels$4:
    org.jboss.netty.channel.Channel val$channel -> val$channel
    void run() -> run
org.jboss.netty.channel.Channels$5 -> org.jboss.netty.channel.Channels$5:
    org.jboss.netty.channel.Channel val$channel -> val$channel
    void run() -> run
org.jboss.netty.channel.Channels$6 -> org.jboss.netty.channel.Channels$6:
    org.jboss.netty.channel.Channel val$channel -> val$channel
    void run() -> run
org.jboss.netty.channel.Channels$7 -> org.jboss.netty.channel.Channels$7:
    org.jboss.netty.channel.Channel val$channel -> val$channel
    java.lang.Throwable val$cause -> val$cause
    void run() -> run
org.jboss.netty.channel.Channels$8 -> org.jboss.netty.channel.Channels$8:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    java.lang.Throwable val$cause -> val$cause
    void run() -> run
org.jboss.netty.channel.ChildChannelStateEvent -> org.jboss.netty.channel.ChildChannelStateEvent:
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.Channel getChildChannel() -> getChildChannel
org.jboss.netty.channel.CompleteChannelFuture -> org.jboss.netty.channel.CompleteChannelFuture:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.Channel channel -> channel
    void addListener(org.jboss.netty.channel.ChannelFutureListener) -> addListener
    void removeListener(org.jboss.netty.channel.ChannelFutureListener) -> removeListener
    org.jboss.netty.channel.ChannelFuture await() -> await
    boolean await(long,java.util.concurrent.TimeUnit) -> await
    boolean await(long) -> await
    org.jboss.netty.channel.ChannelFuture awaitUninterruptibly() -> awaitUninterruptibly
    boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    boolean awaitUninterruptibly(long) -> awaitUninterruptibly
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    boolean isDone() -> isDone
    boolean setProgress(long,long,long) -> setProgress
    boolean setFailure(java.lang.Throwable) -> setFailure
    boolean setSuccess() -> setSuccess
    boolean cancel() -> cancel
    boolean isCancelled() -> isCancelled
org.jboss.netty.channel.ConnectTimeoutException -> org.jboss.netty.channel.ConnectTimeoutException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.channel.DefaultChannelConfig -> org.jboss.netty.channel.DefaultChannelConfig:
    org.jboss.netty.buffer.ChannelBufferFactory bufferFactory -> bufferFactory
    int connectTimeoutMillis -> connectTimeoutMillis
    void setOptions(java.util.Map) -> setOptions
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    int getConnectTimeoutMillis() -> getConnectTimeoutMillis
    org.jboss.netty.buffer.ChannelBufferFactory getBufferFactory() -> getBufferFactory
    void setBufferFactory(org.jboss.netty.buffer.ChannelBufferFactory) -> setBufferFactory
    org.jboss.netty.channel.ChannelPipelineFactory getPipelineFactory() -> getPipelineFactory
    void setConnectTimeoutMillis(int) -> setConnectTimeoutMillis
    void setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory) -> setPipelineFactory
org.jboss.netty.channel.DefaultChannelFuture -> org.jboss.netty.channel.DefaultChannelFuture:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.Throwable CANCELLED -> CANCELLED
    boolean useDeadLockChecker -> useDeadLockChecker
    boolean disabledDeadLockCheckerOnce -> disabledDeadLockCheckerOnce
    org.jboss.netty.channel.Channel channel -> channel
    boolean cancellable -> cancellable
    org.jboss.netty.channel.ChannelFutureListener firstListener -> firstListener
    java.util.List otherListeners -> otherListeners
    java.util.List progressListeners -> progressListeners
    boolean done -> done
    java.lang.Throwable cause -> cause
    int waiters -> waiters
    boolean isUseDeadLockChecker() -> isUseDeadLockChecker
    void setUseDeadLockChecker(boolean) -> setUseDeadLockChecker
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    boolean isDone() -> isDone
    boolean isSuccess() -> isSuccess
    java.lang.Throwable getCause() -> getCause
    boolean isCancelled() -> isCancelled
    void addListener(org.jboss.netty.channel.ChannelFutureListener) -> addListener
    void removeListener(org.jboss.netty.channel.ChannelFutureListener) -> removeListener
    org.jboss.netty.channel.ChannelFuture sync() -> sync
    org.jboss.netty.channel.ChannelFuture syncUninterruptibly() -> syncUninterruptibly
    void rethrowIfFailed0() -> rethrowIfFailed0
    org.jboss.netty.channel.ChannelFuture await() -> await
    boolean await(long,java.util.concurrent.TimeUnit) -> await
    boolean await(long) -> await
    org.jboss.netty.channel.ChannelFuture awaitUninterruptibly() -> awaitUninterruptibly
    boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    boolean awaitUninterruptibly(long) -> awaitUninterruptibly
    boolean await0(long,boolean) -> await0
    void checkDeadLock() -> checkDeadLock
    boolean setSuccess() -> setSuccess
    boolean setFailure(java.lang.Throwable) -> setFailure
    boolean cancel() -> cancel
    void notifyListeners() -> notifyListeners
    void notifyListener(org.jboss.netty.channel.ChannelFutureListener) -> notifyListener
    boolean setProgress(long,long,long) -> setProgress
    void notifyProgressListener(org.jboss.netty.channel.ChannelFutureProgressListener,long,long,long) -> notifyProgressListener
org.jboss.netty.channel.DefaultChannelPipeline -> org.jboss.netty.channel.DefaultChannelPipeline:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.ChannelSink discardingSink -> discardingSink
    org.jboss.netty.channel.Channel channel -> channel
    org.jboss.netty.channel.ChannelSink sink -> sink
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext head -> head
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext tail -> tail
    java.util.Map name2ctx -> name2ctx
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelSink getSink() -> getSink
    void attach(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelSink) -> attach
    boolean isAttached() -> isAttached
    void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler) -> addFirst
    void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler) -> addLast
    void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> addBefore
    void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> addAfter
    void remove(org.jboss.netty.channel.ChannelHandler) -> remove
    org.jboss.netty.channel.ChannelHandler remove(java.lang.String) -> remove
    org.jboss.netty.channel.ChannelHandler remove(java.lang.Class) -> remove
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext) -> remove
    org.jboss.netty.channel.ChannelHandler removeFirst() -> removeFirst
    org.jboss.netty.channel.ChannelHandler removeLast() -> removeLast
    void replace(org.jboss.netty.channel.ChannelHandler,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> replace
    org.jboss.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> replace
    org.jboss.netty.channel.ChannelHandler replace(java.lang.Class,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> replace
    org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler) -> replace
    void callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> callBeforeAdd
    void callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> callAfterAdd
    void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> callBeforeRemove
    void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> callAfterRemove
    org.jboss.netty.channel.ChannelHandler getFirst() -> getFirst
    org.jboss.netty.channel.ChannelHandler getLast() -> getLast
    org.jboss.netty.channel.ChannelHandler get(java.lang.String) -> get
    org.jboss.netty.channel.ChannelHandler get(java.lang.Class) -> get
    org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String) -> getContext
    org.jboss.netty.channel.ChannelHandlerContext getContext(org.jboss.netty.channel.ChannelHandler) -> getContext
    org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.Class) -> getContext
    java.util.List getNames() -> getNames
    java.util.Map toMap() -> toMap
    java.lang.String toString() -> toString
    void sendUpstream(org.jboss.netty.channel.ChannelEvent) -> sendUpstream
    void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> sendUpstream
    void sendDownstream(org.jboss.netty.channel.ChannelEvent) -> sendDownstream
    void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> sendDownstream
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext getActualUpstreamContext(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext) -> getActualUpstreamContext
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext getActualDownstreamContext(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext) -> getActualDownstreamContext
    org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable) -> execute
    void notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable) -> notifyHandlerException
    void init(java.lang.String,org.jboss.netty.channel.ChannelHandler) -> init
    void checkDuplicateName(java.lang.String) -> checkDuplicateName
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext getContextOrDie(java.lang.String) -> getContextOrDie
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext getContextOrDie(org.jboss.netty.channel.ChannelHandler) -> getContextOrDie
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext getContextOrDie(java.lang.Class) -> getContextOrDie
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext access$000(org.jboss.netty.channel.DefaultChannelPipeline,org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext) -> access$000
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext access$100(org.jboss.netty.channel.DefaultChannelPipeline,org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext) -> access$100
org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext -> org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext next -> next
    org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext prev -> prev
    java.lang.String name -> name
    org.jboss.netty.channel.ChannelHandler handler -> handler
    boolean canHandleUpstream -> canHandleUpstream
    boolean canHandleDownstream -> canHandleDownstream
    java.lang.Object attachment -> attachment
    org.jboss.netty.channel.DefaultChannelPipeline this$0 -> this$0
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
    boolean canHandleDownstream() -> canHandleDownstream
    boolean canHandleUpstream() -> canHandleUpstream
    org.jboss.netty.channel.ChannelHandler getHandler() -> getHandler
    java.lang.String getName() -> getName
    java.lang.Object getAttachment() -> getAttachment
    void setAttachment(java.lang.Object) -> setAttachment
    void sendDownstream(org.jboss.netty.channel.ChannelEvent) -> sendDownstream
    void sendUpstream(org.jboss.netty.channel.ChannelEvent) -> sendUpstream
org.jboss.netty.channel.DefaultChannelPipeline$DiscardingChannelSink -> org.jboss.netty.channel.DefaultChannelPipeline$DiscardingChannelSink:
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException) -> exceptionCaught
    org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable) -> execute
org.jboss.netty.channel.DefaultChildChannelStateEvent -> org.jboss.netty.channel.DefaultChildChannelStateEvent:
    org.jboss.netty.channel.Channel parentChannel -> parentChannel
    org.jboss.netty.channel.Channel childChannel -> childChannel
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
    org.jboss.netty.channel.Channel getChildChannel() -> getChildChannel
    java.lang.String toString() -> toString
org.jboss.netty.channel.DefaultExceptionEvent -> org.jboss.netty.channel.DefaultExceptionEvent:
    org.jboss.netty.channel.Channel channel -> channel
    java.lang.Throwable cause -> cause
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
    java.lang.Throwable getCause() -> getCause
    java.lang.String toString() -> toString
org.jboss.netty.channel.DefaultFileRegion -> org.jboss.netty.channel.DefaultFileRegion:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.nio.channels.FileChannel file -> file
    long position -> position
    long count -> count
    boolean releaseAfterTransfer -> releaseAfterTransfer
    long getPosition() -> getPosition
    long getCount() -> getCount
    boolean releaseAfterTransfer() -> releaseAfterTransfer
    long transferTo(java.nio.channels.WritableByteChannel,long) -> transferTo
    void releaseExternalResources() -> releaseExternalResources
org.jboss.netty.channel.DefaultServerChannelConfig -> org.jboss.netty.channel.DefaultServerChannelConfig:
    org.jboss.netty.channel.ChannelPipelineFactory pipelineFactory -> pipelineFactory
    org.jboss.netty.buffer.ChannelBufferFactory bufferFactory -> bufferFactory
    void setOptions(java.util.Map) -> setOptions
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    org.jboss.netty.channel.ChannelPipelineFactory getPipelineFactory() -> getPipelineFactory
    void setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory) -> setPipelineFactory
    org.jboss.netty.buffer.ChannelBufferFactory getBufferFactory() -> getBufferFactory
    void setBufferFactory(org.jboss.netty.buffer.ChannelBufferFactory) -> setBufferFactory
    int getConnectTimeoutMillis() -> getConnectTimeoutMillis
    void setConnectTimeoutMillis(int) -> setConnectTimeoutMillis
org.jboss.netty.channel.DefaultWriteCompletionEvent -> org.jboss.netty.channel.DefaultWriteCompletionEvent:
    org.jboss.netty.channel.Channel channel -> channel
    long writtenAmount -> writtenAmount
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
    long getWrittenAmount() -> getWrittenAmount
    java.lang.String toString() -> toString
org.jboss.netty.channel.DownstreamChannelStateEvent -> org.jboss.netty.channel.DownstreamChannelStateEvent:
    org.jboss.netty.channel.Channel channel -> channel
    org.jboss.netty.channel.ChannelFuture future -> future
    org.jboss.netty.channel.ChannelState state -> state
    java.lang.Object value -> value
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
    org.jboss.netty.channel.ChannelState getState() -> getState
    java.lang.Object getValue() -> getValue
    java.lang.String toString() -> toString
org.jboss.netty.channel.DownstreamChannelStateEvent$1 -> org.jboss.netty.channel.DownstreamChannelStateEvent$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.DownstreamMessageEvent -> org.jboss.netty.channel.DownstreamMessageEvent:
    org.jboss.netty.channel.Channel channel -> channel
    org.jboss.netty.channel.ChannelFuture future -> future
    java.lang.Object message -> message
    java.net.SocketAddress remoteAddress -> remoteAddress
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
    java.lang.Object getMessage() -> getMessage
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.lang.String toString() -> toString
org.jboss.netty.channel.ExceptionEvent -> org.jboss.netty.channel.ExceptionEvent:
    java.lang.Throwable getCause() -> getCause
org.jboss.netty.channel.FailedChannelFuture -> org.jboss.netty.channel.FailedChannelFuture:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
    boolean isSuccess() -> isSuccess
    org.jboss.netty.channel.ChannelFuture sync() -> sync
    org.jboss.netty.channel.ChannelFuture syncUninterruptibly() -> syncUninterruptibly
    void rethrow() -> rethrow
org.jboss.netty.channel.FileRegion -> org.jboss.netty.channel.FileRegion:
    long getPosition() -> getPosition
    long getCount() -> getCount
    long transferTo(java.nio.channels.WritableByteChannel,long) -> transferTo
org.jboss.netty.channel.FixedReceiveBufferSizePredictor -> org.jboss.netty.channel.FixedReceiveBufferSizePredictor:
    int bufferSize -> bufferSize
    int nextReceiveBufferSize() -> nextReceiveBufferSize
    void previousReceiveBufferSize(int) -> previousReceiveBufferSize
org.jboss.netty.channel.FixedReceiveBufferSizePredictorFactory -> org.jboss.netty.channel.FixedReceiveBufferSizePredictorFactory:
    org.jboss.netty.channel.ReceiveBufferSizePredictor predictor -> predictor
    org.jboss.netty.channel.ReceiveBufferSizePredictor getPredictor() -> getPredictor
org.jboss.netty.channel.LifeCycleAwareChannelHandler -> org.jboss.netty.channel.LifeCycleAwareChannelHandler:
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.channel.MessageEvent -> org.jboss.netty.channel.MessageEvent:
    java.lang.Object getMessage() -> getMessage
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
org.jboss.netty.channel.ReceiveBufferSizePredictor -> org.jboss.netty.channel.ReceiveBufferSizePredictor:
    int nextReceiveBufferSize() -> nextReceiveBufferSize
    void previousReceiveBufferSize(int) -> previousReceiveBufferSize
org.jboss.netty.channel.ReceiveBufferSizePredictorFactory -> org.jboss.netty.channel.ReceiveBufferSizePredictorFactory:
    org.jboss.netty.channel.ReceiveBufferSizePredictor getPredictor() -> getPredictor
org.jboss.netty.channel.ServerChannel -> org.jboss.netty.channel.ServerChannel:
org.jboss.netty.channel.ServerChannelFactory -> org.jboss.netty.channel.ServerChannelFactory:
    org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.SimpleChannelDownstreamHandler -> org.jboss.netty.channel.SimpleChannelDownstreamHandler:
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> writeRequested
    void bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> bindRequested
    void connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> connectRequested
    void setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> setInterestOpsRequested
    void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> disconnectRequested
    void unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> unbindRequested
    void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> closeRequested
org.jboss.netty.channel.SimpleChannelDownstreamHandler$1 -> org.jboss.netty.channel.SimpleChannelDownstreamHandler$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.SimpleChannelHandler -> org.jboss.netty.channel.SimpleChannelHandler:
    org.jboss.netty.logging.InternalLogger logger -> logger
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelOpen
    void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelBound
    void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelConnected
    void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelInterestChanged
    void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelDisconnected
    void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelUnbound
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent) -> writeComplete
    void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent) -> childChannelOpen
    void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent) -> childChannelClosed
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> writeRequested
    void bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> bindRequested
    void connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> connectRequested
    void setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> setInterestOpsRequested
    void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> disconnectRequested
    void unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> unbindRequested
    void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> closeRequested
org.jboss.netty.channel.SimpleChannelHandler$1 -> org.jboss.netty.channel.SimpleChannelHandler$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.SimpleChannelUpstreamHandler -> org.jboss.netty.channel.SimpleChannelUpstreamHandler:
    org.jboss.netty.logging.InternalLogger logger -> logger
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelOpen
    void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelBound
    void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelConnected
    void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelInterestChanged
    void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelDisconnected
    void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelUnbound
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent) -> writeComplete
    void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent) -> childChannelOpen
    void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent) -> childChannelClosed
org.jboss.netty.channel.SimpleChannelUpstreamHandler$1 -> org.jboss.netty.channel.SimpleChannelUpstreamHandler$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.SucceededChannelFuture -> org.jboss.netty.channel.SucceededChannelFuture:
    java.lang.Throwable getCause() -> getCause
    boolean isSuccess() -> isSuccess
    org.jboss.netty.channel.ChannelFuture sync() -> sync
    org.jboss.netty.channel.ChannelFuture syncUninterruptibly() -> syncUninterruptibly
org.jboss.netty.channel.UpstreamChannelStateEvent -> org.jboss.netty.channel.UpstreamChannelStateEvent:
    org.jboss.netty.channel.Channel channel -> channel
    org.jboss.netty.channel.ChannelState state -> state
    java.lang.Object value -> value
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
    org.jboss.netty.channel.ChannelState getState() -> getState
    java.lang.Object getValue() -> getValue
    java.lang.String toString() -> toString
org.jboss.netty.channel.UpstreamChannelStateEvent$1 -> org.jboss.netty.channel.UpstreamChannelStateEvent$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.UpstreamMessageEvent -> org.jboss.netty.channel.UpstreamMessageEvent:
    org.jboss.netty.channel.Channel channel -> channel
    java.lang.Object message -> message
    java.net.SocketAddress remoteAddress -> remoteAddress
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
    java.lang.Object getMessage() -> getMessage
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.lang.String toString() -> toString
org.jboss.netty.channel.WriteCompletionEvent -> org.jboss.netty.channel.WriteCompletionEvent:
    long getWrittenAmount() -> getWrittenAmount
org.jboss.netty.channel.group.ChannelGroup -> org.jboss.netty.channel.group.ChannelGroup:
    java.lang.String getName() -> getName
    org.jboss.netty.channel.Channel find(java.lang.Integer) -> find
    org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int) -> setInterestOps
    org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean) -> setReadable
    org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object) -> write
    org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress) -> write
    org.jboss.netty.channel.group.ChannelGroupFuture disconnect() -> disconnect
    org.jboss.netty.channel.group.ChannelGroupFuture unbind() -> unbind
    org.jboss.netty.channel.group.ChannelGroupFuture close() -> close
org.jboss.netty.channel.group.ChannelGroupFuture -> org.jboss.netty.channel.group.ChannelGroupFuture:
    org.jboss.netty.channel.group.ChannelGroup getGroup() -> getGroup
    org.jboss.netty.channel.ChannelFuture find(java.lang.Integer) -> find
    org.jboss.netty.channel.ChannelFuture find(org.jboss.netty.channel.Channel) -> find
    boolean isDone() -> isDone
    boolean isCompleteSuccess() -> isCompleteSuccess
    boolean isPartialSuccess() -> isPartialSuccess
    boolean isCompleteFailure() -> isCompleteFailure
    boolean isPartialFailure() -> isPartialFailure
    void addListener(org.jboss.netty.channel.group.ChannelGroupFutureListener) -> addListener
    void removeListener(org.jboss.netty.channel.group.ChannelGroupFutureListener) -> removeListener
    org.jboss.netty.channel.group.ChannelGroupFuture await() -> await
    org.jboss.netty.channel.group.ChannelGroupFuture awaitUninterruptibly() -> awaitUninterruptibly
    boolean await(long,java.util.concurrent.TimeUnit) -> await
    boolean await(long) -> await
    boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    boolean awaitUninterruptibly(long) -> awaitUninterruptibly
    java.util.Iterator iterator() -> iterator
org.jboss.netty.channel.group.ChannelGroupFutureListener -> org.jboss.netty.channel.group.ChannelGroupFutureListener:
    void operationComplete(org.jboss.netty.channel.group.ChannelGroupFuture) -> operationComplete
org.jboss.netty.channel.group.CombinedIterator -> org.jboss.netty.channel.group.CombinedIterator:
    java.util.Iterator i1 -> i1
    java.util.Iterator i2 -> i2
    java.util.Iterator currentIterator -> currentIterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.jboss.netty.channel.group.DefaultChannelGroup -> org.jboss.netty.channel.group.DefaultChannelGroup:
    java.util.concurrent.atomic.AtomicInteger nextId -> nextId
    java.lang.String name -> name
    java.util.concurrent.ConcurrentMap serverChannels -> serverChannels
    java.util.concurrent.ConcurrentMap nonServerChannels -> nonServerChannels
    org.jboss.netty.channel.ChannelFutureListener remover -> remover
    java.lang.String getName() -> getName
    boolean isEmpty() -> isEmpty
    int size() -> size
    org.jboss.netty.channel.Channel find(java.lang.Integer) -> find
    boolean contains(java.lang.Object) -> contains
    boolean add(org.jboss.netty.channel.Channel) -> add
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    org.jboss.netty.channel.group.ChannelGroupFuture close() -> close
    org.jboss.netty.channel.group.ChannelGroupFuture disconnect() -> disconnect
    org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int) -> setInterestOps
    org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean) -> setReadable
    org.jboss.netty.channel.group.ChannelGroupFuture unbind() -> unbind
    org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object) -> write
    org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress) -> write
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.channel.group.ChannelGroup) -> compareTo
    java.lang.String toString() -> toString
    boolean add(java.lang.Object) -> add
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.channel.group.DefaultChannelGroup$1 -> org.jboss.netty.channel.group.DefaultChannelGroup$1:
    org.jboss.netty.channel.group.DefaultChannelGroup this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.group.DefaultChannelGroupFuture -> org.jboss.netty.channel.group.DefaultChannelGroupFuture:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.group.ChannelGroup group -> group
    java.util.Map futures -> futures
    org.jboss.netty.channel.group.ChannelGroupFutureListener firstListener -> firstListener
    java.util.List otherListeners -> otherListeners
    boolean done -> done
    int successCount -> successCount
    int failureCount -> failureCount
    int waiters -> waiters
    org.jboss.netty.channel.ChannelFutureListener childListener -> childListener
    org.jboss.netty.channel.group.ChannelGroup getGroup() -> getGroup
    org.jboss.netty.channel.ChannelFuture find(java.lang.Integer) -> find
    org.jboss.netty.channel.ChannelFuture find(org.jboss.netty.channel.Channel) -> find
    java.util.Iterator iterator() -> iterator
    boolean isDone() -> isDone
    boolean isCompleteSuccess() -> isCompleteSuccess
    boolean isPartialSuccess() -> isPartialSuccess
    boolean isPartialFailure() -> isPartialFailure
    boolean isCompleteFailure() -> isCompleteFailure
    void addListener(org.jboss.netty.channel.group.ChannelGroupFutureListener) -> addListener
    void removeListener(org.jboss.netty.channel.group.ChannelGroupFutureListener) -> removeListener
    org.jboss.netty.channel.group.ChannelGroupFuture await() -> await
    boolean await(long,java.util.concurrent.TimeUnit) -> await
    boolean await(long) -> await
    org.jboss.netty.channel.group.ChannelGroupFuture awaitUninterruptibly() -> awaitUninterruptibly
    boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    boolean awaitUninterruptibly(long) -> awaitUninterruptibly
    boolean await0(long,boolean) -> await0
    void checkDeadLock() -> checkDeadLock
    boolean setDone() -> setDone
    void notifyListeners() -> notifyListeners
    void notifyListener(org.jboss.netty.channel.group.ChannelGroupFutureListener) -> notifyListener
org.jboss.netty.channel.group.DefaultChannelGroupFuture$1 -> org.jboss.netty.channel.group.DefaultChannelGroupFuture$1:
    boolean $assertionsDisabled -> $assertionsDisabled
    org.jboss.netty.channel.group.DefaultChannelGroupFuture this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.local.DefaultLocalChannel -> org.jboss.netty.channel.local.DefaultLocalChannel:
    int ST_OPEN -> ST_OPEN
    int ST_BOUND -> ST_BOUND
    int ST_CONNECTED -> ST_CONNECTED
    int ST_CLOSED -> ST_CLOSED
    java.util.concurrent.atomic.AtomicInteger state -> state
    org.jboss.netty.channel.ChannelConfig config -> config
    org.jboss.netty.util.internal.ThreadLocalBoolean delivering -> delivering
    java.util.Queue writeBuffer -> writeBuffer
    org.jboss.netty.channel.local.DefaultLocalChannel pairedChannel -> pairedChannel
    org.jboss.netty.channel.local.LocalAddress localAddress -> localAddress
    org.jboss.netty.channel.local.LocalAddress remoteAddress -> remoteAddress
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
    boolean isOpen() -> isOpen
    boolean isBound() -> isBound
    boolean isConnected() -> isConnected
    void setBound() -> setBound
    void setConnected() -> setConnected
    boolean setClosed() -> setClosed
    org.jboss.netty.channel.local.LocalAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.local.LocalAddress getRemoteAddress() -> getRemoteAddress
    void closeNow(org.jboss.netty.channel.ChannelFuture) -> closeNow
    void flushWriteBuffer() -> flushWriteBuffer
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
org.jboss.netty.channel.local.DefaultLocalChannel$1 -> org.jboss.netty.channel.local.DefaultLocalChannel$1:
    org.jboss.netty.channel.local.DefaultLocalChannel this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.local.DefaultLocalClientChannelFactory -> org.jboss.netty.channel.local.DefaultLocalClientChannelFactory:
    org.jboss.netty.channel.ChannelSink sink -> sink
    org.jboss.netty.channel.local.LocalChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void releaseExternalResources() -> releaseExternalResources
    void shutdown() -> shutdown
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.local.DefaultLocalServerChannel -> org.jboss.netty.channel.local.DefaultLocalServerChannel:
    org.jboss.netty.channel.ChannelConfig channelConfig -> channelConfig
    java.util.concurrent.atomic.AtomicBoolean bound -> bound
    org.jboss.netty.channel.local.LocalAddress localAddress -> localAddress
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
    boolean isBound() -> isBound
    org.jboss.netty.channel.local.LocalAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.local.LocalAddress getRemoteAddress() -> getRemoteAddress
    boolean setClosed() -> setClosed
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
org.jboss.netty.channel.local.DefaultLocalServerChannelFactory -> org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:
    org.jboss.netty.channel.group.DefaultChannelGroup group -> group
    org.jboss.netty.channel.ChannelSink sink -> sink
    org.jboss.netty.channel.local.LocalServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void releaseExternalResources() -> releaseExternalResources
    void shutdown() -> shutdown
    org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.local.LocalAddress -> org.jboss.netty.channel.local.LocalAddress:
    long serialVersionUID -> serialVersionUID
    java.lang.String EPHEMERAL -> EPHEMERAL
    java.lang.String id -> id
    boolean ephemeral -> ephemeral
    java.lang.String getId() -> getId
    boolean isEphemeral() -> isEphemeral
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.channel.local.LocalAddress) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.channel.local.LocalChannel -> org.jboss.netty.channel.local.LocalChannel:
    org.jboss.netty.channel.local.LocalAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.local.LocalAddress getRemoteAddress() -> getRemoteAddress
org.jboss.netty.channel.local.LocalChannelRegistry -> org.jboss.netty.channel.local.LocalChannelRegistry:
    java.util.concurrent.ConcurrentMap map -> map
    boolean isRegistered(org.jboss.netty.channel.local.LocalAddress) -> isRegistered
    org.jboss.netty.channel.Channel getChannel(org.jboss.netty.channel.local.LocalAddress) -> getChannel
    boolean register(org.jboss.netty.channel.local.LocalAddress,org.jboss.netty.channel.Channel) -> register
    boolean unregister(org.jboss.netty.channel.local.LocalAddress) -> unregister
org.jboss.netty.channel.local.LocalClientChannelFactory -> org.jboss.netty.channel.local.LocalClientChannelFactory:
    org.jboss.netty.channel.local.LocalChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.local.LocalClientChannelSink -> org.jboss.netty.channel.local.LocalClientChannelSink:
    org.jboss.netty.logging.InternalLogger logger -> logger
    boolean $assertionsDisabled -> $assertionsDisabled
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void bind(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress) -> bind
    void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress) -> connect
org.jboss.netty.channel.local.LocalClientChannelSink$1 -> org.jboss.netty.channel.local.LocalClientChannelSink$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.local.LocalServerChannel -> org.jboss.netty.channel.local.LocalServerChannel:
    org.jboss.netty.channel.local.LocalAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.local.LocalAddress getRemoteAddress() -> getRemoteAddress
org.jboss.netty.channel.local.LocalServerChannelFactory -> org.jboss.netty.channel.local.LocalServerChannelFactory:
    org.jboss.netty.channel.local.LocalServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.local.LocalServerChannelSink -> org.jboss.netty.channel.local.LocalServerChannelSink:
    boolean $assertionsDisabled -> $assertionsDisabled
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void handleServerChannel(org.jboss.netty.channel.ChannelEvent) -> handleServerChannel
    void handleAcceptedChannel(org.jboss.netty.channel.ChannelEvent) -> handleAcceptedChannel
    void bind(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress) -> bind
    void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture) -> close
org.jboss.netty.channel.local.LocalServerChannelSink$1 -> org.jboss.netty.channel.local.LocalServerChannelSink$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.socket.ChannelRunnableWrapper -> org.jboss.netty.channel.socket.ChannelRunnableWrapper:
    java.lang.Runnable task -> task
    boolean started -> started
    void run() -> run
    boolean cancel() -> cancel
org.jboss.netty.channel.socket.ClientSocketChannelFactory -> org.jboss.netty.channel.socket.ClientSocketChannelFactory:
    org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.DatagramChannel -> org.jboss.netty.channel.socket.DatagramChannel:
    org.jboss.netty.channel.socket.DatagramChannelConfig getConfig() -> getConfig
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
    org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress) -> joinGroup
    org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface) -> joinGroup
    org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress) -> leaveGroup
    org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface) -> leaveGroup
org.jboss.netty.channel.socket.DatagramChannelConfig -> org.jboss.netty.channel.socket.DatagramChannelConfig:
    int getSendBufferSize() -> getSendBufferSize
    void setSendBufferSize(int) -> setSendBufferSize
    int getReceiveBufferSize() -> getReceiveBufferSize
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    int getTrafficClass() -> getTrafficClass
    void setTrafficClass(int) -> setTrafficClass
    boolean isReuseAddress() -> isReuseAddress
    void setReuseAddress(boolean) -> setReuseAddress
    boolean isBroadcast() -> isBroadcast
    void setBroadcast(boolean) -> setBroadcast
    boolean isLoopbackModeDisabled() -> isLoopbackModeDisabled
    void setLoopbackModeDisabled(boolean) -> setLoopbackModeDisabled
    int getTimeToLive() -> getTimeToLive
    void setTimeToLive(int) -> setTimeToLive
    java.net.InetAddress getInterface() -> getInterface
    void setInterface(java.net.InetAddress) -> setInterface
    java.net.NetworkInterface getNetworkInterface() -> getNetworkInterface
    void setNetworkInterface(java.net.NetworkInterface) -> setNetworkInterface
    org.jboss.netty.channel.ReceiveBufferSizePredictor getReceiveBufferSizePredictor() -> getReceiveBufferSizePredictor
    void setReceiveBufferSizePredictor(org.jboss.netty.channel.ReceiveBufferSizePredictor) -> setReceiveBufferSizePredictor
    org.jboss.netty.channel.ReceiveBufferSizePredictorFactory getReceiveBufferSizePredictorFactory() -> getReceiveBufferSizePredictorFactory
    void setReceiveBufferSizePredictorFactory(org.jboss.netty.channel.ReceiveBufferSizePredictorFactory) -> setReceiveBufferSizePredictorFactory
org.jboss.netty.channel.socket.DatagramChannelFactory -> org.jboss.netty.channel.socket.DatagramChannelFactory:
    org.jboss.netty.channel.socket.DatagramChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.DefaultDatagramChannelConfig -> org.jboss.netty.channel.socket.DefaultDatagramChannelConfig:
    org.jboss.netty.channel.ReceiveBufferSizePredictorFactory DEFAULT_PREDICTOR_FACTORY -> DEFAULT_PREDICTOR_FACTORY
    java.net.DatagramSocket socket -> socket
    org.jboss.netty.channel.ReceiveBufferSizePredictor predictor -> predictor
    org.jboss.netty.channel.ReceiveBufferSizePredictorFactory predictorFactory -> predictorFactory
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    boolean isBroadcast() -> isBroadcast
    void setBroadcast(boolean) -> setBroadcast
    java.net.InetAddress getInterface() -> getInterface
    void setInterface(java.net.InetAddress) -> setInterface
    boolean isLoopbackModeDisabled() -> isLoopbackModeDisabled
    void setLoopbackModeDisabled(boolean) -> setLoopbackModeDisabled
    java.net.NetworkInterface getNetworkInterface() -> getNetworkInterface
    void setNetworkInterface(java.net.NetworkInterface) -> setNetworkInterface
    boolean isReuseAddress() -> isReuseAddress
    void setReuseAddress(boolean) -> setReuseAddress
    int getReceiveBufferSize() -> getReceiveBufferSize
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    int getSendBufferSize() -> getSendBufferSize
    void setSendBufferSize(int) -> setSendBufferSize
    int getTimeToLive() -> getTimeToLive
    void setTimeToLive(int) -> setTimeToLive
    int getTrafficClass() -> getTrafficClass
    void setTrafficClass(int) -> setTrafficClass
    org.jboss.netty.channel.ReceiveBufferSizePredictor getReceiveBufferSizePredictor() -> getReceiveBufferSizePredictor
    void setReceiveBufferSizePredictor(org.jboss.netty.channel.ReceiveBufferSizePredictor) -> setReceiveBufferSizePredictor
    org.jboss.netty.channel.ReceiveBufferSizePredictorFactory getReceiveBufferSizePredictorFactory() -> getReceiveBufferSizePredictorFactory
    void setReceiveBufferSizePredictorFactory(org.jboss.netty.channel.ReceiveBufferSizePredictorFactory) -> setReceiveBufferSizePredictorFactory
org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig -> org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig:
    java.net.ServerSocket socket -> socket
    int backlog -> backlog
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    boolean isReuseAddress() -> isReuseAddress
    void setReuseAddress(boolean) -> setReuseAddress
    int getReceiveBufferSize() -> getReceiveBufferSize
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    void setPerformancePreferences(int,int,int) -> setPerformancePreferences
    int getBacklog() -> getBacklog
    void setBacklog(int) -> setBacklog
org.jboss.netty.channel.socket.DefaultSocketChannelConfig -> org.jboss.netty.channel.socket.DefaultSocketChannelConfig:
    java.net.Socket socket -> socket
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    int getReceiveBufferSize() -> getReceiveBufferSize
    int getSendBufferSize() -> getSendBufferSize
    int getSoLinger() -> getSoLinger
    int getTrafficClass() -> getTrafficClass
    boolean isKeepAlive() -> isKeepAlive
    boolean isReuseAddress() -> isReuseAddress
    boolean isTcpNoDelay() -> isTcpNoDelay
    void setKeepAlive(boolean) -> setKeepAlive
    void setPerformancePreferences(int,int,int) -> setPerformancePreferences
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    void setReuseAddress(boolean) -> setReuseAddress
    void setSendBufferSize(int) -> setSendBufferSize
    void setSoLinger(int) -> setSoLinger
    void setTcpNoDelay(boolean) -> setTcpNoDelay
    void setTrafficClass(int) -> setTrafficClass
org.jboss.netty.channel.socket.InternetProtocolFamily -> org.jboss.netty.channel.socket.InternetProtocolFamily:
    org.jboss.netty.channel.socket.InternetProtocolFamily IPv4 -> IPv4
    org.jboss.netty.channel.socket.InternetProtocolFamily IPv6 -> IPv6
    org.jboss.netty.channel.socket.InternetProtocolFamily[] $VALUES -> $VALUES
    org.jboss.netty.channel.socket.InternetProtocolFamily[] values() -> values
    org.jboss.netty.channel.socket.InternetProtocolFamily valueOf(java.lang.String) -> valueOf
org.jboss.netty.channel.socket.ServerSocketChannel -> org.jboss.netty.channel.socket.ServerSocketChannel:
    org.jboss.netty.channel.socket.ServerSocketChannelConfig getConfig() -> getConfig
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
org.jboss.netty.channel.socket.ServerSocketChannelConfig -> org.jboss.netty.channel.socket.ServerSocketChannelConfig:
    int getBacklog() -> getBacklog
    void setBacklog(int) -> setBacklog
    boolean isReuseAddress() -> isReuseAddress
    void setReuseAddress(boolean) -> setReuseAddress
    int getReceiveBufferSize() -> getReceiveBufferSize
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    void setPerformancePreferences(int,int,int) -> setPerformancePreferences
org.jboss.netty.channel.socket.ServerSocketChannelFactory -> org.jboss.netty.channel.socket.ServerSocketChannelFactory:
    org.jboss.netty.channel.socket.ServerSocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.SocketChannel -> org.jboss.netty.channel.socket.SocketChannel:
    org.jboss.netty.channel.socket.SocketChannelConfig getConfig() -> getConfig
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
org.jboss.netty.channel.socket.SocketChannelConfig -> org.jboss.netty.channel.socket.SocketChannelConfig:
    boolean isTcpNoDelay() -> isTcpNoDelay
    void setTcpNoDelay(boolean) -> setTcpNoDelay
    int getSoLinger() -> getSoLinger
    void setSoLinger(int) -> setSoLinger
    int getSendBufferSize() -> getSendBufferSize
    void setSendBufferSize(int) -> setSendBufferSize
    int getReceiveBufferSize() -> getReceiveBufferSize
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    boolean isKeepAlive() -> isKeepAlive
    void setKeepAlive(boolean) -> setKeepAlive
    int getTrafficClass() -> getTrafficClass
    void setTrafficClass(int) -> setTrafficClass
    boolean isReuseAddress() -> isReuseAddress
    void setReuseAddress(boolean) -> setReuseAddress
    void setPerformancePreferences(int,int,int) -> setPerformancePreferences
org.jboss.netty.channel.socket.Worker -> org.jboss.netty.channel.socket.Worker:
    void executeInIoThread(java.lang.Runnable) -> executeInIoThread
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:
    org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig config -> config
    boolean requestHeaderWritten -> requestHeaderWritten
    java.lang.Object interestOpsLock -> interestOpsLock
    org.jboss.netty.channel.socket.SocketChannel realChannel -> realChannel
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler handler -> handler
    org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig getConfig() -> getConfig
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
    boolean isBound() -> isBound
    boolean isConnected() -> isConnected
    int getInterestOps() -> getInterestOps
    boolean isWritable() -> isWritable
    boolean setClosed() -> setClosed
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress) -> write
    void bindReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture) -> bindReal
    void connectReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture) -> connectReal
    void writeReal(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.channel.ChannelFuture) -> writeReal
    org.jboss.netty.channel.ChannelFuture writeLastChunk() -> writeLastChunk
    void setInterestOpsReal(int,org.jboss.netty.channel.ChannelFuture) -> setInterestOpsReal
    void disconnectReal(org.jboss.netty.channel.ChannelFuture) -> disconnectReal
    void unbindReal(org.jboss.netty.channel.ChannelFuture) -> unbindReal
    void closeReal(org.jboss.netty.channel.ChannelFuture) -> closeReal
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
    org.jboss.netty.channel.socket.SocketChannelConfig getConfig() -> getConfig
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$1 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$1:
    org.jboss.netty.channel.ChannelFuture val$future -> val$future
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:
    java.net.SocketAddress val$remoteAddress -> val$remoteAddress
    org.jboss.netty.channel.ChannelFuture val$future -> val$future
    org.jboss.netty.channel.socket.SocketChannel val$virtualChannel -> val$virtualChannel
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2$1 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2$1:
    org.jboss.netty.handler.codec.http.HttpRequest val$req -> val$req
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2 this$1 -> this$1
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$3 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$3:
    org.jboss.netty.channel.ChannelFuture val$future -> val$future
    int val$size -> val$size
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$4 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$4:
    org.jboss.netty.channel.ChannelFuture val$future -> val$future
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5:
    org.jboss.netty.channel.ChannelFuture val$future -> val$future
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5$1 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5$1:
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5 this$1 -> this$1
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6:
    org.jboss.netty.channel.ChannelFuture val$future -> val$future
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6$1 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6$1:
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6 this$1 -> this$1
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7:
    org.jboss.netty.channel.ChannelFuture val$future -> val$future
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7$1 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7$1:
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7 this$1 -> this$1
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:
    boolean readingChunks -> readingChunks
    org.jboss.netty.channel.socket.SocketChannel virtualChannel -> virtualChannel
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel this$0 -> this$0
    void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelBound
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelInterestChanged
    void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelDisconnected
    void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelUnbound
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:
    org.jboss.netty.channel.ChannelSink sink -> sink
    org.jboss.netty.channel.socket.ClientSocketChannelFactory clientSocketChannelFactory -> clientSocketChannelFactory
    org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void releaseExternalResources() -> releaseExternalResources
    void shutdown() -> shutdown
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink$1 -> org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.socket.http.HttpTunnelingServlet -> org.jboss.netty.channel.socket.http.HttpTunnelingServlet:
    long serialVersionUID -> serialVersionUID
    java.lang.String ENDPOINT -> ENDPOINT
    java.lang.String CONNECT_ATTEMPTS -> CONNECT_ATTEMPTS
    java.lang.String RETRY_DELAY -> RETRY_DELAY
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.net.SocketAddress remoteAddress -> remoteAddress
    org.jboss.netty.channel.ChannelFactory channelFactory -> channelFactory
    long connectAttempts -> connectAttempts
    long retryDelay -> retryDelay
    boolean $assertionsDisabled -> $assertionsDisabled
    void init() -> init
    java.net.SocketAddress parseEndpoint(java.lang.String) -> parseEndpoint
    org.jboss.netty.channel.ChannelFactory createChannelFactory(java.net.SocketAddress) -> createChannelFactory
    void destroy() -> destroy
    void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory) -> destroyChannelFactory
    void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) -> service
    org.jboss.netty.buffer.ChannelBuffer read(java.io.PushbackInputStream) -> read
org.jboss.netty.channel.socket.http.HttpTunnelingServlet$OutboundConnectionHandler -> org.jboss.netty.channel.socket.http.HttpTunnelingServlet$OutboundConnectionHandler:
    javax.servlet.ServletOutputStream out -> out
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig -> org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:
    org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel channel -> channel
    java.lang.String serverName -> serverName
    java.lang.String serverPath -> serverPath
    javax.net.ssl.SSLContext sslContext -> sslContext
    java.lang.String[] enabledSslCipherSuites -> enabledSslCipherSuites
    java.lang.String[] enabledSslProtocols -> enabledSslProtocols
    boolean enableSslSessionCreation -> enableSslSessionCreation
    java.lang.String getServerName() -> getServerName
    void setServerName(java.lang.String) -> setServerName
    java.lang.String getServerPath() -> getServerPath
    void setServerPath(java.lang.String) -> setServerPath
    javax.net.ssl.SSLContext getSslContext() -> getSslContext
    void setSslContext(javax.net.ssl.SSLContext) -> setSslContext
    java.lang.String[] getEnabledSslCipherSuites() -> getEnabledSslCipherSuites
    void setEnabledSslCipherSuites(java.lang.String[]) -> setEnabledSslCipherSuites
    java.lang.String[] getEnabledSslProtocols() -> getEnabledSslProtocols
    void setEnabledSslProtocols(java.lang.String[]) -> setEnabledSslProtocols
    boolean isEnableSslSessionCreation() -> isEnableSslSessionCreation
    void setEnableSslSessionCreation(boolean) -> setEnableSslSessionCreation
    void setOptions(java.util.Map) -> setOptions
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    int getReceiveBufferSize() -> getReceiveBufferSize
    int getSendBufferSize() -> getSendBufferSize
    int getSoLinger() -> getSoLinger
    int getTrafficClass() -> getTrafficClass
    boolean isKeepAlive() -> isKeepAlive
    boolean isReuseAddress() -> isReuseAddress
    boolean isTcpNoDelay() -> isTcpNoDelay
    void setKeepAlive(boolean) -> setKeepAlive
    void setPerformancePreferences(int,int,int) -> setPerformancePreferences
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    void setReuseAddress(boolean) -> setReuseAddress
    void setSendBufferSize(int) -> setSendBufferSize
    void setSoLinger(int) -> setSoLinger
    void setTcpNoDelay(boolean) -> setTcpNoDelay
    void setTrafficClass(int) -> setTrafficClass
    org.jboss.netty.buffer.ChannelBufferFactory getBufferFactory() -> getBufferFactory
    int getConnectTimeoutMillis() -> getConnectTimeoutMillis
    org.jboss.netty.channel.ChannelPipelineFactory getPipelineFactory() -> getPipelineFactory
    void setBufferFactory(org.jboss.netty.buffer.ChannelBufferFactory) -> setBufferFactory
    void setConnectTimeoutMillis(int) -> setConnectTimeoutMillis
    void setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory) -> setPipelineFactory
org.jboss.netty.channel.socket.nio.AbstractNioBossPool -> org.jboss.netty.channel.socket.nio.AbstractNioBossPool:
    int INITIALIZATION_TIMEOUT -> INITIALIZATION_TIMEOUT
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.socket.nio.Boss[] bosses -> bosses
    java.util.concurrent.atomic.AtomicInteger bossIndex -> bossIndex
    java.util.concurrent.Executor bossExecutor -> bossExecutor
    java.util.concurrent.atomic.AtomicBoolean initialized -> initialized
    void init() -> init
    void waitForBossThreads() -> waitForBossThreads
    org.jboss.netty.channel.socket.nio.Boss newBoss(java.util.concurrent.Executor) -> newBoss
    org.jboss.netty.channel.socket.nio.Boss nextBoss() -> nextBoss
    void rebuildSelectors() -> rebuildSelectors
    void releaseExternalResources() -> releaseExternalResources
    void shutdown() -> shutdown
org.jboss.netty.channel.socket.nio.AbstractNioChannel -> org.jboss.netty.channel.socket.nio.AbstractNioChannel:
    org.jboss.netty.channel.socket.nio.AbstractNioWorker worker -> worker
    java.lang.Object writeLock -> writeLock
    java.lang.Runnable writeTask -> writeTask
    java.util.concurrent.atomic.AtomicBoolean writeTaskInTaskQueue -> writeTaskInTaskQueue
    java.util.Queue writeBufferQueue -> writeBufferQueue
    java.util.concurrent.atomic.AtomicInteger writeBufferSize -> writeBufferSize
    java.util.concurrent.atomic.AtomicInteger highWaterMarkCounter -> highWaterMarkCounter
    org.jboss.netty.channel.MessageEvent currentWriteEvent -> currentWriteEvent
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$SendBuffer currentWriteBuffer -> currentWriteBuffer
    boolean inWriteNowLoop -> inWriteNowLoop
    boolean writeSuspended -> writeSuspended
    java.net.InetSocketAddress localAddress -> localAddress
    java.net.InetSocketAddress remoteAddress -> remoteAddress
    java.nio.channels.SelectableChannel channel -> channel
    org.jboss.netty.channel.socket.nio.AbstractNioWorker getWorker() -> getWorker
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
    org.jboss.netty.channel.socket.nio.NioChannelConfig getConfig() -> getConfig
    int getInternalInterestOps() -> getInternalInterestOps
    void setInternalInterestOps(int) -> setInternalInterestOps
    boolean setClosed() -> setClosed
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.InetSocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
    boolean access$000(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> access$000
    boolean access$100(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> access$100
org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue -> org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:
    org.jboss.netty.util.internal.ThreadLocalBoolean notifying -> notifying
    java.util.Queue queue -> queue
    boolean $assertionsDisabled -> $assertionsDisabled
    org.jboss.netty.channel.socket.nio.AbstractNioChannel this$0 -> this$0
    org.jboss.netty.channel.MessageEvent remove() -> remove
    org.jboss.netty.channel.MessageEvent element() -> element
    org.jboss.netty.channel.MessageEvent peek() -> peek
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    boolean add(org.jboss.netty.channel.MessageEvent) -> add
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean offer(org.jboss.netty.channel.MessageEvent) -> offer
    org.jboss.netty.channel.MessageEvent poll() -> poll
    int getMessageSize(org.jboss.netty.channel.MessageEvent) -> getMessageSize
    java.lang.Object peek() -> peek
    java.lang.Object element() -> element
    java.lang.Object poll() -> poll
    java.lang.Object remove() -> remove
    boolean offer(java.lang.Object) -> offer
    boolean add(java.lang.Object) -> add
org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteTask -> org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteTask:
    org.jboss.netty.channel.socket.nio.AbstractNioChannel this$0 -> this$0
    void run() -> run
org.jboss.netty.channel.socket.nio.AbstractNioChannelSink -> org.jboss.netty.channel.socket.nio.AbstractNioChannelSink:
    org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable) -> execute
    boolean isFireExceptionCaughtLater(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable) -> isFireExceptionCaughtLater
org.jboss.netty.channel.socket.nio.AbstractNioSelector -> org.jboss.netty.channel.socket.nio.AbstractNioSelector:
    java.util.concurrent.atomic.AtomicInteger nextId -> nextId
    int id -> id
    org.jboss.netty.logging.InternalLogger logger -> logger
    int CLEANUP_INTERVAL -> CLEANUP_INTERVAL
    java.util.concurrent.Executor executor -> executor
    java.lang.Thread thread -> thread
    java.util.concurrent.CountDownLatch startupLatch -> startupLatch
    java.nio.channels.Selector selector -> selector
    java.util.concurrent.atomic.AtomicBoolean wakenUp -> wakenUp
    java.util.Queue taskQueue -> taskQueue
    int cancelledKeys -> cancelledKeys
    java.util.concurrent.CountDownLatch shutdownLatch -> shutdownLatch
    boolean shutdown -> shutdown
    boolean $assertionsDisabled -> $assertionsDisabled
    void register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> register
    void registerTask(java.lang.Runnable) -> registerTask
    boolean isIoThread() -> isIoThread
    void rebuildSelector() -> rebuildSelector
    void run() -> run
    void openSelector(org.jboss.netty.util.ThreadNameDeterminer) -> openSelector
    void processTaskQueue() -> processTaskQueue
    void increaseCancelledKeys() -> increaseCancelledKeys
    boolean cleanUpCancelledKeys() -> cleanUpCancelledKeys
    void shutdown() -> shutdown
    void process(java.nio.channels.Selector) -> process
    int select(java.nio.channels.Selector) -> select
    void close(java.nio.channels.SelectionKey) -> close
    org.jboss.netty.util.ThreadRenamingRunnable newThreadRenamingRunnable(int,org.jboss.netty.util.ThreadNameDeterminer) -> newThreadRenamingRunnable
    java.lang.Runnable createRegisterTask(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> createRegisterTask
org.jboss.netty.channel.socket.nio.AbstractNioSelector$1 -> org.jboss.netty.channel.socket.nio.AbstractNioSelector$1:
    org.jboss.netty.channel.socket.nio.AbstractNioSelector this$0 -> this$0
    void run() -> run
org.jboss.netty.channel.socket.nio.AbstractNioWorker -> org.jboss.netty.channel.socket.nio.AbstractNioWorker:
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool sendBufferPool -> sendBufferPool
    void executeInIoThread(java.lang.Runnable) -> executeInIoThread
    void executeInIoThread(java.lang.Runnable,boolean) -> executeInIoThread
    void close(java.nio.channels.SelectionKey) -> close
    org.jboss.netty.util.ThreadRenamingRunnable newThreadRenamingRunnable(int,org.jboss.netty.util.ThreadNameDeterminer) -> newThreadRenamingRunnable
    void run() -> run
    void process(java.nio.channels.Selector) -> process
    void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> writeFromUserCode
    void writeFromTaskLoop(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> writeFromTaskLoop
    void writeFromSelectorLoop(java.nio.channels.SelectionKey) -> writeFromSelectorLoop
    boolean scheduleWriteIfNecessary(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> scheduleWriteIfNecessary
    void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> write0
    boolean isIoThread(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> isIoThread
    void setOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> setOpWrite
    void clearOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> clearOpWrite
    void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture) -> close
    void cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> cleanUpWriteBuffer
    void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int) -> setInterestOps
    boolean read(java.nio.channels.SelectionKey) -> read
org.jboss.netty.channel.socket.nio.AbstractNioWorker$1 -> org.jboss.netty.channel.socket.nio.AbstractNioWorker$1:
    org.jboss.netty.channel.socket.nio.AbstractNioChannel val$channel -> val$channel
    org.jboss.netty.channel.ChannelFuture val$future -> val$future
    int val$interestOps -> val$interestOps
    org.jboss.netty.channel.socket.nio.AbstractNioWorker this$0 -> this$0
    void run() -> run
org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool -> org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:
    int INITIALIZATION_TIMEOUT -> INITIALIZATION_TIMEOUT
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.socket.nio.AbstractNioWorker[] workers -> workers
    java.util.concurrent.atomic.AtomicInteger workerIndex -> workerIndex
    java.util.concurrent.Executor workerExecutor -> workerExecutor
    java.util.concurrent.atomic.AtomicBoolean initialized -> initialized
    void init() -> init
    void waitForWorkerThreads() -> waitForWorkerThreads
    org.jboss.netty.channel.socket.nio.AbstractNioWorker newWorker(java.util.concurrent.Executor) -> newWorker
    org.jboss.netty.channel.socket.nio.AbstractNioWorker nextWorker() -> nextWorker
    void rebuildSelectors() -> rebuildSelectors
    void releaseExternalResources() -> releaseExternalResources
    void shutdown() -> shutdown
    org.jboss.netty.channel.socket.Worker nextWorker() -> nextWorker
org.jboss.netty.channel.socket.nio.Boss -> org.jboss.netty.channel.socket.nio.Boss:
org.jboss.netty.channel.socket.nio.BossPool -> org.jboss.netty.channel.socket.nio.BossPool:
    org.jboss.netty.channel.socket.nio.Boss nextBoss() -> nextBoss
org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig -> org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig:
    org.jboss.netty.logging.InternalLogger logger -> logger
    int writeBufferHighWaterMark -> writeBufferHighWaterMark
    int writeBufferLowWaterMark -> writeBufferLowWaterMark
    int writeSpinCount -> writeSpinCount
    java.nio.channels.DatagramChannel channel -> channel
    void setOptions(java.util.Map) -> setOptions
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    int getWriteBufferHighWaterMark() -> getWriteBufferHighWaterMark
    void setWriteBufferHighWaterMark(int) -> setWriteBufferHighWaterMark
    void setWriteBufferHighWaterMark0(int) -> setWriteBufferHighWaterMark0
    int getWriteBufferLowWaterMark() -> getWriteBufferLowWaterMark
    void setWriteBufferLowWaterMark(int) -> setWriteBufferLowWaterMark
    void setWriteBufferLowWaterMark0(int) -> setWriteBufferLowWaterMark0
    int getWriteSpinCount() -> getWriteSpinCount
    void setWriteSpinCount(int) -> setWriteSpinCount
    void setNetworkInterface(java.net.NetworkInterface) -> setNetworkInterface
    java.net.NetworkInterface getNetworkInterface() -> getNetworkInterface
    int getTimeToLive() -> getTimeToLive
    void setTimeToLive(int) -> setTimeToLive
    java.net.InetAddress getInterface() -> getInterface
    void setInterface(java.net.InetAddress) -> setInterface
    boolean isLoopbackModeDisabled() -> isLoopbackModeDisabled
    void setLoopbackModeDisabled(boolean) -> setLoopbackModeDisabled
org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig -> org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.ReceiveBufferSizePredictorFactory DEFAULT_PREDICTOR_FACTORY -> DEFAULT_PREDICTOR_FACTORY
    int writeBufferHighWaterMark -> writeBufferHighWaterMark
    int writeBufferLowWaterMark -> writeBufferLowWaterMark
    org.jboss.netty.channel.ReceiveBufferSizePredictor predictor -> predictor
    org.jboss.netty.channel.ReceiveBufferSizePredictorFactory predictorFactory -> predictorFactory
    int writeSpinCount -> writeSpinCount
    void setOptions(java.util.Map) -> setOptions
    boolean setOption(java.lang.String,java.lang.Object) -> setOption
    int getWriteBufferHighWaterMark() -> getWriteBufferHighWaterMark
    void setWriteBufferHighWaterMark(int) -> setWriteBufferHighWaterMark
    void setWriteBufferHighWaterMark0(int) -> setWriteBufferHighWaterMark0
    int getWriteBufferLowWaterMark() -> getWriteBufferLowWaterMark
    void setWriteBufferLowWaterMark(int) -> setWriteBufferLowWaterMark
    void setWriteBufferLowWaterMark0(int) -> setWriteBufferLowWaterMark0
    int getWriteSpinCount() -> getWriteSpinCount
    void setWriteSpinCount(int) -> setWriteSpinCount
    org.jboss.netty.channel.ReceiveBufferSizePredictor getReceiveBufferSizePredictor() -> getReceiveBufferSizePredictor
    void setReceiveBufferSizePredictor(org.jboss.netty.channel.ReceiveBufferSizePredictor) -> setReceiveBufferSizePredictor
    org.jboss.netty.channel.ReceiveBufferSizePredictorFactory getReceiveBufferSizePredictorFactory() -> getReceiveBufferSizePredictorFactory
    void setReceiveBufferSizePredictorFactory(org.jboss.netty.channel.ReceiveBufferSizePredictorFactory) -> setReceiveBufferSizePredictorFactory
org.jboss.netty.channel.socket.nio.NioAcceptedSocketChannel -> org.jboss.netty.channel.socket.nio.NioAcceptedSocketChannel:
    java.lang.Thread bossThread -> bossThread
org.jboss.netty.channel.socket.nio.NioChannelConfig -> org.jboss.netty.channel.socket.nio.NioChannelConfig:
    int getWriteBufferHighWaterMark() -> getWriteBufferHighWaterMark
    void setWriteBufferHighWaterMark(int) -> setWriteBufferHighWaterMark
    int getWriteBufferLowWaterMark() -> getWriteBufferLowWaterMark
    void setWriteBufferLowWaterMark(int) -> setWriteBufferLowWaterMark
    int getWriteSpinCount() -> getWriteSpinCount
    void setWriteSpinCount(int) -> setWriteSpinCount
org.jboss.netty.channel.socket.nio.NioClientBoss -> org.jboss.netty.channel.socket.nio.NioClientBoss:
    org.jboss.netty.util.TimerTask wakeupTask -> wakeupTask
    org.jboss.netty.util.Timer timer -> timer
    org.jboss.netty.util.ThreadRenamingRunnable newThreadRenamingRunnable(int,org.jboss.netty.util.ThreadNameDeterminer) -> newThreadRenamingRunnable
    java.lang.Runnable createRegisterTask(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> createRegisterTask
    void process(java.nio.channels.Selector) -> process
    void processSelectedKeys(java.util.Set) -> processSelectedKeys
    void processConnectTimeout(java.util.Set,long) -> processConnectTimeout
    void connect(java.nio.channels.SelectionKey) -> connect
    void close(java.nio.channels.SelectionKey) -> close
    void shutdown() -> shutdown
    void run() -> run
    void rebuildSelector() -> rebuildSelector
    void register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> register
    org.jboss.netty.util.TimerTask access$000(org.jboss.netty.channel.socket.nio.NioClientBoss) -> access$000
    org.jboss.netty.util.Timer access$100(org.jboss.netty.channel.socket.nio.NioClientBoss) -> access$100
org.jboss.netty.channel.socket.nio.NioClientBoss$1 -> org.jboss.netty.channel.socket.nio.NioClientBoss$1:
    org.jboss.netty.channel.socket.nio.NioClientBoss this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.channel.socket.nio.NioClientBoss$RegisterTask -> org.jboss.netty.channel.socket.nio.NioClientBoss$RegisterTask:
    org.jboss.netty.channel.socket.nio.NioClientBoss boss -> boss
    org.jboss.netty.channel.socket.nio.NioClientSocketChannel channel -> channel
    org.jboss.netty.channel.socket.nio.NioClientBoss this$0 -> this$0
    void run() -> run
org.jboss.netty.channel.socket.nio.NioClientBossPool -> org.jboss.netty.channel.socket.nio.NioClientBossPool:
    org.jboss.netty.util.ThreadNameDeterminer determiner -> determiner
    org.jboss.netty.util.Timer timer -> timer
    boolean stopTimer -> stopTimer
    org.jboss.netty.channel.socket.nio.NioClientBoss newBoss(java.util.concurrent.Executor) -> newBoss
    void shutdown() -> shutdown
    void releaseExternalResources() -> releaseExternalResources
    org.jboss.netty.channel.socket.nio.Boss newBoss(java.util.concurrent.Executor) -> newBoss
org.jboss.netty.channel.socket.nio.NioClientSocketChannel -> org.jboss.netty.channel.socket.nio.NioClientSocketChannel:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.ChannelFuture connectFuture -> connectFuture
    boolean boundManually -> boundManually
    long connectDeadlineNanos -> connectDeadlineNanos
    java.net.SocketAddress requestedRemoteAddress -> requestedRemoteAddress
    org.jboss.netty.util.Timeout timoutTimer -> timoutTimer
    java.nio.channels.SocketChannel newSocket() -> newSocket
org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory -> org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:
    int DEFAULT_BOSS_COUNT -> DEFAULT_BOSS_COUNT
    org.jboss.netty.channel.socket.nio.BossPool bossPool -> bossPool
    org.jboss.netty.channel.socket.nio.WorkerPool workerPool -> workerPool
    org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink sink -> sink
    boolean releasePools -> releasePools
    org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void shutdown() -> shutdown
    void releaseExternalResources() -> releaseExternalResources
    void releasePools() -> releasePools
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink -> org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.socket.nio.BossPool bossPool -> bossPool
    boolean $assertionsDisabled -> $assertionsDisabled
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void bind(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> bind
    void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> connect
    org.jboss.netty.channel.socket.nio.NioClientBoss nextBoss() -> nextBoss
org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$1 -> org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$1:
    org.jboss.netty.channel.ChannelFuture val$cf -> val$cf
    org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$2 -> org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$2:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.socket.nio.NioDatagramChannel -> org.jboss.netty.channel.socket.nio.NioDatagramChannel:
    org.jboss.netty.channel.socket.nio.NioDatagramChannelConfig config -> config
    java.util.Map memberships -> memberships
    java.nio.channels.DatagramChannel openNonBlockingChannel(org.jboss.netty.channel.socket.InternetProtocolFamily) -> openNonBlockingChannel
    org.jboss.netty.channel.socket.nio.NioDatagramWorker getWorker() -> getWorker
    boolean isBound() -> isBound
    boolean isConnected() -> isConnected
    boolean setClosed() -> setClosed
    org.jboss.netty.channel.socket.nio.NioDatagramChannelConfig getConfig() -> getConfig
    java.nio.channels.DatagramChannel getDatagramChannel() -> getDatagramChannel
    org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress) -> joinGroup
    org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface) -> joinGroup
    org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress) -> joinGroup
    org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress) -> leaveGroup
    org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface) -> leaveGroup
    org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress) -> leaveGroup
    org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress) -> block
    org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress) -> block
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.InetSocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress) -> write
    org.jboss.netty.channel.socket.nio.NioChannelConfig getConfig() -> getConfig
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.socket.nio.AbstractNioWorker getWorker() -> getWorker
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
    org.jboss.netty.channel.socket.DatagramChannelConfig getConfig() -> getConfig
org.jboss.netty.channel.socket.nio.NioDatagramChannel$1 -> org.jboss.netty.channel.socket.nio.NioDatagramChannel$1:
    int[] $SwitchMap$org$jboss$netty$channel$socket$InternetProtocolFamily -> $SwitchMap$org$jboss$netty$channel$socket$InternetProtocolFamily
org.jboss.netty.channel.socket.nio.NioDatagramChannelConfig -> org.jboss.netty.channel.socket.nio.NioDatagramChannelConfig:
org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory -> org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:
    org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink sink -> sink
    org.jboss.netty.channel.socket.nio.WorkerPool workerPool -> workerPool
    org.jboss.netty.channel.socket.InternetProtocolFamily family -> family
    boolean releasePool -> releasePool
    org.jboss.netty.channel.socket.DatagramChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void shutdown() -> shutdown
    void releaseExternalResources() -> releaseExternalResources
    void releasePool() -> releasePool
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink -> org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:
    org.jboss.netty.channel.socket.nio.WorkerPool workerPool -> workerPool
    boolean $assertionsDisabled -> $assertionsDisabled
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture) -> close
    void bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress) -> bind
    void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress) -> connect
    org.jboss.netty.channel.socket.nio.NioDatagramWorker nextWorker() -> nextWorker
org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink$1 -> org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.socket.nio.NioDatagramWorker -> org.jboss.netty.channel.socket.nio.NioDatagramWorker:
    org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator bufferAllocator -> bufferAllocator
    boolean read(java.nio.channels.SelectionKey) -> read
    boolean scheduleWriteIfNecessary(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> scheduleWriteIfNecessary
    void disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture) -> disconnect
    java.lang.Runnable createRegisterTask(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> createRegisterTask
    void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> writeFromUserCode
    void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> write0
    void run() -> run
    void executeInIoThread(java.lang.Runnable,boolean) -> executeInIoThread
    void executeInIoThread(java.lang.Runnable) -> executeInIoThread
    void shutdown() -> shutdown
    void rebuildSelector() -> rebuildSelector
    void register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> register
org.jboss.netty.channel.socket.nio.NioDatagramWorker$ChannelRegistionTask -> org.jboss.netty.channel.socket.nio.NioDatagramWorker$ChannelRegistionTask:
    org.jboss.netty.channel.socket.nio.NioDatagramChannel channel -> channel
    org.jboss.netty.channel.ChannelFuture future -> future
    org.jboss.netty.channel.socket.nio.NioDatagramWorker this$0 -> this$0
    void run() -> run
org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool -> org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool:
    org.jboss.netty.channel.socket.nio.NioDatagramWorker newWorker(java.util.concurrent.Executor) -> newWorker
    org.jboss.netty.channel.socket.nio.AbstractNioWorker newWorker(java.util.concurrent.Executor) -> newWorker
org.jboss.netty.channel.socket.nio.NioSelector -> org.jboss.netty.channel.socket.nio.NioSelector:
    void register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> register
    void rebuildSelector() -> rebuildSelector
    void shutdown() -> shutdown
org.jboss.netty.channel.socket.nio.NioSelectorPool -> org.jboss.netty.channel.socket.nio.NioSelectorPool:
    void rebuildSelectors() -> rebuildSelectors
    void shutdown() -> shutdown
org.jboss.netty.channel.socket.nio.NioServerBoss -> org.jboss.netty.channel.socket.nio.NioServerBoss:
    void bind(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> bind
    void close(java.nio.channels.SelectionKey) -> close
    void close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture) -> close
    void process(java.nio.channels.Selector) -> process
    void registerAcceptedChannel(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,java.nio.channels.SocketChannel,java.lang.Thread) -> registerAcceptedChannel
    int select(java.nio.channels.Selector) -> select
    org.jboss.netty.util.ThreadRenamingRunnable newThreadRenamingRunnable(int,org.jboss.netty.util.ThreadNameDeterminer) -> newThreadRenamingRunnable
    java.lang.Runnable createRegisterTask(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> createRegisterTask
    void shutdown() -> shutdown
    void run() -> run
    void rebuildSelector() -> rebuildSelector
    void register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> register
org.jboss.netty.channel.socket.nio.NioServerBoss$RegisterTask -> org.jboss.netty.channel.socket.nio.NioServerBoss$RegisterTask:
    org.jboss.netty.channel.socket.nio.NioServerSocketChannel channel -> channel
    org.jboss.netty.channel.ChannelFuture future -> future
    java.net.SocketAddress localAddress -> localAddress
    org.jboss.netty.channel.socket.nio.NioServerBoss this$0 -> this$0
    void run() -> run
org.jboss.netty.channel.socket.nio.NioServerBossPool -> org.jboss.netty.channel.socket.nio.NioServerBossPool:
    org.jboss.netty.util.ThreadNameDeterminer determiner -> determiner
    org.jboss.netty.channel.socket.nio.NioServerBoss newBoss(java.util.concurrent.Executor) -> newBoss
    org.jboss.netty.channel.socket.nio.Boss newBoss(java.util.concurrent.Executor) -> newBoss
org.jboss.netty.channel.socket.nio.NioServerSocketChannel -> org.jboss.netty.channel.socket.nio.NioServerSocketChannel:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.nio.channels.ServerSocketChannel socket -> socket
    org.jboss.netty.channel.socket.nio.Boss boss -> boss
    org.jboss.netty.channel.socket.nio.WorkerPool workerPool -> workerPool
    org.jboss.netty.channel.socket.ServerSocketChannelConfig config -> config
    org.jboss.netty.channel.socket.ServerSocketChannelConfig getConfig() -> getConfig
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
    boolean isBound() -> isBound
    boolean setClosed() -> setClosed
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory -> org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:
    org.jboss.netty.channel.socket.nio.WorkerPool workerPool -> workerPool
    org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink sink -> sink
    org.jboss.netty.channel.socket.nio.BossPool bossPool -> bossPool
    boolean releasePools -> releasePools
    org.jboss.netty.channel.socket.ServerSocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void shutdown() -> shutdown
    void releaseExternalResources() -> releaseExternalResources
    void releasePools() -> releasePools
    int getMaxThreads(java.util.concurrent.Executor) -> getMaxThreads
    org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink -> org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:
    boolean $assertionsDisabled -> $assertionsDisabled
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void handleServerSocket(org.jboss.netty.channel.ChannelEvent) -> handleServerSocket
    void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent) -> handleAcceptedSocket
org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink$1 -> org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.socket.nio.NioSocketChannel -> org.jboss.netty.channel.socket.nio.NioSocketChannel:
    int ST_OPEN -> ST_OPEN
    int ST_BOUND -> ST_BOUND
    int ST_CONNECTED -> ST_CONNECTED
    int ST_CLOSED -> ST_CLOSED
    int state -> state
    org.jboss.netty.channel.socket.nio.NioSocketChannelConfig config -> config
    boolean $assertionsDisabled -> $assertionsDisabled
    org.jboss.netty.channel.socket.nio.NioWorker getWorker() -> getWorker
    org.jboss.netty.channel.socket.nio.NioSocketChannelConfig getConfig() -> getConfig
    boolean isOpen() -> isOpen
    boolean isBound() -> isBound
    boolean isConnected() -> isConnected
    void setBound() -> setBound
    void setConnected() -> setConnected
    boolean setClosed() -> setClosed
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.InetSocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress) -> write
    org.jboss.netty.channel.socket.nio.NioChannelConfig getConfig() -> getConfig
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.socket.nio.AbstractNioWorker getWorker() -> getWorker
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
    org.jboss.netty.channel.socket.SocketChannelConfig getConfig() -> getConfig
org.jboss.netty.channel.socket.nio.NioSocketChannelConfig -> org.jboss.netty.channel.socket.nio.NioSocketChannelConfig:
    org.jboss.netty.channel.ReceiveBufferSizePredictor getReceiveBufferSizePredictor() -> getReceiveBufferSizePredictor
    void setReceiveBufferSizePredictor(org.jboss.netty.channel.ReceiveBufferSizePredictor) -> setReceiveBufferSizePredictor
    org.jboss.netty.channel.ReceiveBufferSizePredictorFactory getReceiveBufferSizePredictorFactory() -> getReceiveBufferSizePredictorFactory
    void setReceiveBufferSizePredictorFactory(org.jboss.netty.channel.ReceiveBufferSizePredictorFactory) -> setReceiveBufferSizePredictorFactory
org.jboss.netty.channel.socket.nio.NioWorker -> org.jboss.netty.channel.socket.nio.NioWorker:
    org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator recvBufferPool -> recvBufferPool
    boolean read(java.nio.channels.SelectionKey) -> read
    boolean scheduleWriteIfNecessary(org.jboss.netty.channel.socket.nio.AbstractNioChannel) -> scheduleWriteIfNecessary
    java.lang.Runnable createRegisterTask(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> createRegisterTask
    void run() -> run
    void executeInIoThread(java.lang.Runnable,boolean) -> executeInIoThread
    void executeInIoThread(java.lang.Runnable) -> executeInIoThread
    void shutdown() -> shutdown
    void rebuildSelector() -> rebuildSelector
    void register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture) -> register
org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask -> org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask:
    org.jboss.netty.channel.socket.nio.NioSocketChannel channel -> channel
    org.jboss.netty.channel.ChannelFuture future -> future
    boolean server -> server
    org.jboss.netty.channel.socket.nio.NioWorker this$0 -> this$0
    void run() -> run
org.jboss.netty.channel.socket.nio.NioWorkerPool -> org.jboss.netty.channel.socket.nio.NioWorkerPool:
    org.jboss.netty.util.ThreadNameDeterminer determiner -> determiner
    org.jboss.netty.channel.socket.nio.NioWorker newWorker(java.util.concurrent.Executor) -> newWorker
    org.jboss.netty.channel.socket.nio.AbstractNioWorker newWorker(java.util.concurrent.Executor) -> newWorker
org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter -> org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter:
    java.net.ProtocolFamily convert(org.jboss.netty.channel.socket.InternetProtocolFamily) -> convert
org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter$1 -> org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter$1:
    int[] $SwitchMap$org$jboss$netty$channel$socket$InternetProtocolFamily -> $SwitchMap$org$jboss$netty$channel$socket$InternetProtocolFamily
org.jboss.netty.channel.socket.nio.SelectorUtil -> org.jboss.netty.channel.socket.nio.SelectorUtil:
    org.jboss.netty.logging.InternalLogger logger -> logger
    int DEFAULT_IO_THREADS -> DEFAULT_IO_THREADS
    long DEFAULT_SELECT_TIMEOUT -> DEFAULT_SELECT_TIMEOUT
    long SELECT_TIMEOUT -> SELECT_TIMEOUT
    long SELECT_TIMEOUT_NANOS -> SELECT_TIMEOUT_NANOS
    boolean EPOLL_BUG_WORKAROUND -> EPOLL_BUG_WORKAROUND
    java.nio.channels.Selector open() -> open
    int select(java.nio.channels.Selector) -> select
org.jboss.netty.channel.socket.nio.ShareableWorkerPool -> org.jboss.netty.channel.socket.nio.ShareableWorkerPool:
    org.jboss.netty.channel.socket.nio.WorkerPool wrapped -> wrapped
    org.jboss.netty.channel.socket.Worker nextWorker() -> nextWorker
    void rebuildSelectors() -> rebuildSelectors
    void destroy() -> destroy
    void shutdown() -> shutdown
org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator -> org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator:
    java.nio.ByteBuffer buf -> buf
    int exceedCount -> exceedCount
    int maxExceedCount -> maxExceedCount
    int percentual -> percentual
    java.nio.ByteBuffer get(int) -> get
    java.nio.ByteBuffer newBuffer(int) -> newBuffer
    int normalizeCapacity(int) -> normalizeCapacity
    void releaseExternalResources() -> releaseExternalResources
org.jboss.netty.channel.socket.nio.SocketSendBufferPool -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool:
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$SendBuffer EMPTY_BUFFER -> EMPTY_BUFFER
    int DEFAULT_PREALLOCATION_SIZE -> DEFAULT_PREALLOCATION_SIZE
    int ALIGN_SHIFT -> ALIGN_SHIFT
    int ALIGN_MASK -> ALIGN_MASK
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PreallocationRef poolHead -> poolHead
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation current -> current
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$SendBuffer acquire(java.lang.Object) -> acquire
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$SendBuffer acquire(org.jboss.netty.channel.FileRegion) -> acquire
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$SendBuffer acquire(org.jboss.netty.buffer.ChannelBuffer) -> acquire
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation getPreallocation() -> getPreallocation
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation getPreallocation0() -> getPreallocation0
    int align(int) -> align
    void releaseExternalResources() -> releaseExternalResources
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation access$000(org.jboss.netty.channel.socket.nio.SocketSendBufferPool) -> access$000
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PreallocationRef access$102(org.jboss.netty.channel.socket.nio.SocketSendBufferPool,org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PreallocationRef) -> access$102
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PreallocationRef access$100(org.jboss.netty.channel.socket.nio.SocketSendBufferPool) -> access$100
org.jboss.netty.channel.socket.nio.SocketSendBufferPool$EmptySendBuffer -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool$EmptySendBuffer:
    boolean finished() -> finished
    long writtenBytes() -> writtenBytes
    long totalBytes() -> totalBytes
    long transferTo(java.nio.channels.WritableByteChannel) -> transferTo
    long transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress) -> transferTo
    void release() -> release
org.jboss.netty.channel.socket.nio.SocketSendBufferPool$FileSendBuffer -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool$FileSendBuffer:
    org.jboss.netty.channel.FileRegion file -> file
    long writtenBytes -> writtenBytes
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool this$0 -> this$0
    boolean finished() -> finished
    long writtenBytes() -> writtenBytes
    long totalBytes() -> totalBytes
    long transferTo(java.nio.channels.WritableByteChannel) -> transferTo
    long transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress) -> transferTo
    void release() -> release
org.jboss.netty.channel.socket.nio.SocketSendBufferPool$GatheringSendBuffer -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool$GatheringSendBuffer:
    java.nio.ByteBuffer[] buffers -> buffers
    int last -> last
    long written -> written
    int total -> total
    boolean finished() -> finished
    long writtenBytes() -> writtenBytes
    long totalBytes() -> totalBytes
    long transferTo(java.nio.channels.WritableByteChannel) -> transferTo
    long transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress) -> transferTo
    void release() -> release
org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PooledSendBuffer -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PooledSendBuffer:
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation parent -> parent
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool this$0 -> this$0
    void release() -> release
org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation:
    java.nio.ByteBuffer buffer -> buffer
    int refCnt -> refCnt
org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PreallocationRef -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PreallocationRef:
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PreallocationRef next -> next
    org.jboss.netty.channel.socket.nio.SocketSendBufferPool this$0 -> this$0
org.jboss.netty.channel.socket.nio.SocketSendBufferPool$SendBuffer -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool$SendBuffer:
    boolean finished() -> finished
    long writtenBytes() -> writtenBytes
    long totalBytes() -> totalBytes
    long transferTo(java.nio.channels.WritableByteChannel) -> transferTo
    long transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress) -> transferTo
    void release() -> release
org.jboss.netty.channel.socket.nio.SocketSendBufferPool$UnpooledSendBuffer -> org.jboss.netty.channel.socket.nio.SocketSendBufferPool$UnpooledSendBuffer:
    java.nio.ByteBuffer buffer -> buffer
    int initialPos -> initialPos
    boolean finished() -> finished
    long writtenBytes() -> writtenBytes
    long totalBytes() -> totalBytes
    long transferTo(java.nio.channels.WritableByteChannel) -> transferTo
    long transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress) -> transferTo
    void release() -> release
org.jboss.netty.channel.socket.nio.WorkerPool -> org.jboss.netty.channel.socket.nio.WorkerPool:
    org.jboss.netty.channel.socket.Worker nextWorker() -> nextWorker
org.jboss.netty.channel.socket.oio.AbstractOioChannel -> org.jboss.netty.channel.socket.oio.AbstractOioChannel:
    java.net.InetSocketAddress localAddress -> localAddress
    java.net.InetSocketAddress remoteAddress -> remoteAddress
    java.lang.Thread workerThread -> workerThread
    org.jboss.netty.channel.socket.Worker worker -> worker
    java.lang.Object interestOpsLock -> interestOpsLock
    boolean setClosed() -> setClosed
    int getInternalInterestOps() -> getInternalInterestOps
    void setInternalInterestOps(int) -> setInternalInterestOps
    org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress) -> write
    boolean isBound() -> isBound
    boolean isConnected() -> isConnected
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
    boolean isSocketBound() -> isSocketBound
    boolean isSocketConnected() -> isSocketConnected
    boolean isSocketClosed() -> isSocketClosed
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.InetSocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    void closeSocket() -> closeSocket
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
org.jboss.netty.channel.socket.oio.AbstractOioChannelSink -> org.jboss.netty.channel.socket.oio.AbstractOioChannelSink:
    org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable) -> execute
    boolean isFireExceptionCaughtLater(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable) -> isFireExceptionCaughtLater
org.jboss.netty.channel.socket.oio.AbstractOioWorker -> org.jboss.netty.channel.socket.oio.AbstractOioWorker:
    java.util.Queue eventQueue -> eventQueue
    org.jboss.netty.channel.socket.oio.AbstractOioChannel channel -> channel
    java.lang.Thread thread -> thread
    boolean done -> done
    void run() -> run
    boolean isIoThread(org.jboss.netty.channel.socket.oio.AbstractOioChannel) -> isIoThread
    void executeInIoThread(java.lang.Runnable) -> executeInIoThread
    void processEventQueue() -> processEventQueue
    boolean process() -> process
    void setInterestOps(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,int) -> setInterestOps
    void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture) -> close
    void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean) -> close
org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel -> org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel:
    java.io.PushbackInputStream in -> in
    java.io.OutputStream out -> out
    java.io.PushbackInputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
org.jboss.netty.channel.socket.oio.OioClientSocketChannel -> org.jboss.netty.channel.socket.oio.OioClientSocketChannel:
    java.io.PushbackInputStream in -> in
    java.io.OutputStream out -> out
    java.io.PushbackInputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory -> org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:
    java.util.concurrent.Executor workerExecutor -> workerExecutor
    org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink sink -> sink
    boolean shutdownExecutor -> shutdownExecutor
    org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void shutdown() -> shutdown
    void releaseExternalResources() -> releaseExternalResources
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink -> org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:
    java.util.concurrent.Executor workerExecutor -> workerExecutor
    org.jboss.netty.util.ThreadNameDeterminer determiner -> determiner
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void bind(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> bind
    void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> connect
org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink$1 -> org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.socket.oio.OioDatagramChannel -> org.jboss.netty.channel.socket.oio.OioDatagramChannel:
    java.net.MulticastSocket socket -> socket
    org.jboss.netty.channel.socket.DatagramChannelConfig config -> config
    org.jboss.netty.channel.socket.DatagramChannelConfig getConfig() -> getConfig
    org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress) -> joinGroup
    org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface) -> joinGroup
    void ensureBound() -> ensureBound
    org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress) -> leaveGroup
    org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface) -> leaveGroup
    boolean isSocketBound() -> isSocketBound
    boolean isSocketConnected() -> isSocketConnected
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.InetSocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    void closeSocket() -> closeSocket
    boolean isSocketClosed() -> isSocketClosed
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory -> org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:
    java.util.concurrent.Executor workerExecutor -> workerExecutor
    org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink sink -> sink
    boolean shutdownExecutor -> shutdownExecutor
    org.jboss.netty.channel.socket.DatagramChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void shutdown() -> shutdown
    void releaseExternalResources() -> releaseExternalResources
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink -> org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:
    java.util.concurrent.Executor workerExecutor -> workerExecutor
    org.jboss.netty.util.ThreadNameDeterminer determiner -> determiner
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void bind(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> bind
    void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> connect
org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink$1 -> org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.socket.oio.OioDatagramWorker -> org.jboss.netty.channel.socket.oio.OioDatagramWorker:
    boolean process() -> process
    void write(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress) -> write
    void disconnect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture) -> disconnect
org.jboss.netty.channel.socket.oio.OioServerSocketChannel -> org.jboss.netty.channel.socket.oio.OioServerSocketChannel:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.net.ServerSocket socket -> socket
    java.util.concurrent.locks.Lock shutdownLock -> shutdownLock
    org.jboss.netty.channel.socket.ServerSocketChannelConfig config -> config
    org.jboss.netty.channel.socket.ServerSocketChannelConfig getConfig() -> getConfig
    java.net.InetSocketAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getRemoteAddress() -> getRemoteAddress
    boolean isBound() -> isBound
    boolean setClosed() -> setClosed
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory -> org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:
    java.util.concurrent.Executor bossExecutor -> bossExecutor
    java.util.concurrent.Executor workerExecutor -> workerExecutor
    org.jboss.netty.channel.ChannelSink sink -> sink
    boolean shutdownExecutor -> shutdownExecutor
    org.jboss.netty.channel.socket.ServerSocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void shutdown() -> shutdown
    void releaseExternalResources() -> releaseExternalResources
    org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink -> org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.concurrent.Executor workerExecutor -> workerExecutor
    org.jboss.netty.util.ThreadNameDeterminer determiner -> determiner
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void handleServerSocket(org.jboss.netty.channel.ChannelEvent) -> handleServerSocket
    void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent) -> handleAcceptedSocket
    void bind(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress) -> bind
    void close(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture) -> close
    org.jboss.netty.util.ThreadNameDeterminer access$000(org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink) -> access$000
org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$1 -> org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$Boss -> org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$Boss:
    org.jboss.netty.channel.socket.oio.OioServerSocketChannel channel -> channel
    org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink this$0 -> this$0
    void run() -> run
org.jboss.netty.channel.socket.oio.OioSocketChannel -> org.jboss.netty.channel.socket.oio.OioSocketChannel:
    java.net.Socket socket -> socket
    org.jboss.netty.channel.socket.SocketChannelConfig config -> config
    org.jboss.netty.channel.socket.SocketChannelConfig getConfig() -> getConfig
    java.io.PushbackInputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    boolean isSocketBound() -> isSocketBound
    boolean isSocketConnected() -> isSocketConnected
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.InetSocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    void closeSocket() -> closeSocket
    boolean isSocketClosed() -> isSocketClosed
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
org.jboss.netty.channel.socket.oio.OioWorker -> org.jboss.netty.channel.socket.oio.OioWorker:
    java.util.regex.Pattern SOCKET_CLOSED_MESSAGE -> SOCKET_CLOSED_MESSAGE
    void run() -> run
    boolean process() -> process
    void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object) -> write
org.jboss.netty.container.microcontainer.NettyLoggerConfigurator -> org.jboss.netty.container.microcontainer.NettyLoggerConfigurator:
org.jboss.netty.container.osgi.NettyBundleActivator -> org.jboss.netty.container.osgi.NettyBundleActivator:
    org.jboss.netty.logging.OsgiLoggerFactory loggerFactory -> loggerFactory
    void start(org.osgi.framework.BundleContext) -> start
    void stop(org.osgi.framework.BundleContext) -> stop
org.jboss.netty.container.spring.NettyLoggerConfigurator -> org.jboss.netty.container.spring.NettyLoggerConfigurator:
org.jboss.netty.handler.codec.PrematureChannelClosureException -> org.jboss.netty.handler.codec.PrematureChannelClosureException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.base64.Base64 -> org.jboss.netty.handler.codec.base64.Base64:
    int MAX_LINE_LENGTH -> MAX_LINE_LENGTH
    byte EQUALS_SIGN -> EQUALS_SIGN
    byte NEW_LINE -> NEW_LINE
    byte WHITE_SPACE_ENC -> WHITE_SPACE_ENC
    byte EQUALS_SIGN_ENC -> EQUALS_SIGN_ENC
    byte[] alphabet(org.jboss.netty.handler.codec.base64.Base64Dialect) -> alphabet
    byte[] decodabet(org.jboss.netty.handler.codec.base64.Base64Dialect) -> decodabet
    boolean breakLines(org.jboss.netty.handler.codec.base64.Base64Dialect) -> breakLines
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBufferFactory) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.buffer.ChannelBufferFactory) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferFactory) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.buffer.ChannelBufferFactory) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory) -> encode
    void encode3to4(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBuffer,int,org.jboss.netty.handler.codec.base64.Base64Dialect) -> encode3to4
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer) -> decode
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect) -> decode
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBufferFactory) -> decode
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory) -> decode
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int) -> decode
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect) -> decode
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferFactory) -> decode
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory) -> decode
    int decode4to3(byte[],int,org.jboss.netty.buffer.ChannelBuffer,int,org.jboss.netty.handler.codec.base64.Base64Dialect) -> decode4to3
org.jboss.netty.handler.codec.base64.Base64Decoder -> org.jboss.netty.handler.codec.base64.Base64Decoder:
    org.jboss.netty.handler.codec.base64.Base64Dialect dialect -> dialect
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> decode
org.jboss.netty.handler.codec.base64.Base64Dialect -> org.jboss.netty.handler.codec.base64.Base64Dialect:
    org.jboss.netty.handler.codec.base64.Base64Dialect STANDARD -> STANDARD
    org.jboss.netty.handler.codec.base64.Base64Dialect URL_SAFE -> URL_SAFE
    org.jboss.netty.handler.codec.base64.Base64Dialect ORDERED -> ORDERED
    byte[] alphabet -> alphabet
    byte[] decodabet -> decodabet
    boolean breakLinesByDefault -> breakLinesByDefault
    org.jboss.netty.handler.codec.base64.Base64Dialect[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.base64.Base64Dialect[] values() -> values
    org.jboss.netty.handler.codec.base64.Base64Dialect valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.base64.Base64Encoder -> org.jboss.netty.handler.codec.base64.Base64Encoder:
    boolean breakLines -> breakLines
    org.jboss.netty.handler.codec.base64.Base64Dialect dialect -> dialect
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.compression.CompressionException -> org.jboss.netty.handler.codec.compression.CompressionException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.compression.JdkZlibEncoder -> org.jboss.netty.handler.codec.compression.JdkZlibEncoder:
    org.jboss.netty.handler.codec.compression.ZlibWrapper wrapper -> wrapper
    java.util.zip.Deflater deflater -> deflater
    java.util.concurrent.atomic.AtomicBoolean finished -> finished
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    byte[] out -> out
    java.util.zip.CRC32 crc -> crc
    byte[] gzipHeader -> gzipHeader
    boolean writeHeader -> writeHeader
    org.jboss.netty.channel.ChannelFuture close() -> close
    boolean isGzip() -> isGzip
    boolean isClosed() -> isClosed
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
    int estimateCompressedSize(int) -> estimateCompressedSize
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> finishEncode
    void deflate(org.jboss.netty.buffer.ChannelBuffer) -> deflate
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.codec.compression.JdkZlibEncoder$1 -> org.jboss.netty.handler.codec.compression.JdkZlibEncoder$1:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.channel.ChannelEvent val$evt -> val$evt
    org.jboss.netty.handler.codec.compression.JdkZlibEncoder this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.compression.JdkZlibEncoder$2 -> org.jboss.netty.handler.codec.compression.JdkZlibEncoder$2:
    int[] $SwitchMap$org$jboss$netty$handler$codec$compression$ZlibWrapper -> $SwitchMap$org$jboss$netty$handler$codec$compression$ZlibWrapper
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.handler.codec.compression.ZlibDecoder -> org.jboss.netty.handler.codec.compression.ZlibDecoder:
    org.jboss.netty.util.internal.jzlib.ZStream z -> z
    byte[] dictionary -> dictionary
    boolean finished -> finished
    boolean isClosed() -> isClosed
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> decode
org.jboss.netty.handler.codec.compression.ZlibEncoder -> org.jboss.netty.handler.codec.compression.ZlibEncoder:
    byte[] EMPTY_ARRAY -> EMPTY_ARRAY
    int wrapperOverhead -> wrapperOverhead
    org.jboss.netty.util.internal.jzlib.ZStream z -> z
    java.util.concurrent.atomic.AtomicBoolean finished -> finished
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.channel.ChannelFuture close() -> close
    boolean isClosed() -> isClosed
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> finishEncode
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.codec.compression.ZlibEncoder$1 -> org.jboss.netty.handler.codec.compression.ZlibEncoder$1:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.channel.ChannelEvent val$evt -> val$evt
    org.jboss.netty.handler.codec.compression.ZlibEncoder this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.compression.ZlibEncoder$2 -> org.jboss.netty.handler.codec.compression.ZlibEncoder$2:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.handler.codec.compression.ZlibUtil -> org.jboss.netty.handler.codec.compression.ZlibUtil:
    void fail(org.jboss.netty.util.internal.jzlib.ZStream,java.lang.String,int) -> fail
    org.jboss.netty.handler.codec.compression.CompressionException exception(org.jboss.netty.util.internal.jzlib.ZStream,java.lang.String,int) -> exception
    java.lang.Enum convertWrapperType(org.jboss.netty.handler.codec.compression.ZlibWrapper) -> convertWrapperType
    int wrapperOverhead(org.jboss.netty.handler.codec.compression.ZlibWrapper) -> wrapperOverhead
org.jboss.netty.handler.codec.compression.ZlibUtil$1 -> org.jboss.netty.handler.codec.compression.ZlibUtil$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$compression$ZlibWrapper -> $SwitchMap$org$jboss$netty$handler$codec$compression$ZlibWrapper
org.jboss.netty.handler.codec.compression.ZlibWrapper -> org.jboss.netty.handler.codec.compression.ZlibWrapper:
    org.jboss.netty.handler.codec.compression.ZlibWrapper ZLIB -> ZLIB
    org.jboss.netty.handler.codec.compression.ZlibWrapper GZIP -> GZIP
    org.jboss.netty.handler.codec.compression.ZlibWrapper NONE -> NONE
    org.jboss.netty.handler.codec.compression.ZlibWrapper ZLIB_OR_NONE -> ZLIB_OR_NONE
    org.jboss.netty.handler.codec.compression.ZlibWrapper[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.compression.ZlibWrapper[] values() -> values
    org.jboss.netty.handler.codec.compression.ZlibWrapper valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder -> org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:
    org.jboss.netty.channel.Channel channel -> channel
    org.jboss.netty.channel.ChannelPipeline pipeline -> pipeline
    org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink sink -> sink
    java.util.Queue productQueue -> productQueue
    void fireInitialEvents() -> fireInitialEvents
    void configurePipeline(org.jboss.netty.channel.ChannelHandler[]) -> configurePipeline
    boolean finish() -> finish
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    boolean isEmpty() -> isEmpty
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    java.lang.Object[] pollAll() -> pollAll
    java.lang.Object[] pollAll(java.lang.Object[]) -> pollAll
    int size() -> size
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelPipeline -> org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelPipeline:
    void notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable) -> notifyHandlerException
org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink -> org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:
    boolean $assertionsDisabled -> $assertionsDisabled
    org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder this$0 -> this$0
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent) -> eventSunk
    void handleEvent(org.jboss.netty.channel.ChannelEvent) -> handleEvent
    void exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException) -> exceptionCaught
    org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable) -> execute
org.jboss.netty.handler.codec.embedder.CodecEmbedder -> org.jboss.netty.handler.codec.embedder.CodecEmbedder:
    boolean offer(java.lang.Object) -> offer
    boolean finish() -> finish
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    java.lang.Object[] pollAll() -> pollAll
    java.lang.Object[] pollAll(java.lang.Object[]) -> pollAll
    int size() -> size
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
org.jboss.netty.handler.codec.embedder.CodecEmbedderException -> org.jboss.netty.handler.codec.embedder.CodecEmbedderException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.embedder.DecoderEmbedder -> org.jboss.netty.handler.codec.embedder.DecoderEmbedder:
    boolean offer(java.lang.Object) -> offer
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
    boolean finish() -> finish
org.jboss.netty.handler.codec.embedder.EmbeddedChannel -> org.jboss.netty.handler.codec.embedder.EmbeddedChannel:
    java.lang.Integer DUMMY_ID -> DUMMY_ID
    org.jboss.netty.channel.ChannelConfig config -> config
    java.net.SocketAddress localAddress -> localAddress
    java.net.SocketAddress remoteAddress -> remoteAddress
    org.jboss.netty.channel.ChannelConfig getConfig() -> getConfig
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    boolean isBound() -> isBound
    boolean isConnected() -> isConnected
org.jboss.netty.handler.codec.embedder.EmbeddedChannelFactory -> org.jboss.netty.handler.codec.embedder.EmbeddedChannelFactory:
    org.jboss.netty.channel.ChannelFactory INSTANCE -> INSTANCE
    org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline) -> newChannel
    void releaseExternalResources() -> releaseExternalResources
    void shutdown() -> shutdown
org.jboss.netty.handler.codec.embedder.EmbeddedSocketAddress -> org.jboss.netty.handler.codec.embedder.EmbeddedSocketAddress:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.embedder.EncoderEmbedder -> org.jboss.netty.handler.codec.embedder.EncoderEmbedder:
    boolean offer(java.lang.Object) -> offer
    org.jboss.netty.channel.ChannelPipeline getPipeline() -> getPipeline
    boolean finish() -> finish
org.jboss.netty.handler.codec.frame.CorruptedFrameException -> org.jboss.netty.handler.codec.frame.CorruptedFrameException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder -> org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:
    org.jboss.netty.buffer.ChannelBuffer[] delimiters -> delimiters
    int maxFrameLength -> maxFrameLength
    boolean stripDelimiter -> stripDelimiter
    boolean failFast -> failFast
    boolean discardingTooLongFrame -> discardingTooLongFrame
    int tooLongFrameLength -> tooLongFrameLength
    org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder lineBasedDecoder -> lineBasedDecoder
    boolean isLineBased(org.jboss.netty.buffer.ChannelBuffer[]) -> isLineBased
    boolean isSubclass() -> isSubclass
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    void fail(org.jboss.netty.channel.ChannelHandlerContext,long) -> fail
    int indexOf(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer) -> indexOf
    void validateDelimiter(org.jboss.netty.buffer.ChannelBuffer) -> validateDelimiter
    void validateMaxFrameLength(int) -> validateMaxFrameLength
org.jboss.netty.handler.codec.frame.Delimiters -> org.jboss.netty.handler.codec.frame.Delimiters:
    org.jboss.netty.buffer.ChannelBuffer[] nulDelimiter() -> nulDelimiter
    org.jboss.netty.buffer.ChannelBuffer[] lineDelimiter() -> lineDelimiter
org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder -> org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder:
    int frameLength -> frameLength
    boolean allocateFullBuffer -> allocateFullBuffer
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    org.jboss.netty.buffer.ChannelBuffer newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int) -> newCumulationBuffer
org.jboss.netty.handler.codec.frame.FrameDecoder -> org.jboss.netty.handler.codec.frame.FrameDecoder:
    int DEFAULT_MAX_COMPOSITEBUFFER_COMPONENTS -> DEFAULT_MAX_COMPOSITEBUFFER_COMPONENTS
    boolean unfold -> unfold
    org.jboss.netty.buffer.ChannelBuffer cumulation -> cumulation
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    int copyThreshold -> copyThreshold
    int maxCumulationBufferComponents -> maxCumulationBufferComponents
    boolean $assertionsDisabled -> $assertionsDisabled
    boolean isUnfold() -> isUnfold
    void setUnfold(boolean) -> setUnfold
    int getMaxCumulationBufferCapacity() -> getMaxCumulationBufferCapacity
    void setMaxCumulationBufferCapacity(int) -> setMaxCumulationBufferCapacity
    int getMaxCumulationBufferComponents() -> getMaxCumulationBufferComponents
    void setMaxCumulationBufferComponents(int) -> setMaxCumulationBufferComponents
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    org.jboss.netty.buffer.ChannelBuffer appendToCumulation(org.jboss.netty.buffer.ChannelBuffer) -> appendToCumulation
    org.jboss.netty.buffer.ChannelBuffer updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer) -> updateCumulation
    void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelDisconnected
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decodeLast
    void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress) -> callDecode
    void unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object) -> unfoldAndFireMessageReceived
    void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> cleanup
    org.jboss.netty.buffer.ChannelBuffer newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int) -> newCumulationBuffer
    void replace(java.lang.String,org.jboss.netty.channel.ChannelHandler) -> replace
    int actualReadableBytes() -> actualReadableBytes
    org.jboss.netty.buffer.ChannelBuffer internalBuffer() -> internalBuffer
    org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int) -> extractFrame
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder -> org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:
    int maxFrameLength -> maxFrameLength
    int lengthFieldOffset -> lengthFieldOffset
    int lengthFieldLength -> lengthFieldLength
    int lengthFieldEndOffset -> lengthFieldEndOffset
    int lengthAdjustment -> lengthAdjustment
    int initialBytesToStrip -> initialBytesToStrip
    boolean failFast -> failFast
    boolean discardingTooLongFrame -> discardingTooLongFrame
    long tooLongFrameLength -> tooLongFrameLength
    long bytesToDiscard -> bytesToDiscard
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    void failIfNecessary(org.jboss.netty.channel.ChannelHandlerContext,boolean) -> failIfNecessary
    void fail(org.jboss.netty.channel.ChannelHandlerContext,long) -> fail
org.jboss.netty.handler.codec.frame.LengthFieldPrepender -> org.jboss.netty.handler.codec.frame.LengthFieldPrepender:
    int lengthFieldLength -> lengthFieldLength
    boolean lengthIncludesLengthFieldLength -> lengthIncludesLengthFieldLength
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder -> org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:
    int maxLength -> maxLength
    boolean failFast -> failFast
    boolean stripDelimiter -> stripDelimiter
    boolean discarding -> discarding
    int discardedBytes -> discardedBytes
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    void fail(org.jboss.netty.channel.ChannelHandlerContext,int) -> fail
    void fail(org.jboss.netty.channel.ChannelHandlerContext,java.lang.String) -> fail
    int findEndOfLine(org.jboss.netty.buffer.ChannelBuffer) -> findEndOfLine
org.jboss.netty.handler.codec.frame.TooLongFrameException -> org.jboss.netty.handler.codec.frame.TooLongFrameException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.Cookie -> org.jboss.netty.handler.codec.http.Cookie:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String getDomain() -> getDomain
    void setDomain(java.lang.String) -> setDomain
    java.lang.String getPath() -> getPath
    void setPath(java.lang.String) -> setPath
    java.lang.String getComment() -> getComment
    void setComment(java.lang.String) -> setComment
    int getMaxAge() -> getMaxAge
    void setMaxAge(int) -> setMaxAge
    int getVersion() -> getVersion
    void setVersion(int) -> setVersion
    boolean isSecure() -> isSecure
    void setSecure(boolean) -> setSecure
    boolean isHttpOnly() -> isHttpOnly
    void setHttpOnly(boolean) -> setHttpOnly
    java.lang.String getCommentUrl() -> getCommentUrl
    void setCommentUrl(java.lang.String) -> setCommentUrl
    boolean isDiscard() -> isDiscard
    void setDiscard(boolean) -> setDiscard
    java.util.Set getPorts() -> getPorts
    void setPorts(int[]) -> setPorts
    void setPorts(java.lang.Iterable) -> setPorts
org.jboss.netty.handler.codec.http.CookieDecoder -> org.jboss.netty.handler.codec.http.CookieDecoder:
    char COMMA -> COMMA
    java.util.Set decode(java.lang.String) -> decode
    void extractKeyValuePairs(java.lang.String,java.util.List,java.util.List) -> extractKeyValuePairs
org.jboss.netty.handler.codec.http.CookieEncoder -> org.jboss.netty.handler.codec.http.CookieEncoder:
    java.util.Set cookies -> cookies
    boolean server -> server
    void addCookie(java.lang.String,java.lang.String) -> addCookie
    void addCookie(org.jboss.netty.handler.codec.http.Cookie) -> addCookie
    java.lang.String encode() -> encode
    java.lang.String encodeServerSide() -> encodeServerSide
    java.lang.String encodeClientSide() -> encodeClientSide
    void add(java.lang.StringBuilder,java.lang.String,java.lang.String) -> add
    void addUnquoted(java.lang.StringBuilder,java.lang.String,java.lang.String) -> addUnquoted
    void addQuoted(java.lang.StringBuilder,java.lang.String,java.lang.String) -> addQuoted
    void add(java.lang.StringBuilder,java.lang.String,int) -> add
org.jboss.netty.handler.codec.http.CookieHeaderNames -> org.jboss.netty.handler.codec.http.CookieHeaderNames:
    java.lang.String PATH -> PATH
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String MAX_AGE -> MAX_AGE
    java.lang.String DOMAIN -> DOMAIN
    java.lang.String SECURE -> SECURE
    java.lang.String HTTPONLY -> HTTPONLY
    java.lang.String COMMENT -> COMMENT
    java.lang.String COMMENTURL -> COMMENTURL
    java.lang.String DISCARD -> DISCARD
    java.lang.String PORT -> PORT
    java.lang.String VERSION -> VERSION
org.jboss.netty.handler.codec.http.DefaultCookie -> org.jboss.netty.handler.codec.http.DefaultCookie:
    java.lang.String name -> name
    java.lang.String value -> value
    java.lang.String domain -> domain
    java.lang.String path -> path
    java.lang.String comment -> comment
    java.lang.String commentUrl -> commentUrl
    boolean discard -> discard
    java.util.Set ports -> ports
    java.util.Set unmodifiablePorts -> unmodifiablePorts
    int maxAge -> maxAge
    int version -> version
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String getDomain() -> getDomain
    void setDomain(java.lang.String) -> setDomain
    java.lang.String getPath() -> getPath
    void setPath(java.lang.String) -> setPath
    java.lang.String getComment() -> getComment
    void setComment(java.lang.String) -> setComment
    java.lang.String getCommentUrl() -> getCommentUrl
    void setCommentUrl(java.lang.String) -> setCommentUrl
    boolean isDiscard() -> isDiscard
    void setDiscard(boolean) -> setDiscard
    java.util.Set getPorts() -> getPorts
    void setPorts(int[]) -> setPorts
    void setPorts(java.lang.Iterable) -> setPorts
    int getMaxAge() -> getMaxAge
    void setMaxAge(int) -> setMaxAge
    int getVersion() -> getVersion
    void setVersion(int) -> setVersion
    boolean isSecure() -> isSecure
    void setSecure(boolean) -> setSecure
    boolean isHttpOnly() -> isHttpOnly
    void setHttpOnly(boolean) -> setHttpOnly
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.handler.codec.http.Cookie) -> compareTo
    java.lang.String toString() -> toString
    java.lang.String validateValue(java.lang.String,java.lang.String) -> validateValue
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.DefaultHttpChunk -> org.jboss.netty.handler.codec.http.DefaultHttpChunk:
    org.jboss.netty.buffer.ChannelBuffer content -> content
    boolean last -> last
    org.jboss.netty.buffer.ChannelBuffer getContent() -> getContent
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    boolean isLast() -> isLast
org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer -> org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:
    org.jboss.netty.handler.codec.http.HttpHeaders trailingHeaders -> trailingHeaders
    boolean isLast() -> isLast
    org.jboss.netty.buffer.ChannelBuffer getContent() -> getContent
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    org.jboss.netty.handler.codec.http.HttpHeaders trailingHeaders() -> trailingHeaders
    java.lang.String toString() -> toString
    void appendHeaders(java.lang.StringBuilder) -> appendHeaders
org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders -> org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:
    org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object) -> add
    org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable) -> add
    org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable) -> set
    org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object) -> set
    void validateName(java.lang.String) -> validateName
org.jboss.netty.handler.codec.http.DefaultHttpHeaders -> org.jboss.netty.handler.codec.http.DefaultHttpHeaders:
    int BUCKET_SIZE -> BUCKET_SIZE
    java.util.Set KNOWN_NAMES -> KNOWN_NAMES
    java.util.Set KNOWN_VALUES -> KNOWN_VALUES
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry[] entries -> entries
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry head -> head
    boolean validate -> validate
    java.util.Set createSet(java.lang.Class) -> createSet
    int hash(java.lang.String,boolean) -> hash
    boolean eq(java.lang.String,java.lang.String) -> eq
    char toLowerCase(char) -> toLowerCase
    int index(int) -> index
    void validateHeaderValue0(java.lang.String) -> validateHeaderValue0
    org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object) -> add
    org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable) -> add
    void add0(int,int,java.lang.String,java.lang.String) -> add0
    org.jboss.netty.handler.codec.http.HttpHeaders remove(java.lang.String) -> remove
    void remove0(int,int,java.lang.String) -> remove0
    org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object) -> set
    org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable) -> set
    org.jboss.netty.handler.codec.http.HttpHeaders clear() -> clear
    java.lang.String get(java.lang.String) -> get
    java.lang.String get(java.lang.String,boolean) -> get
    java.util.List getAll(java.lang.String) -> getAll
    java.util.List entries() -> entries
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.String) -> contains
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.String,java.lang.String,boolean) -> contains
    java.util.Set names() -> names
    java.lang.String toString(java.lang.Object) -> toString
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry access$100(org.jboss.netty.handler.codec.http.DefaultHttpHeaders) -> access$100
org.jboss.netty.handler.codec.http.DefaultHttpHeaders$1 -> org.jboss.netty.handler.codec.http.DefaultHttpHeaders$1:
org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry -> org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry:
    int hash -> hash
    java.lang.String key -> key
    java.lang.String value -> value
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry next -> next
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry before -> before
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry after -> after
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders this$0 -> this$0
    void remove() -> remove
    void addBefore(org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry) -> addBefore
    java.lang.String getKey() -> getKey
    java.lang.String getValue() -> getValue
    java.lang.String setValue(java.lang.String) -> setValue
    java.lang.String toString() -> toString
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderIterator -> org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderIterator:
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry current -> current
    org.jboss.netty.handler.codec.http.DefaultHttpHeaders this$0 -> this$0
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.jboss.netty.handler.codec.http.DefaultHttpMessage -> org.jboss.netty.handler.codec.http.DefaultHttpMessage:
    org.jboss.netty.handler.codec.http.HttpHeaders headers -> headers
    org.jboss.netty.handler.codec.http.HttpVersion version -> version
    org.jboss.netty.buffer.ChannelBuffer content -> content
    boolean chunked -> chunked
    org.jboss.netty.handler.codec.http.HttpHeaders headers() -> headers
    boolean isChunked() -> isChunked
    void setChunked(boolean) -> setChunked
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    org.jboss.netty.handler.codec.http.HttpVersion getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(org.jboss.netty.handler.codec.http.HttpVersion) -> setProtocolVersion
    org.jboss.netty.buffer.ChannelBuffer getContent() -> getContent
    java.lang.String toString() -> toString
    void appendHeaders(java.lang.StringBuilder) -> appendHeaders
org.jboss.netty.handler.codec.http.DefaultHttpRequest -> org.jboss.netty.handler.codec.http.DefaultHttpRequest:
    org.jboss.netty.handler.codec.http.HttpMethod method -> method
    java.lang.String uri -> uri
    org.jboss.netty.handler.codec.http.HttpMethod getMethod() -> getMethod
    void setMethod(org.jboss.netty.handler.codec.http.HttpMethod) -> setMethod
    java.lang.String getUri() -> getUri
    void setUri(java.lang.String) -> setUri
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.DefaultHttpResponse -> org.jboss.netty.handler.codec.http.DefaultHttpResponse:
    org.jboss.netty.handler.codec.http.HttpResponseStatus status -> status
    org.jboss.netty.handler.codec.http.HttpResponseStatus getStatus() -> getStatus
    void setStatus(org.jboss.netty.handler.codec.http.HttpResponseStatus) -> setStatus
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.HttpChunk -> org.jboss.netty.handler.codec.http.HttpChunk:
    org.jboss.netty.handler.codec.http.HttpChunkTrailer LAST_CHUNK -> LAST_CHUNK
    boolean isLast() -> isLast
    org.jboss.netty.buffer.ChannelBuffer getContent() -> getContent
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
org.jboss.netty.handler.codec.http.HttpChunk$1 -> org.jboss.netty.handler.codec.http.HttpChunk$1:
    org.jboss.netty.buffer.ChannelBuffer getContent() -> getContent
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    boolean isLast() -> isLast
    org.jboss.netty.handler.codec.http.HttpHeaders trailingHeaders() -> trailingHeaders
org.jboss.netty.handler.codec.http.HttpChunkAggregator -> org.jboss.netty.handler.codec.http.HttpChunkAggregator:
    int DEFAULT_MAX_COMPOSITEBUFFER_COMPONENTS -> DEFAULT_MAX_COMPOSITEBUFFER_COMPONENTS
    org.jboss.netty.buffer.ChannelBuffer CONTINUE -> CONTINUE
    int maxContentLength -> maxContentLength
    org.jboss.netty.handler.codec.http.HttpMessage currentMessage -> currentMessage
    boolean tooLongFrameFound -> tooLongFrameFound
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    int maxCumulationBufferComponents -> maxCumulationBufferComponents
    int getMaxCumulationBufferComponents() -> getMaxCumulationBufferComponents
    void setMaxCumulationBufferComponents(int) -> setMaxCumulationBufferComponents
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void appendToCumulation(org.jboss.netty.buffer.ChannelBuffer) -> appendToCumulation
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.codec.http.HttpChunkTrailer -> org.jboss.netty.handler.codec.http.HttpChunkTrailer:
    boolean isLast() -> isLast
    org.jboss.netty.handler.codec.http.HttpHeaders trailingHeaders() -> trailingHeaders
org.jboss.netty.handler.codec.http.HttpClientCodec -> org.jboss.netty.handler.codec.http.HttpClientCodec:
    java.util.Queue queue -> queue
    boolean done -> done
    org.jboss.netty.handler.codec.http.HttpRequestEncoder encoder -> encoder
    org.jboss.netty.handler.codec.http.HttpResponseDecoder decoder -> decoder
    java.util.concurrent.atomic.AtomicLong requestResponseCounter -> requestResponseCounter
    boolean failOnMissingResponse -> failOnMissingResponse
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    boolean access$000(org.jboss.netty.handler.codec.http.HttpClientCodec) -> access$000
    java.util.concurrent.atomic.AtomicLong access$100(org.jboss.netty.handler.codec.http.HttpClientCodec) -> access$100
org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder -> org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:
    org.jboss.netty.handler.codec.http.HttpClientCodec this$0 -> this$0
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State) -> decode
    void decrement(java.lang.Object) -> decrement
    boolean isContentAlwaysEmpty(org.jboss.netty.handler.codec.http.HttpMessage) -> isContentAlwaysEmpty
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.http.HttpClientCodec$Encoder -> org.jboss.netty.handler.codec.http.HttpClientCodec$Encoder:
    org.jboss.netty.handler.codec.http.HttpClientCodec this$0 -> this$0
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.http.HttpCodecUtil -> org.jboss.netty.handler.codec.http.HttpCodecUtil:
    void validateHeaderName(java.lang.String) -> validateHeaderName
    void validateHeaderValue(java.lang.String) -> validateHeaderValue
    boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage) -> isTransferEncodingChunked
    void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage) -> removeTransferEncodingChunked
    boolean isContentLengthSet(org.jboss.netty.handler.codec.http.HttpMessage) -> isContentLengthSet
org.jboss.netty.handler.codec.http.HttpConstants -> org.jboss.netty.handler.codec.http.HttpConstants:
    byte SP -> SP
    byte HT -> HT
    byte CR -> CR
    byte EQUALS -> EQUALS
    byte LF -> LF
    byte COLON -> COLON
    byte SEMICOLON -> SEMICOLON
    byte COMMA -> COMMA
    byte DOUBLE_QUOTE -> DOUBLE_QUOTE
    java.nio.charset.Charset DEFAULT_CHARSET -> DEFAULT_CHARSET
org.jboss.netty.handler.codec.http.HttpContentCompressor -> org.jboss.netty.handler.codec.http.HttpContentCompressor:
    org.jboss.netty.logging.InternalLogger logger -> logger
    int DEFAULT_JDK_WINDOW_SIZE -> DEFAULT_JDK_WINDOW_SIZE
    int DEFAULT_JDK_MEM_LEVEL -> DEFAULT_JDK_MEM_LEVEL
    boolean noJdkZlibEncoder -> noJdkZlibEncoder
    int compressionLevel -> compressionLevel
    int windowBits -> windowBits
    int memLevel -> memLevel
    org.jboss.netty.handler.codec.embedder.EncoderEmbedder newContentEncoder(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> newContentEncoder
    java.lang.String getTargetContentEncoding(java.lang.String) -> getTargetContentEncoding
    org.jboss.netty.handler.codec.compression.ZlibWrapper determineWrapper(java.lang.String) -> determineWrapper
org.jboss.netty.handler.codec.http.HttpContentCompressor$1 -> org.jboss.netty.handler.codec.http.HttpContentCompressor$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$compression$ZlibWrapper -> $SwitchMap$org$jboss$netty$handler$codec$compression$ZlibWrapper
org.jboss.netty.handler.codec.http.HttpContentDecoder -> org.jboss.netty.handler.codec.http.HttpContentDecoder:
    org.jboss.netty.handler.codec.embedder.DecoderEmbedder decoder -> decoder
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    org.jboss.netty.handler.codec.embedder.DecoderEmbedder newContentDecoder(java.lang.String) -> newContentDecoder
    java.lang.String getTargetContentEncoding(java.lang.String) -> getTargetContentEncoding
    org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer) -> decode
    org.jboss.netty.buffer.ChannelBuffer finishDecode() -> finishDecode
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.codec.http.HttpContentDecompressor -> org.jboss.netty.handler.codec.http.HttpContentDecompressor:
    org.jboss.netty.handler.codec.embedder.DecoderEmbedder newContentDecoder(java.lang.String) -> newContentDecoder
org.jboss.netty.handler.codec.http.HttpContentEncoder -> org.jboss.netty.handler.codec.http.HttpContentEncoder:
    java.util.Queue acceptEncodingQueue -> acceptEncodingQueue
    org.jboss.netty.handler.codec.embedder.EncoderEmbedder encoder -> encoder
    boolean offerred -> offerred
    boolean $assertionsDisabled -> $assertionsDisabled
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> writeRequested
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    org.jboss.netty.handler.codec.embedder.EncoderEmbedder newContentEncoder(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> newContentEncoder
    java.lang.String getTargetContentEncoding(java.lang.String) -> getTargetContentEncoding
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer) -> encode
    org.jboss.netty.buffer.ChannelBuffer finishEncode() -> finishEncode
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.codec.http.HttpHeaderDateFormat -> org.jboss.netty.handler.codec.http.HttpHeaderDateFormat:
    long serialVersionUID -> serialVersionUID
    java.text.SimpleDateFormat format1 -> format1
    java.text.SimpleDateFormat format2 -> format2
    java.lang.ThreadLocal FORMAT_THREAD_LOCAL -> FORMAT_THREAD_LOCAL
    org.jboss.netty.handler.codec.http.HttpHeaderDateFormat get() -> get
    java.util.Date parse(java.lang.String,java.text.ParsePosition) -> parse
org.jboss.netty.handler.codec.http.HttpHeaderDateFormat$1 -> org.jboss.netty.handler.codec.http.HttpHeaderDateFormat$1:
    org.jboss.netty.handler.codec.http.HttpHeaderDateFormat initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.jboss.netty.handler.codec.http.HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1 -> org.jboss.netty.handler.codec.http.HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2 -> org.jboss.netty.handler.codec.http.HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.HttpHeaders -> org.jboss.netty.handler.codec.http.HttpHeaders:
    org.jboss.netty.handler.codec.http.HttpHeaders EMPTY_HEADERS -> EMPTY_HEADERS
    boolean isKeepAlive(org.jboss.netty.handler.codec.http.HttpMessage) -> isKeepAlive
    void setKeepAlive(org.jboss.netty.handler.codec.http.HttpMessage,boolean) -> setKeepAlive
    java.lang.String getHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> getHeader
    java.lang.String getHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.String) -> getHeader
    void setHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object) -> setHeader
    void setHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable) -> setHeader
    void addHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object) -> addHeader
    void removeHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> removeHeader
    void clearHeaders(org.jboss.netty.handler.codec.http.HttpMessage) -> clearHeaders
    int getIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> getIntHeader
    int getIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int) -> getIntHeader
    void setIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int) -> setIntHeader
    void setIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable) -> setIntHeader
    void addIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int) -> addIntHeader
    java.util.Date getDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> getDateHeader
    java.util.Date getDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date) -> getDateHeader
    void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date) -> setDateHeader
    void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable) -> setDateHeader
    void addDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date) -> addDateHeader
    long getContentLength(org.jboss.netty.handler.codec.http.HttpMessage) -> getContentLength
    long getContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long) -> getContentLength
    int getWebSocketContentLength(org.jboss.netty.handler.codec.http.HttpMessage) -> getWebSocketContentLength
    void setContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long) -> setContentLength
    java.lang.String getHost(org.jboss.netty.handler.codec.http.HttpMessage) -> getHost
    java.lang.String getHost(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> getHost
    void setHost(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> setHost
    java.util.Date getDate(org.jboss.netty.handler.codec.http.HttpMessage) -> getDate
    java.util.Date getDate(org.jboss.netty.handler.codec.http.HttpMessage,java.util.Date) -> getDate
    void setDate(org.jboss.netty.handler.codec.http.HttpMessage,java.util.Date) -> setDate
    boolean is100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage) -> is100ContinueExpected
    void set100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage) -> set100ContinueExpected
    void set100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage,boolean) -> set100ContinueExpected
    void validateHeaderName(java.lang.String) -> validateHeaderName
    void valideHeaderNameChar(char) -> valideHeaderNameChar
    void validateHeaderValue(java.lang.String) -> validateHeaderValue
    boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage) -> isTransferEncodingChunked
    void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage) -> removeTransferEncodingChunked
    void setTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage) -> setTransferEncodingChunked
    boolean isContentLengthSet(org.jboss.netty.handler.codec.http.HttpMessage) -> isContentLengthSet
    java.lang.String get(java.lang.String) -> get
    java.util.List getAll(java.lang.String) -> getAll
    java.util.List entries() -> entries
    boolean contains(java.lang.String) -> contains
    boolean isEmpty() -> isEmpty
    java.util.Set names() -> names
    org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object) -> add
    org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable) -> add
    org.jboss.netty.handler.codec.http.HttpHeaders add(org.jboss.netty.handler.codec.http.HttpHeaders) -> add
    org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object) -> set
    org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable) -> set
    org.jboss.netty.handler.codec.http.HttpHeaders set(org.jboss.netty.handler.codec.http.HttpHeaders) -> set
    org.jboss.netty.handler.codec.http.HttpHeaders remove(java.lang.String) -> remove
    org.jboss.netty.handler.codec.http.HttpHeaders clear() -> clear
    boolean contains(java.lang.String,java.lang.String,boolean) -> contains
org.jboss.netty.handler.codec.http.HttpHeaders$1 -> org.jboss.netty.handler.codec.http.HttpHeaders$1:
    java.lang.String get(java.lang.String) -> get
    java.util.List getAll(java.lang.String) -> getAll
    java.util.List entries() -> entries
    boolean contains(java.lang.String) -> contains
    boolean isEmpty() -> isEmpty
    java.util.Set names() -> names
    org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object) -> add
    org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable) -> add
    org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object) -> set
    org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable) -> set
    org.jboss.netty.handler.codec.http.HttpHeaders remove(java.lang.String) -> remove
    org.jboss.netty.handler.codec.http.HttpHeaders clear() -> clear
    java.util.Iterator iterator() -> iterator
org.jboss.netty.handler.codec.http.HttpHeaders$Names -> org.jboss.netty.handler.codec.http.HttpHeaders$Names:
    java.lang.String ACCEPT -> ACCEPT
    java.lang.String ACCEPT_CHARSET -> ACCEPT_CHARSET
    java.lang.String ACCEPT_ENCODING -> ACCEPT_ENCODING
    java.lang.String ACCEPT_LANGUAGE -> ACCEPT_LANGUAGE
    java.lang.String ACCEPT_RANGES -> ACCEPT_RANGES
    java.lang.String ACCEPT_PATCH -> ACCEPT_PATCH
    java.lang.String ACCESS_CONTROL_ALLOW_CREDENTIALS -> ACCESS_CONTROL_ALLOW_CREDENTIALS
    java.lang.String ACCESS_CONTROL_ALLOW_HEADERS -> ACCESS_CONTROL_ALLOW_HEADERS
    java.lang.String ACCESS_CONTROL_ALLOW_METHODS -> ACCESS_CONTROL_ALLOW_METHODS
    java.lang.String ACCESS_CONTROL_ALLOW_ORIGIN -> ACCESS_CONTROL_ALLOW_ORIGIN
    java.lang.String ACCESS_CONTROL_EXPOSE_HEADERS -> ACCESS_CONTROL_EXPOSE_HEADERS
    java.lang.String ACCESS_CONTROL_MAX_AGE -> ACCESS_CONTROL_MAX_AGE
    java.lang.String ACCESS_CONTROL_REQUEST_HEADERS -> ACCESS_CONTROL_REQUEST_HEADERS
    java.lang.String ACCESS_CONTROL_REQUEST_METHOD -> ACCESS_CONTROL_REQUEST_METHOD
    java.lang.String AGE -> AGE
    java.lang.String ALLOW -> ALLOW
    java.lang.String AUTHORIZATION -> AUTHORIZATION
    java.lang.String CACHE_CONTROL -> CACHE_CONTROL
    java.lang.String CONNECTION -> CONNECTION
    java.lang.String CONTENT_BASE -> CONTENT_BASE
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LANGUAGE -> CONTENT_LANGUAGE
    java.lang.String CONTENT_LENGTH -> CONTENT_LENGTH
    java.lang.String CONTENT_LOCATION -> CONTENT_LOCATION
    java.lang.String CONTENT_TRANSFER_ENCODING -> CONTENT_TRANSFER_ENCODING
    java.lang.String CONTENT_MD5 -> CONTENT_MD5
    java.lang.String CONTENT_RANGE -> CONTENT_RANGE
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String COOKIE -> COOKIE
    java.lang.String DATE -> DATE
    java.lang.String ETAG -> ETAG
    java.lang.String EXPECT -> EXPECT
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String FROM -> FROM
    java.lang.String HOST -> HOST
    java.lang.String IF_MATCH -> IF_MATCH
    java.lang.String IF_MODIFIED_SINCE -> IF_MODIFIED_SINCE
    java.lang.String IF_NONE_MATCH -> IF_NONE_MATCH
    java.lang.String IF_RANGE -> IF_RANGE
    java.lang.String IF_UNMODIFIED_SINCE -> IF_UNMODIFIED_SINCE
    java.lang.String LAST_MODIFIED -> LAST_MODIFIED
    java.lang.String LOCATION -> LOCATION
    java.lang.String MAX_FORWARDS -> MAX_FORWARDS
    java.lang.String ORIGIN -> ORIGIN
    java.lang.String PRAGMA -> PRAGMA
    java.lang.String PROXY_AUTHENTICATE -> PROXY_AUTHENTICATE
    java.lang.String PROXY_AUTHORIZATION -> PROXY_AUTHORIZATION
    java.lang.String RANGE -> RANGE
    java.lang.String REFERER -> REFERER
    java.lang.String RETRY_AFTER -> RETRY_AFTER
    java.lang.String SEC_WEBSOCKET_KEY1 -> SEC_WEBSOCKET_KEY1
    java.lang.String SEC_WEBSOCKET_KEY2 -> SEC_WEBSOCKET_KEY2
    java.lang.String SEC_WEBSOCKET_LOCATION -> SEC_WEBSOCKET_LOCATION
    java.lang.String SEC_WEBSOCKET_ORIGIN -> SEC_WEBSOCKET_ORIGIN
    java.lang.String SEC_WEBSOCKET_PROTOCOL -> SEC_WEBSOCKET_PROTOCOL
    java.lang.String SEC_WEBSOCKET_VERSION -> SEC_WEBSOCKET_VERSION
    java.lang.String SEC_WEBSOCKET_KEY -> SEC_WEBSOCKET_KEY
    java.lang.String SEC_WEBSOCKET_ACCEPT -> SEC_WEBSOCKET_ACCEPT
    java.lang.String SERVER -> SERVER
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String SET_COOKIE2 -> SET_COOKIE2
    java.lang.String TE -> TE
    java.lang.String TRAILER -> TRAILER
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String UPGRADE -> UPGRADE
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String VARY -> VARY
    java.lang.String VIA -> VIA
    java.lang.String WARNING -> WARNING
    java.lang.String WEBSOCKET_LOCATION -> WEBSOCKET_LOCATION
    java.lang.String WEBSOCKET_ORIGIN -> WEBSOCKET_ORIGIN
    java.lang.String WEBSOCKET_PROTOCOL -> WEBSOCKET_PROTOCOL
    java.lang.String WWW_AUTHENTICATE -> WWW_AUTHENTICATE
org.jboss.netty.handler.codec.http.HttpHeaders$Values -> org.jboss.netty.handler.codec.http.HttpHeaders$Values:
    java.lang.String APPLICATION_X_WWW_FORM_URLENCODED -> APPLICATION_X_WWW_FORM_URLENCODED
    java.lang.String BASE64 -> BASE64
    java.lang.String BINARY -> BINARY
    java.lang.String BOUNDARY -> BOUNDARY
    java.lang.String BYTES -> BYTES
    java.lang.String CHARSET -> CHARSET
    java.lang.String CHUNKED -> CHUNKED
    java.lang.String CLOSE -> CLOSE
    java.lang.String COMPRESS -> COMPRESS
    java.lang.String CONTINUE -> CONTINUE
    java.lang.String DEFLATE -> DEFLATE
    java.lang.String GZIP -> GZIP
    java.lang.String IDENTITY -> IDENTITY
    java.lang.String KEEP_ALIVE -> KEEP_ALIVE
    java.lang.String MAX_AGE -> MAX_AGE
    java.lang.String MAX_STALE -> MAX_STALE
    java.lang.String MIN_FRESH -> MIN_FRESH
    java.lang.String MULTIPART_FORM_DATA -> MULTIPART_FORM_DATA
    java.lang.String MUST_REVALIDATE -> MUST_REVALIDATE
    java.lang.String NO_CACHE -> NO_CACHE
    java.lang.String NO_STORE -> NO_STORE
    java.lang.String NO_TRANSFORM -> NO_TRANSFORM
    java.lang.String NONE -> NONE
    java.lang.String ONLY_IF_CACHED -> ONLY_IF_CACHED
    java.lang.String PRIVATE -> PRIVATE
    java.lang.String PROXY_REVALIDATE -> PROXY_REVALIDATE
    java.lang.String PUBLIC -> PUBLIC
    java.lang.String QUOTED_PRINTABLE -> QUOTED_PRINTABLE
    java.lang.String S_MAXAGE -> S_MAXAGE
    java.lang.String TRAILERS -> TRAILERS
    java.lang.String UPGRADE -> UPGRADE
    java.lang.String WEBSOCKET -> WEBSOCKET
org.jboss.netty.handler.codec.http.HttpMessage -> org.jboss.netty.handler.codec.http.HttpMessage:
    org.jboss.netty.handler.codec.http.HttpVersion getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(org.jboss.netty.handler.codec.http.HttpVersion) -> setProtocolVersion
    org.jboss.netty.handler.codec.http.HttpHeaders headers() -> headers
    org.jboss.netty.buffer.ChannelBuffer getContent() -> getContent
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    boolean isChunked() -> isChunked
    void setChunked(boolean) -> setChunked
org.jboss.netty.handler.codec.http.HttpMessageDecoder -> org.jboss.netty.handler.codec.http.HttpMessageDecoder:
    int maxInitialLineLength -> maxInitialLineLength
    int maxHeaderSize -> maxHeaderSize
    int maxChunkSize -> maxChunkSize
    org.jboss.netty.handler.codec.http.HttpMessage message -> message
    org.jboss.netty.buffer.ChannelBuffer content -> content
    long chunkSize -> chunkSize
    int headerSize -> headerSize
    int contentRead -> contentRead
    boolean $assertionsDisabled -> $assertionsDisabled
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State) -> decode
    boolean isContentAlwaysEmpty(org.jboss.netty.handler.codec.http.HttpMessage) -> isContentAlwaysEmpty
    java.lang.Object reset() -> reset
    void resetState() -> resetState
    void skipControlCharacters(org.jboss.netty.buffer.ChannelBuffer) -> skipControlCharacters
    java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer) -> readFixedLengthContent
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State readHeaders(org.jboss.netty.buffer.ChannelBuffer) -> readHeaders
    org.jboss.netty.handler.codec.http.HttpChunkTrailer readTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer) -> readTrailingHeaders
    java.lang.String readHeader(org.jboss.netty.buffer.ChannelBuffer) -> readHeader
    boolean isDecodingRequest() -> isDecodingRequest
    org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[]) -> createMessage
    int getChunkSize(java.lang.String) -> getChunkSize
    java.lang.String readLine(org.jboss.netty.buffer.ChannelBuffer,int) -> readLine
    java.lang.String[] splitInitialLine(java.lang.String) -> splitInitialLine
    java.lang.String[] splitHeader(java.lang.String) -> splitHeader
    int findNonWhitespace(java.lang.String,int) -> findNonWhitespace
    int findWhitespace(java.lang.String,int) -> findWhitespace
    int findEndOfString(java.lang.String) -> findEndOfString
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.http.HttpMessageDecoder$1 -> org.jboss.netty.handler.codec.http.HttpMessageDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$http$HttpMessageDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$http$HttpMessageDecoder$State
org.jboss.netty.handler.codec.http.HttpMessageDecoder$State -> org.jboss.netty.handler.codec.http.HttpMessageDecoder$State:
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State SKIP_CONTROL_CHARS -> SKIP_CONTROL_CHARS
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_INITIAL -> READ_INITIAL
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_HEADER -> READ_HEADER
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_VARIABLE_LENGTH_CONTENT -> READ_VARIABLE_LENGTH_CONTENT
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_VARIABLE_LENGTH_CONTENT_AS_CHUNKS -> READ_VARIABLE_LENGTH_CONTENT_AS_CHUNKS
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_FIXED_LENGTH_CONTENT -> READ_FIXED_LENGTH_CONTENT
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_FIXED_LENGTH_CONTENT_AS_CHUNKS -> READ_FIXED_LENGTH_CONTENT_AS_CHUNKS
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_CHUNK_SIZE -> READ_CHUNK_SIZE
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_CHUNKED_CONTENT -> READ_CHUNKED_CONTENT
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_CHUNKED_CONTENT_AS_CHUNKS -> READ_CHUNKED_CONTENT_AS_CHUNKS
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_CHUNK_DELIMITER -> READ_CHUNK_DELIMITER
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State READ_CHUNK_FOOTER -> READ_CHUNK_FOOTER
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State UPGRADED -> UPGRADED
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.http.HttpMessageDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.http.HttpMessageEncoder -> org.jboss.netty.handler.codec.http.HttpMessageEncoder:
    byte[] CRLF -> CRLF
    org.jboss.netty.buffer.ChannelBuffer LAST_CHUNK -> LAST_CHUNK
    boolean transferEncodingChunked -> transferEncodingChunked
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
    void encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage) -> encodeHeaders
    void encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer) -> encodeTrailingHeaders
    void encodeHeader(org.jboss.netty.buffer.ChannelBuffer,java.lang.String,java.lang.String) -> encodeHeader
    void encodeAscii(java.lang.String,org.jboss.netty.buffer.ChannelBuffer) -> encodeAscii
    void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage) -> encodeInitialLine
org.jboss.netty.handler.codec.http.HttpMethod -> org.jboss.netty.handler.codec.http.HttpMethod:
    org.jboss.netty.handler.codec.http.HttpMethod OPTIONS -> OPTIONS
    org.jboss.netty.handler.codec.http.HttpMethod GET -> GET
    org.jboss.netty.handler.codec.http.HttpMethod HEAD -> HEAD
    org.jboss.netty.handler.codec.http.HttpMethod POST -> POST
    org.jboss.netty.handler.codec.http.HttpMethod PUT -> PUT
    org.jboss.netty.handler.codec.http.HttpMethod PATCH -> PATCH
    org.jboss.netty.handler.codec.http.HttpMethod DELETE -> DELETE
    org.jboss.netty.handler.codec.http.HttpMethod TRACE -> TRACE
    org.jboss.netty.handler.codec.http.HttpMethod CONNECT -> CONNECT
    java.util.Map methodMap -> methodMap
    java.lang.String name -> name
    org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String) -> valueOf
    java.lang.String getName() -> getName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(org.jboss.netty.handler.codec.http.HttpMethod) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.HttpRequest -> org.jboss.netty.handler.codec.http.HttpRequest:
    org.jboss.netty.handler.codec.http.HttpMethod getMethod() -> getMethod
    void setMethod(org.jboss.netty.handler.codec.http.HttpMethod) -> setMethod
    java.lang.String getUri() -> getUri
    void setUri(java.lang.String) -> setUri
org.jboss.netty.handler.codec.http.HttpRequestDecoder -> org.jboss.netty.handler.codec.http.HttpRequestDecoder:
    org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[]) -> createMessage
    boolean isDecodingRequest() -> isDecodingRequest
org.jboss.netty.handler.codec.http.HttpRequestEncoder -> org.jboss.netty.handler.codec.http.HttpRequestEncoder:
    char SLASH -> SLASH
    char QUESTION_MARK -> QUESTION_MARK
    void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage) -> encodeInitialLine
org.jboss.netty.handler.codec.http.HttpResponse -> org.jboss.netty.handler.codec.http.HttpResponse:
    org.jboss.netty.handler.codec.http.HttpResponseStatus getStatus() -> getStatus
    void setStatus(org.jboss.netty.handler.codec.http.HttpResponseStatus) -> setStatus
org.jboss.netty.handler.codec.http.HttpResponseDecoder -> org.jboss.netty.handler.codec.http.HttpResponseDecoder:
    org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[]) -> createMessage
    boolean isDecodingRequest() -> isDecodingRequest
org.jboss.netty.handler.codec.http.HttpResponseEncoder -> org.jboss.netty.handler.codec.http.HttpResponseEncoder:
    void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage) -> encodeInitialLine
org.jboss.netty.handler.codec.http.HttpResponseStatus -> org.jboss.netty.handler.codec.http.HttpResponseStatus:
    org.jboss.netty.handler.codec.http.HttpResponseStatus CONTINUE -> CONTINUE
    org.jboss.netty.handler.codec.http.HttpResponseStatus SWITCHING_PROTOCOLS -> SWITCHING_PROTOCOLS
    org.jboss.netty.handler.codec.http.HttpResponseStatus PROCESSING -> PROCESSING
    org.jboss.netty.handler.codec.http.HttpResponseStatus OK -> OK
    org.jboss.netty.handler.codec.http.HttpResponseStatus CREATED -> CREATED
    org.jboss.netty.handler.codec.http.HttpResponseStatus ACCEPTED -> ACCEPTED
    org.jboss.netty.handler.codec.http.HttpResponseStatus NON_AUTHORITATIVE_INFORMATION -> NON_AUTHORITATIVE_INFORMATION
    org.jboss.netty.handler.codec.http.HttpResponseStatus NO_CONTENT -> NO_CONTENT
    org.jboss.netty.handler.codec.http.HttpResponseStatus RESET_CONTENT -> RESET_CONTENT
    org.jboss.netty.handler.codec.http.HttpResponseStatus PARTIAL_CONTENT -> PARTIAL_CONTENT
    org.jboss.netty.handler.codec.http.HttpResponseStatus MULTI_STATUS -> MULTI_STATUS
    org.jboss.netty.handler.codec.http.HttpResponseStatus MULTIPLE_CHOICES -> MULTIPLE_CHOICES
    org.jboss.netty.handler.codec.http.HttpResponseStatus MOVED_PERMANENTLY -> MOVED_PERMANENTLY
    org.jboss.netty.handler.codec.http.HttpResponseStatus FOUND -> FOUND
    org.jboss.netty.handler.codec.http.HttpResponseStatus SEE_OTHER -> SEE_OTHER
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_MODIFIED -> NOT_MODIFIED
    org.jboss.netty.handler.codec.http.HttpResponseStatus USE_PROXY -> USE_PROXY
    org.jboss.netty.handler.codec.http.HttpResponseStatus TEMPORARY_REDIRECT -> TEMPORARY_REDIRECT
    org.jboss.netty.handler.codec.http.HttpResponseStatus BAD_REQUEST -> BAD_REQUEST
    org.jboss.netty.handler.codec.http.HttpResponseStatus UNAUTHORIZED -> UNAUTHORIZED
    org.jboss.netty.handler.codec.http.HttpResponseStatus PAYMENT_REQUIRED -> PAYMENT_REQUIRED
    org.jboss.netty.handler.codec.http.HttpResponseStatus FORBIDDEN -> FORBIDDEN
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_FOUND -> NOT_FOUND
    org.jboss.netty.handler.codec.http.HttpResponseStatus METHOD_NOT_ALLOWED -> METHOD_NOT_ALLOWED
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_ACCEPTABLE -> NOT_ACCEPTABLE
    org.jboss.netty.handler.codec.http.HttpResponseStatus PROXY_AUTHENTICATION_REQUIRED -> PROXY_AUTHENTICATION_REQUIRED
    org.jboss.netty.handler.codec.http.HttpResponseStatus REQUEST_TIMEOUT -> REQUEST_TIMEOUT
    org.jboss.netty.handler.codec.http.HttpResponseStatus CONFLICT -> CONFLICT
    org.jboss.netty.handler.codec.http.HttpResponseStatus GONE -> GONE
    org.jboss.netty.handler.codec.http.HttpResponseStatus LENGTH_REQUIRED -> LENGTH_REQUIRED
    org.jboss.netty.handler.codec.http.HttpResponseStatus PRECONDITION_FAILED -> PRECONDITION_FAILED
    org.jboss.netty.handler.codec.http.HttpResponseStatus REQUEST_ENTITY_TOO_LARGE -> REQUEST_ENTITY_TOO_LARGE
    org.jboss.netty.handler.codec.http.HttpResponseStatus REQUEST_URI_TOO_LONG -> REQUEST_URI_TOO_LONG
    org.jboss.netty.handler.codec.http.HttpResponseStatus UNSUPPORTED_MEDIA_TYPE -> UNSUPPORTED_MEDIA_TYPE
    org.jboss.netty.handler.codec.http.HttpResponseStatus REQUESTED_RANGE_NOT_SATISFIABLE -> REQUESTED_RANGE_NOT_SATISFIABLE
    org.jboss.netty.handler.codec.http.HttpResponseStatus EXPECTATION_FAILED -> EXPECTATION_FAILED
    org.jboss.netty.handler.codec.http.HttpResponseStatus UNPROCESSABLE_ENTITY -> UNPROCESSABLE_ENTITY
    org.jboss.netty.handler.codec.http.HttpResponseStatus LOCKED -> LOCKED
    org.jboss.netty.handler.codec.http.HttpResponseStatus FAILED_DEPENDENCY -> FAILED_DEPENDENCY
    org.jboss.netty.handler.codec.http.HttpResponseStatus UNORDERED_COLLECTION -> UNORDERED_COLLECTION
    org.jboss.netty.handler.codec.http.HttpResponseStatus UPGRADE_REQUIRED -> UPGRADE_REQUIRED
    org.jboss.netty.handler.codec.http.HttpResponseStatus PRECONDITION_REQUIRED -> PRECONDITION_REQUIRED
    org.jboss.netty.handler.codec.http.HttpResponseStatus TOO_MANY_REQUESTS -> TOO_MANY_REQUESTS
    org.jboss.netty.handler.codec.http.HttpResponseStatus REQUEST_HEADER_FIELDS_TOO_LARGE -> REQUEST_HEADER_FIELDS_TOO_LARGE
    org.jboss.netty.handler.codec.http.HttpResponseStatus INTERNAL_SERVER_ERROR -> INTERNAL_SERVER_ERROR
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_IMPLEMENTED -> NOT_IMPLEMENTED
    org.jboss.netty.handler.codec.http.HttpResponseStatus BAD_GATEWAY -> BAD_GATEWAY
    org.jboss.netty.handler.codec.http.HttpResponseStatus SERVICE_UNAVAILABLE -> SERVICE_UNAVAILABLE
    org.jboss.netty.handler.codec.http.HttpResponseStatus GATEWAY_TIMEOUT -> GATEWAY_TIMEOUT
    org.jboss.netty.handler.codec.http.HttpResponseStatus HTTP_VERSION_NOT_SUPPORTED -> HTTP_VERSION_NOT_SUPPORTED
    org.jboss.netty.handler.codec.http.HttpResponseStatus VARIANT_ALSO_NEGOTIATES -> VARIANT_ALSO_NEGOTIATES
    org.jboss.netty.handler.codec.http.HttpResponseStatus INSUFFICIENT_STORAGE -> INSUFFICIENT_STORAGE
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_EXTENDED -> NOT_EXTENDED
    org.jboss.netty.handler.codec.http.HttpResponseStatus NETWORK_AUTHENTICATION_REQUIRED -> NETWORK_AUTHENTICATION_REQUIRED
    int code -> code
    java.lang.String reasonPhrase -> reasonPhrase
    org.jboss.netty.handler.codec.http.HttpResponseStatus valueOf(int) -> valueOf
    int getCode() -> getCode
    java.lang.String getReasonPhrase() -> getReasonPhrase
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.handler.codec.http.HttpResponseStatus) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.HttpServerCodec -> org.jboss.netty.handler.codec.http.HttpServerCodec:
    org.jboss.netty.handler.codec.http.HttpRequestDecoder decoder -> decoder
    org.jboss.netty.handler.codec.http.HttpResponseEncoder encoder -> encoder
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
org.jboss.netty.handler.codec.http.HttpVersion -> org.jboss.netty.handler.codec.http.HttpVersion:
    java.util.regex.Pattern VERSION_PATTERN -> VERSION_PATTERN
    org.jboss.netty.handler.codec.http.HttpVersion HTTP_1_0 -> HTTP_1_0
    org.jboss.netty.handler.codec.http.HttpVersion HTTP_1_1 -> HTTP_1_1
    java.lang.String protocolName -> protocolName
    int majorVersion -> majorVersion
    int minorVersion -> minorVersion
    java.lang.String text -> text
    boolean keepAliveDefault -> keepAliveDefault
    org.jboss.netty.handler.codec.http.HttpVersion valueOf(java.lang.String) -> valueOf
    java.lang.String getProtocolName() -> getProtocolName
    int getMajorVersion() -> getMajorVersion
    int getMinorVersion() -> getMinorVersion
    java.lang.String getText() -> getText
    boolean isKeepAliveDefault() -> isKeepAliveDefault
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.handler.codec.http.HttpVersion) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.QueryStringDecoder -> org.jboss.netty.handler.codec.http.QueryStringDecoder:
    int DEFAULT_MAX_PARAMS -> DEFAULT_MAX_PARAMS
    java.nio.charset.Charset charset -> charset
    java.lang.String uri -> uri
    boolean hasPath -> hasPath
    int maxParams -> maxParams
    java.lang.String path -> path
    java.util.Map params -> params
    int nParams -> nParams
    java.lang.String getPath() -> getPath
    java.util.Map getParameters() -> getParameters
    void decodeParams(java.lang.String) -> decodeParams
    boolean addParam(java.util.Map,java.lang.String,java.lang.String) -> addParam
    java.lang.String decodeComponent(java.lang.String) -> decodeComponent
    java.lang.String decodeComponent(java.lang.String,java.nio.charset.Charset) -> decodeComponent
    char decodeHexNibble(char) -> decodeHexNibble
org.jboss.netty.handler.codec.http.QueryStringEncoder -> org.jboss.netty.handler.codec.http.QueryStringEncoder:
    java.nio.charset.Charset charset -> charset
    java.lang.String uri -> uri
    java.util.List params -> params
    void addParam(java.lang.String,java.lang.String) -> addParam
    java.net.URI toUri() -> toUri
    java.lang.String toString() -> toString
    java.lang.String encodeComponent(java.lang.String,java.nio.charset.Charset) -> encodeComponent
org.jboss.netty.handler.codec.http.QueryStringEncoder$Param -> org.jboss.netty.handler.codec.http.QueryStringEncoder$Param:
    java.lang.String name -> name
    java.lang.String value -> value
org.jboss.netty.handler.codec.http.multipart.AbstractDiskHttpData -> org.jboss.netty.handler.codec.http.multipart.AbstractDiskHttpData:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.io.File file -> file
    boolean isRenamed -> isRenamed
    java.nio.channels.FileChannel fileChannel -> fileChannel
    java.lang.String getDiskFilename() -> getDiskFilename
    java.lang.String getPrefix() -> getPrefix
    java.lang.String getBaseDirectory() -> getBaseDirectory
    java.lang.String getPostfix() -> getPostfix
    boolean deleteOnExit() -> deleteOnExit
    java.io.File tempFile() -> tempFile
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean) -> addContent
    void setContent(java.io.File) -> setContent
    void setContent(java.io.InputStream) -> setContent
    void delete() -> delete
    byte[] get() -> get
    org.jboss.netty.buffer.ChannelBuffer getChannelBuffer() -> getChannelBuffer
    org.jboss.netty.buffer.ChannelBuffer getChunk(int) -> getChunk
    java.lang.String getString() -> getString
    java.lang.String getString(java.nio.charset.Charset) -> getString
    boolean isInMemory() -> isInMemory
    boolean renameTo(java.io.File) -> renameTo
    byte[] readFrom(java.io.File) -> readFrom
    java.io.File getFile() -> getFile
org.jboss.netty.handler.codec.http.multipart.AbstractHttpData -> org.jboss.netty.handler.codec.http.multipart.AbstractHttpData:
    java.util.regex.Pattern STRIP_PATTERN -> STRIP_PATTERN
    java.util.regex.Pattern REPLACE_PATTERN -> REPLACE_PATTERN
    java.lang.String name -> name
    long definedSize -> definedSize
    long size -> size
    java.nio.charset.Charset charset -> charset
    boolean completed -> completed
    long maxSize -> maxSize
    void setMaxSize(long) -> setMaxSize
    void checkSize(long) -> checkSize
    java.lang.String getName() -> getName
    boolean isCompleted() -> isCompleted
    java.nio.charset.Charset getCharset() -> getCharset
    void setCharset(java.nio.charset.Charset) -> setCharset
    long length() -> length
org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData -> org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:
    org.jboss.netty.buffer.ChannelBuffer channelBuffer -> channelBuffer
    int chunkPosition -> chunkPosition
    boolean isRenamed -> isRenamed
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    void setContent(java.io.InputStream) -> setContent
    void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean) -> addContent
    void setContent(java.io.File) -> setContent
    void delete() -> delete
    byte[] get() -> get
    java.lang.String getString() -> getString
    java.lang.String getString(java.nio.charset.Charset) -> getString
    org.jboss.netty.buffer.ChannelBuffer getChannelBuffer() -> getChannelBuffer
    org.jboss.netty.buffer.ChannelBuffer getChunk(int) -> getChunk
    boolean isInMemory() -> isInMemory
    boolean renameTo(java.io.File) -> renameTo
    java.io.File getFile() -> getFile
org.jboss.netty.handler.codec.http.multipart.Attribute -> org.jboss.netty.handler.codec.http.multipart.Attribute:
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory -> org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:
    long MINSIZE -> MINSIZE
    long MAXSIZE -> MAXSIZE
    boolean useDisk -> useDisk
    boolean checkSize -> checkSize
    long minSize -> minSize
    long maxSize -> maxSize
    java.util.Map requestFileDeleteMap -> requestFileDeleteMap
    void setMaxLimit(long) -> setMaxLimit
    java.util.List getList(org.jboss.netty.handler.codec.http.HttpRequest) -> getList
    org.jboss.netty.handler.codec.http.multipart.Attribute createAttribute(org.jboss.netty.handler.codec.http.HttpRequest,java.lang.String) -> createAttribute
    void checkHttpDataSize(org.jboss.netty.handler.codec.http.multipart.HttpData) -> checkHttpDataSize
    org.jboss.netty.handler.codec.http.multipart.Attribute createAttribute(org.jboss.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String) -> createAttribute
    org.jboss.netty.handler.codec.http.multipart.FileUpload createFileUpload(org.jboss.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long) -> createFileUpload
    void removeHttpDataFromClean(org.jboss.netty.handler.codec.http.HttpRequest,org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> removeHttpDataFromClean
    void cleanRequestHttpDatas(org.jboss.netty.handler.codec.http.HttpRequest) -> cleanRequestHttpDatas
    void cleanAllHttpDatas() -> cleanAllHttpDatas
org.jboss.netty.handler.codec.http.multipart.DiskAttribute -> org.jboss.netty.handler.codec.http.multipart.DiskAttribute:
    java.lang.String baseDirectory -> baseDirectory
    boolean deleteOnExitTemporaryFile -> deleteOnExitTemporaryFile
    java.lang.String prefix -> prefix
    java.lang.String postfix -> postfix
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType() -> getHttpDataType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean) -> addContent
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> compareTo
    int compareTo(org.jboss.netty.handler.codec.http.multipart.Attribute) -> compareTo
    java.lang.String toString() -> toString
    boolean deleteOnExit() -> deleteOnExit
    java.lang.String getBaseDirectory() -> getBaseDirectory
    java.lang.String getDiskFilename() -> getDiskFilename
    java.lang.String getPostfix() -> getPostfix
    java.lang.String getPrefix() -> getPrefix
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.multipart.DiskFileUpload -> org.jboss.netty.handler.codec.http.multipart.DiskFileUpload:
    java.lang.String baseDirectory -> baseDirectory
    boolean deleteOnExitTemporaryFile -> deleteOnExitTemporaryFile
    java.lang.String prefix -> prefix
    java.lang.String postfix -> postfix
    java.lang.String filename -> filename
    java.lang.String contentType -> contentType
    java.lang.String contentTransferEncoding -> contentTransferEncoding
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType() -> getHttpDataType
    java.lang.String getFilename() -> getFilename
    void setFilename(java.lang.String) -> setFilename
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> compareTo
    int compareTo(org.jboss.netty.handler.codec.http.multipart.FileUpload) -> compareTo
    void setContentType(java.lang.String) -> setContentType
    java.lang.String getContentType() -> getContentType
    java.lang.String getContentTransferEncoding() -> getContentTransferEncoding
    void setContentTransferEncoding(java.lang.String) -> setContentTransferEncoding
    java.lang.String toString() -> toString
    boolean deleteOnExit() -> deleteOnExit
    java.lang.String getBaseDirectory() -> getBaseDirectory
    java.lang.String getDiskFilename() -> getDiskFilename
    java.lang.String getPostfix() -> getPostfix
    java.lang.String getPrefix() -> getPrefix
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.multipart.FileUpload -> org.jboss.netty.handler.codec.http.multipart.FileUpload:
    java.lang.String getFilename() -> getFilename
    void setFilename(java.lang.String) -> setFilename
    void setContentType(java.lang.String) -> setContentType
    java.lang.String getContentType() -> getContentType
    void setContentTransferEncoding(java.lang.String) -> setContentTransferEncoding
    java.lang.String getContentTransferEncoding() -> getContentTransferEncoding
org.jboss.netty.handler.codec.http.multipart.HttpData -> org.jboss.netty.handler.codec.http.multipart.HttpData:
    void setMaxSize(long) -> setMaxSize
    void checkSize(long) -> checkSize
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean) -> addContent
    void setContent(java.io.File) -> setContent
    void setContent(java.io.InputStream) -> setContent
    boolean isCompleted() -> isCompleted
    long length() -> length
    void delete() -> delete
    byte[] get() -> get
    org.jboss.netty.buffer.ChannelBuffer getChannelBuffer() -> getChannelBuffer
    org.jboss.netty.buffer.ChannelBuffer getChunk(int) -> getChunk
    java.lang.String getString() -> getString
    java.lang.String getString(java.nio.charset.Charset) -> getString
    void setCharset(java.nio.charset.Charset) -> setCharset
    java.nio.charset.Charset getCharset() -> getCharset
    boolean renameTo(java.io.File) -> renameTo
    boolean isInMemory() -> isInMemory
    java.io.File getFile() -> getFile
org.jboss.netty.handler.codec.http.multipart.HttpDataFactory -> org.jboss.netty.handler.codec.http.multipart.HttpDataFactory:
    void setMaxLimit(long) -> setMaxLimit
    org.jboss.netty.handler.codec.http.multipart.Attribute createAttribute(org.jboss.netty.handler.codec.http.HttpRequest,java.lang.String) -> createAttribute
    org.jboss.netty.handler.codec.http.multipart.Attribute createAttribute(org.jboss.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String) -> createAttribute
    org.jboss.netty.handler.codec.http.multipart.FileUpload createFileUpload(org.jboss.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long) -> createFileUpload
    void removeHttpDataFromClean(org.jboss.netty.handler.codec.http.HttpRequest,org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> removeHttpDataFromClean
    void cleanRequestHttpDatas(org.jboss.netty.handler.codec.http.HttpRequest) -> cleanRequestHttpDatas
    void cleanAllHttpDatas() -> cleanAllHttpDatas
org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil -> org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil:
    int chunkSize -> chunkSize
    java.lang.String CONTENT_DISPOSITION -> CONTENT_DISPOSITION
    java.lang.String NAME -> NAME
    java.lang.String FILENAME -> FILENAME
    java.lang.String FORM_DATA -> FORM_DATA
    java.lang.String ATTACHMENT -> ATTACHMENT
    java.lang.String FILE -> FILE
    java.lang.String MULTIPART_MIXED -> MULTIPART_MIXED
    java.nio.charset.Charset ISO_8859_1 -> ISO_8859_1
    java.nio.charset.Charset US_ASCII -> US_ASCII
    java.lang.String DEFAULT_BINARY_CONTENT_TYPE -> DEFAULT_BINARY_CONTENT_TYPE
    java.lang.String DEFAULT_TEXT_CONTENT_TYPE -> DEFAULT_TEXT_CONTENT_TYPE
    int findNonWhitespace(java.lang.String,int) -> findNonWhitespace
    int findWhitespace(java.lang.String,int) -> findWhitespace
    int findEndOfString(java.lang.String) -> findEndOfString
org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$SeekAheadNoBackArrayException -> org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$SeekAheadNoBackArrayException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$SeekAheadOptimize -> org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$SeekAheadOptimize:
    byte[] bytes -> bytes
    int readerIndex -> readerIndex
    int pos -> pos
    int origPos -> origPos
    int limit -> limit
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    void setReadPosition(int) -> setReadPosition
    int getReadPosition(int) -> getReadPosition
    void clear() -> clear
org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism -> org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism:
    org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism BIT7 -> BIT7
    org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism BIT8 -> BIT8
    org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism BINARY -> BINARY
    java.lang.String value -> value
    org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] values() -> values
    org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism valueOf(java.lang.String) -> valueOf
    java.lang.String value() -> value
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder -> org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:
    org.jboss.netty.handler.codec.http.multipart.HttpDataFactory factory -> factory
    org.jboss.netty.handler.codec.http.HttpRequest request -> request
    java.nio.charset.Charset charset -> charset
    boolean isLastChunk -> isLastChunk
    java.util.List bodyListHttpData -> bodyListHttpData
    java.util.Map bodyMapHttpData -> bodyMapHttpData
    org.jboss.netty.buffer.ChannelBuffer undecodedChunk -> undecodedChunk
    int bodyListHttpDataRank -> bodyListHttpDataRank
    java.lang.String multipartDataBoundary -> multipartDataBoundary
    java.lang.String multipartMixedBoundary -> multipartMixedBoundary
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus currentStatus -> currentStatus
    java.util.Map currentFieldAttributes -> currentFieldAttributes
    org.jboss.netty.handler.codec.http.multipart.FileUpload currentFileUpload -> currentFileUpload
    org.jboss.netty.handler.codec.http.multipart.Attribute currentAttribute -> currentAttribute
    void setMultipart(java.lang.String) -> setMultipart
    boolean isMultipart() -> isMultipart
    java.util.List getBodyHttpDatas() -> getBodyHttpDatas
    java.util.List getBodyHttpDatas(java.lang.String) -> getBodyHttpDatas
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String) -> getBodyHttpData
    void offer(org.jboss.netty.handler.codec.http.HttpChunk) -> offer
    boolean hasNext() -> hasNext
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData next() -> next
    void parseBody() -> parseBody
    void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> addHttpData
    void parseBodyMultipart() -> parseBodyMultipart
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus) -> decodeMultipart
    void skipControlCharacters() -> skipControlCharacters
    void skipControlCharactersStandard() -> skipControlCharactersStandard
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDelimiter(java.lang.String,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus) -> findMultipartDelimiter
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition() -> findMultipartDisposition
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String) -> getFileUpload
    void cleanFiles() -> cleanFiles
    void removeHttpDataFromClean(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> removeHttpDataFromClean
    void cleanMixedAttributes() -> cleanMixedAttributes
    java.lang.String readLineStandard() -> readLineStandard
    java.lang.String readLine() -> readLine
    java.lang.String readDelimiterStandard(java.lang.String) -> readDelimiterStandard
    java.lang.String readDelimiter(java.lang.String) -> readDelimiter
    void readFileUploadByteMultipartStandard(java.lang.String) -> readFileUploadByteMultipartStandard
    void readFileUploadByteMultipart(java.lang.String) -> readFileUploadByteMultipart
    void loadFieldMultipartStandard(java.lang.String) -> loadFieldMultipartStandard
    void loadFieldMultipart(java.lang.String) -> loadFieldMultipart
    java.lang.String cleanString(java.lang.String) -> cleanString
    boolean skipOneLine() -> skipOneLine
    java.lang.String[] splitMultipartHeader(java.lang.String) -> splitMultipartHeader
org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder$1 -> org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$http$multipart$HttpPostRequestDecoder$MultiPartStatus -> $SwitchMap$org$jboss$netty$handler$codec$http$multipart$HttpPostRequestDecoder$MultiPartStatus
org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder -> org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder decoder -> decoder
    boolean isMultipart(org.jboss.netty.handler.codec.http.HttpRequest) -> isMultipart
    java.lang.String[] getMultipartDataBoundary(java.lang.String) -> getMultipartDataBoundary
    boolean isMultipart() -> isMultipart
    java.util.List getBodyHttpDatas() -> getBodyHttpDatas
    java.util.List getBodyHttpDatas(java.lang.String) -> getBodyHttpDatas
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String) -> getBodyHttpData
    void offer(org.jboss.netty.handler.codec.http.HttpChunk) -> offer
    boolean hasNext() -> hasNext
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData next() -> next
    void cleanFiles() -> cleanFiles
    void removeHttpDataFromClean(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> removeHttpDataFromClean
    java.lang.String[] splitHeaderContentType(java.lang.String) -> splitHeaderContentType
org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$EndOfDataDecoderException -> org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$EndOfDataDecoderException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$ErrorDataDecoderException -> org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$ErrorDataDecoderException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus -> org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus:
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus NOTSTARTED -> NOTSTARTED
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus PREAMBLE -> PREAMBLE
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus HEADERDELIMITER -> HEADERDELIMITER
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus DISPOSITION -> DISPOSITION
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus FIELD -> FIELD
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus FILEUPLOAD -> FILEUPLOAD
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus MIXEDPREAMBLE -> MIXEDPREAMBLE
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus MIXEDDELIMITER -> MIXEDDELIMITER
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus MIXEDDISPOSITION -> MIXEDDISPOSITION
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus MIXEDFILEUPLOAD -> MIXEDFILEUPLOAD
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus MIXEDCLOSEDELIMITER -> MIXEDCLOSEDELIMITER
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus CLOSEDELIMITER -> CLOSEDELIMITER
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus PREEPILOGUE -> PREEPILOGUE
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus EPILOGUE -> EPILOGUE
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] values() -> values
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$NotEnoughDataDecoderException -> org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$NotEnoughDataDecoderException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder -> org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:
    java.util.Map percentEncodings -> percentEncodings
    org.jboss.netty.handler.codec.http.multipart.HttpDataFactory factory -> factory
    org.jboss.netty.handler.codec.http.HttpRequest request -> request
    java.nio.charset.Charset charset -> charset
    boolean isChunked -> isChunked
    java.util.List bodyListDatas -> bodyListDatas
    java.util.List multipartHttpDatas -> multipartHttpDatas
    boolean isMultipart -> isMultipart
    java.lang.String multipartDataBoundary -> multipartDataBoundary
    java.lang.String multipartMixedBoundary -> multipartMixedBoundary
    boolean headerFinalized -> headerFinalized
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode encoderMode -> encoderMode
    boolean isLastChunk -> isLastChunk
    boolean isLastChunkSent -> isLastChunkSent
    org.jboss.netty.handler.codec.http.multipart.FileUpload currentFileUpload -> currentFileUpload
    boolean duringMixedMode -> duringMixedMode
    long globalBodySize -> globalBodySize
    java.util.ListIterator iterator -> iterator
    org.jboss.netty.buffer.ChannelBuffer currentBuffer -> currentBuffer
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData currentData -> currentData
    boolean isKey -> isKey
    void cleanFiles() -> cleanFiles
    boolean isMultipart() -> isMultipart
    void initDataMultipart() -> initDataMultipart
    void initMixedMultipart() -> initMixedMultipart
    java.lang.String getNewMultipartDelimiter() -> getNewMultipartDelimiter
    java.util.List getBodyListAttributes() -> getBodyListAttributes
    void setBodyHttpDatas(java.util.List) -> setBodyHttpDatas
    void addBodyAttribute(java.lang.String,java.lang.String) -> addBodyAttribute
    void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean) -> addBodyFileUpload
    void addBodyFileUploads(java.lang.String,java.io.File[],java.lang.String[],boolean[]) -> addBodyFileUploads
    void addBodyHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> addBodyHttpData
    org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest() -> finalizeRequest
    boolean isChunked() -> isChunked
    java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset) -> encodeAttribute
    org.jboss.netty.buffer.ChannelBuffer fillChannelBuffer() -> fillChannelBuffer
    org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkMultipart(int) -> encodeNextChunkMultipart
    org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkUrlEncoded(int) -> encodeNextChunkUrlEncoded
    void close() -> close
    org.jboss.netty.handler.codec.http.HttpChunk nextChunk() -> nextChunk
    boolean isEndOfInput() -> isEndOfInput
    boolean hasNextChunk() -> hasNextChunk
    java.lang.Object nextChunk() -> nextChunk
org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode -> org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode:
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode RFC1738 -> RFC1738
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode RFC3986 -> RFC3986
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode HTML5 -> HTML5
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] values() -> values
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$ErrorDataEncoderException -> org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$ErrorDataEncoderException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder -> org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:
    org.jboss.netty.handler.codec.http.multipart.HttpDataFactory factory -> factory
    org.jboss.netty.handler.codec.http.HttpRequest request -> request
    java.nio.charset.Charset charset -> charset
    boolean isLastChunk -> isLastChunk
    java.util.List bodyListHttpData -> bodyListHttpData
    java.util.Map bodyMapHttpData -> bodyMapHttpData
    org.jboss.netty.buffer.ChannelBuffer undecodedChunk -> undecodedChunk
    int bodyListHttpDataRank -> bodyListHttpDataRank
    org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus currentStatus -> currentStatus
    org.jboss.netty.handler.codec.http.multipart.Attribute currentAttribute -> currentAttribute
    boolean isMultipart() -> isMultipart
    java.util.List getBodyHttpDatas() -> getBodyHttpDatas
    java.util.List getBodyHttpDatas(java.lang.String) -> getBodyHttpDatas
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String) -> getBodyHttpData
    void offer(org.jboss.netty.handler.codec.http.HttpChunk) -> offer
    boolean hasNext() -> hasNext
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData next() -> next
    void parseBody() -> parseBody
    void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> addHttpData
    void parseBodyAttributesStandard() -> parseBodyAttributesStandard
    void parseBodyAttributes() -> parseBodyAttributes
    void setFinalBuffer(org.jboss.netty.buffer.ChannelBuffer) -> setFinalBuffer
    java.lang.String decodeAttribute(java.lang.String,java.nio.charset.Charset) -> decodeAttribute
    void cleanFiles() -> cleanFiles
    void removeHttpDataFromClean(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> removeHttpDataFromClean
org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder$1 -> org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$http$multipart$HttpPostRequestDecoder$MultiPartStatus -> $SwitchMap$org$jboss$netty$handler$codec$http$multipart$HttpPostRequestDecoder$MultiPartStatus
org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData -> org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData:
    java.lang.String getName() -> getName
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType() -> getHttpDataType
org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType -> org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType:
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType Attribute -> Attribute
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType FileUpload -> FileUpload
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType InternalAttribute -> InternalAttribute
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] values() -> values
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder -> org.jboss.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder:
    boolean isMultipart() -> isMultipart
    java.util.List getBodyHttpDatas() -> getBodyHttpDatas
    java.util.List getBodyHttpDatas(java.lang.String) -> getBodyHttpDatas
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String) -> getBodyHttpData
    void offer(org.jboss.netty.handler.codec.http.HttpChunk) -> offer
    boolean hasNext() -> hasNext
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData next() -> next
    void cleanFiles() -> cleanFiles
    void removeHttpDataFromClean(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> removeHttpDataFromClean
org.jboss.netty.handler.codec.http.multipart.InternalAttribute -> org.jboss.netty.handler.codec.http.multipart.InternalAttribute:
    java.util.List value -> value
    java.nio.charset.Charset charset -> charset
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType() -> getHttpDataType
    void addValue(java.lang.String) -> addValue
    void addValue(java.lang.String,int) -> addValue
    void setValue(java.lang.String,int) -> setValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> compareTo
    int compareTo(org.jboss.netty.handler.codec.http.multipart.InternalAttribute) -> compareTo
    int size() -> size
    java.lang.String toString() -> toString
    org.jboss.netty.buffer.ChannelBuffer toChannelBuffer() -> toChannelBuffer
    java.lang.String getName() -> getName
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.multipart.MemoryAttribute -> org.jboss.netty.handler.codec.http.multipart.MemoryAttribute:
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType() -> getHttpDataType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean) -> addContent
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> compareTo
    int compareTo(org.jboss.netty.handler.codec.http.multipart.Attribute) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.multipart.MemoryFileUpload -> org.jboss.netty.handler.codec.http.multipart.MemoryFileUpload:
    java.lang.String filename -> filename
    java.lang.String contentType -> contentType
    java.lang.String contentTransferEncoding -> contentTransferEncoding
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType() -> getHttpDataType
    java.lang.String getFilename() -> getFilename
    void setFilename(java.lang.String) -> setFilename
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> compareTo
    int compareTo(org.jboss.netty.handler.codec.http.multipart.FileUpload) -> compareTo
    void setContentType(java.lang.String) -> setContentType
    java.lang.String getContentType() -> getContentType
    java.lang.String getContentTransferEncoding() -> getContentTransferEncoding
    void setContentTransferEncoding(java.lang.String) -> setContentTransferEncoding
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.multipart.MixedAttribute -> org.jboss.netty.handler.codec.http.multipart.MixedAttribute:
    org.jboss.netty.handler.codec.http.multipart.Attribute attribute -> attribute
    long limitSize -> limitSize
    long maxSize -> maxSize
    void setMaxSize(long) -> setMaxSize
    void checkSize(long) -> checkSize
    void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean) -> addContent
    void delete() -> delete
    byte[] get() -> get
    org.jboss.netty.buffer.ChannelBuffer getChannelBuffer() -> getChannelBuffer
    java.nio.charset.Charset getCharset() -> getCharset
    java.lang.String getString() -> getString
    java.lang.String getString(java.nio.charset.Charset) -> getString
    boolean isCompleted() -> isCompleted
    boolean isInMemory() -> isInMemory
    long length() -> length
    boolean renameTo(java.io.File) -> renameTo
    void setCharset(java.nio.charset.Charset) -> setCharset
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    void setContent(java.io.File) -> setContent
    void setContent(java.io.InputStream) -> setContent
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType() -> getHttpDataType
    java.lang.String getName() -> getName
    int compareTo(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> compareTo
    java.lang.String toString() -> toString
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    org.jboss.netty.buffer.ChannelBuffer getChunk(int) -> getChunk
    java.io.File getFile() -> getFile
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.multipart.MixedFileUpload -> org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:
    org.jboss.netty.handler.codec.http.multipart.FileUpload fileUpload -> fileUpload
    long limitSize -> limitSize
    long definedSize -> definedSize
    long maxSize -> maxSize
    void setMaxSize(long) -> setMaxSize
    void checkSize(long) -> checkSize
    void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean) -> addContent
    void delete() -> delete
    byte[] get() -> get
    org.jboss.netty.buffer.ChannelBuffer getChannelBuffer() -> getChannelBuffer
    java.nio.charset.Charset getCharset() -> getCharset
    java.lang.String getContentType() -> getContentType
    java.lang.String getContentTransferEncoding() -> getContentTransferEncoding
    java.lang.String getFilename() -> getFilename
    java.lang.String getString() -> getString
    java.lang.String getString(java.nio.charset.Charset) -> getString
    boolean isCompleted() -> isCompleted
    boolean isInMemory() -> isInMemory
    long length() -> length
    boolean renameTo(java.io.File) -> renameTo
    void setCharset(java.nio.charset.Charset) -> setCharset
    void setContent(org.jboss.netty.buffer.ChannelBuffer) -> setContent
    void setContent(java.io.File) -> setContent
    void setContent(java.io.InputStream) -> setContent
    void setContentType(java.lang.String) -> setContentType
    void setContentTransferEncoding(java.lang.String) -> setContentTransferEncoding
    void setFilename(java.lang.String) -> setFilename
    org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType() -> getHttpDataType
    java.lang.String getName() -> getName
    int compareTo(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData) -> compareTo
    java.lang.String toString() -> toString
    org.jboss.netty.buffer.ChannelBuffer getChunk(int) -> getChunk
    java.io.File getFile() -> getFile
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.http.websocketx.BinaryWebSocketFrame -> org.jboss.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame -> org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame:
    int getStatusCode() -> getStatusCode
    java.lang.String getReasonText() -> getReasonText
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame -> org.jboss.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.websocketx.PingWebSocketFrame -> org.jboss.netty.handler.codec.http.websocketx.PingWebSocketFrame:
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.websocketx.PongWebSocketFrame -> org.jboss.netty.handler.codec.http.websocketx.PongWebSocketFrame:
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame -> org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.http.websocketx.Utf8Validator -> org.jboss.netty.handler.codec.http.websocketx.Utf8Validator:
    int UTF8_ACCEPT -> UTF8_ACCEPT
    int UTF8_REJECT -> UTF8_REJECT
    byte[] TYPES -> TYPES
    byte[] STATES -> STATES
    int state -> state
    int codep -> codep
    boolean checking -> checking
    void check(byte[]) -> check
    void write(int) -> write
    void finish() -> finish
    boolean isChecking() -> isChecking
org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder -> org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:
    long DEFAULT_MAX_FRAME_SIZE -> DEFAULT_MAX_FRAME_SIZE
    long maxFrameSize -> maxFrameSize
    boolean receivedClosingHandshake -> receivedClosingHandshake
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum) -> decode
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(byte,org.jboss.netty.buffer.ChannelBuffer) -> decodeBinaryFrame
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(org.jboss.netty.buffer.ChannelBuffer) -> decodeTextFrame
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder -> org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.http.websocketx.WebSocket07FrameDecoder -> org.jboss.netty.handler.codec.http.websocketx.WebSocket07FrameDecoder:
org.jboss.netty.handler.codec.http.websocketx.WebSocket07FrameEncoder -> org.jboss.netty.handler.codec.http.websocketx.WebSocket07FrameEncoder:
org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder -> org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:
    org.jboss.netty.logging.InternalLogger logger -> logger
    byte OPCODE_CONT -> OPCODE_CONT
    byte OPCODE_TEXT -> OPCODE_TEXT
    byte OPCODE_BINARY -> OPCODE_BINARY
    byte OPCODE_CLOSE -> OPCODE_CLOSE
    byte OPCODE_PING -> OPCODE_PING
    byte OPCODE_PONG -> OPCODE_PONG
    org.jboss.netty.handler.codec.http.websocketx.Utf8Validator utf8Validator -> utf8Validator
    int fragmentedFramesCount -> fragmentedFramesCount
    long maxFramePayloadLength -> maxFramePayloadLength
    boolean frameFinalFlag -> frameFinalFlag
    int frameRsv -> frameRsv
    int frameOpcode -> frameOpcode
    long framePayloadLength -> framePayloadLength
    org.jboss.netty.buffer.ChannelBuffer framePayload -> framePayload
    int framePayloadBytesRead -> framePayloadBytesRead
    org.jboss.netty.buffer.ChannelBuffer maskingKey -> maskingKey
    boolean allowExtensions -> allowExtensions
    boolean maskedPayload -> maskedPayload
    boolean receivedClosingHandshake -> receivedClosingHandshake
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State) -> decode
    void unmask(org.jboss.netty.buffer.ChannelBuffer) -> unmask
    void protocolViolation(org.jboss.netty.channel.Channel,java.lang.String) -> protocolViolation
    void protocolViolation(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.frame.CorruptedFrameException) -> protocolViolation
    int toFrameLength(long) -> toFrameLength
    void checkUTF8String(org.jboss.netty.channel.Channel,byte[]) -> checkUTF8String
    void checkCloseFrameBody(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> checkCloseFrameBody
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$1 -> org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$http$websocketx$WebSocket08FrameDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$http$websocketx$WebSocket08FrameDecoder$State
org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State -> org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State:
    org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State FRAME_START -> FRAME_START
    org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State MASKING_KEY -> MASKING_KEY
    org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State PAYLOAD -> PAYLOAD
    org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State CORRUPT -> CORRUPT
    org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder -> org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:
    org.jboss.netty.logging.InternalLogger logger -> logger
    byte OPCODE_CONT -> OPCODE_CONT
    byte OPCODE_TEXT -> OPCODE_TEXT
    byte OPCODE_BINARY -> OPCODE_BINARY
    byte OPCODE_CLOSE -> OPCODE_CLOSE
    byte OPCODE_PING -> OPCODE_PING
    byte OPCODE_PONG -> OPCODE_PONG
    boolean maskPayload -> maskPayload
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.http.websocketx.WebSocket13FrameDecoder -> org.jboss.netty.handler.codec.http.websocketx.WebSocket13FrameDecoder:
org.jboss.netty.handler.codec.http.websocketx.WebSocket13FrameEncoder -> org.jboss.netty.handler.codec.http.websocketx.WebSocket13FrameEncoder:
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:
    java.net.URI webSocketUrl -> webSocketUrl
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion version -> version
    boolean handshakeComplete -> handshakeComplete
    java.lang.String expectedSubprotocol -> expectedSubprotocol
    java.lang.String actualSubprotocol -> actualSubprotocol
    java.util.Map customHeaders -> customHeaders
    long maxFramePayloadLength -> maxFramePayloadLength
    java.net.URI getWebSocketUrl() -> getWebSocketUrl
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion getVersion() -> getVersion
    long getMaxFramePayloadLength() -> getMaxFramePayloadLength
    boolean isHandshakeComplete() -> isHandshakeComplete
    void setHandshakeComplete() -> setHandshakeComplete
    java.lang.String getExpectedSubprotocol() -> getExpectedSubprotocol
    java.lang.String getActualSubprotocol() -> getActualSubprotocol
    void setActualSubprotocol(java.lang.String) -> setActualSubprotocol
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel) -> handshake
    void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse) -> finishHandshake
    void replaceDecoder(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelHandler) -> replaceDecoder
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:
    org.jboss.netty.buffer.ChannelBuffer expectedChallengeResponseBytes -> expectedChallengeResponseBytes
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel) -> handshake
    void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse) -> finishHandshake
    java.lang.String insertRandomCharacters(java.lang.String) -> insertRandomCharacters
    java.lang.String insertSpaces(java.lang.String,int) -> insertSpaces
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00$1 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00$1:
    org.jboss.netty.channel.ChannelFuture val$handshakeFuture -> val$handshakeFuture
    org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00 this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String MAGIC_GUID -> MAGIC_GUID
    java.lang.String expectedChallengeResponseString -> expectedChallengeResponseString
    boolean allowExtensions -> allowExtensions
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel) -> handshake
    void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse) -> finishHandshake
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07$1 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07$1:
    org.jboss.netty.channel.ChannelFuture val$handshakeFuture -> val$handshakeFuture
    org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07 this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String MAGIC_GUID -> MAGIC_GUID
    java.lang.String expectedChallengeResponseString -> expectedChallengeResponseString
    boolean allowExtensions -> allowExtensions
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel) -> handshake
    void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse) -> finishHandshake
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08$1 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08$1:
    org.jboss.netty.channel.ChannelFuture val$handshakeFuture -> val$handshakeFuture
    org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08 this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String MAGIC_GUID -> MAGIC_GUID
    java.lang.String expectedChallengeResponseString -> expectedChallengeResponseString
    boolean allowExtensions -> allowExtensions
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel) -> handshake
    void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse) -> finishHandshake
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13$1 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13$1:
    org.jboss.netty.channel.ChannelFuture val$handshakeFuture -> val$handshakeFuture
    org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13 this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory -> org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory:
    org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker newHandshaker(java.net.URI,org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,boolean,java.util.Map) -> newHandshaker
    org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker newHandshaker(java.net.URI,org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,boolean,java.util.Map,long) -> newHandshaker
org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame -> org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame:
    boolean finalFragment -> finalFragment
    int rsv -> rsv
    org.jboss.netty.buffer.ChannelBuffer binaryData -> binaryData
    org.jboss.netty.buffer.ChannelBuffer getBinaryData() -> getBinaryData
    void setBinaryData(org.jboss.netty.buffer.ChannelBuffer) -> setBinaryData
    boolean isFinalFragment() -> isFinalFragment
    void setFinalFragment(boolean) -> setFinalFragment
    int getRsv() -> getRsv
    void setRsv(int) -> setRsv
org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameAggregator -> org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:
    int maxFrameSize -> maxFrameSize
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame currentFrame -> currentFrame
    boolean tooLongFrameFound -> tooLongFrameFound
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> decode
org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType -> org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType:
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType TEXT -> TEXT
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType BINARY -> BINARY
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType PING -> PING
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType PONG -> PONG
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType CLOSE -> CLOSE
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType CONTINUATION -> CONTINUATION
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType[] values() -> values
    org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.http.websocketx.WebSocketHandshakeException -> org.jboss.netty.handler.codec.http.websocketx.WebSocketHandshakeException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:
    java.lang.String SUB_PROTOCOL_WILDCARD -> SUB_PROTOCOL_WILDCARD
    java.lang.String webSocketUrl -> webSocketUrl
    java.lang.String[] subprotocols -> subprotocols
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion version -> version
    long maxFramePayloadLength -> maxFramePayloadLength
    java.lang.String selectedSubprotocol -> selectedSubprotocol
    org.jboss.netty.channel.ChannelFutureListener HANDSHAKE_LISTENER -> HANDSHAKE_LISTENER
    java.lang.String getWebSocketUrl() -> getWebSocketUrl
    java.util.Set getSubprotocols() -> getSubprotocols
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion getVersion() -> getVersion
    long getMaxFramePayloadLength() -> getMaxFramePayloadLength
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest) -> handshake
    org.jboss.netty.channel.ChannelFuture writeHandshakeResponse(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse,org.jboss.netty.channel.ChannelHandler,org.jboss.netty.channel.ChannelHandler) -> writeHandshakeResponse
    org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame) -> close
    java.lang.String selectSubprotocol(java.lang.String) -> selectSubprotocol
    java.lang.String getSelectedSubprotocol() -> getSelectedSubprotocol
    void setSelectedSubprotocol(java.lang.String) -> setSelectedSubprotocol
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:
    org.jboss.netty.channel.ChannelPipeline val$p -> val$p
    java.lang.String val$httpEncoderName -> val$httpEncoderName
    org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest) -> handshake
    org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame) -> close
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String WEBSOCKET_07_ACCEPT_GUID -> WEBSOCKET_07_ACCEPT_GUID
    boolean allowExtensions -> allowExtensions
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest) -> handshake
    org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame) -> close
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String WEBSOCKET_08_ACCEPT_GUID -> WEBSOCKET_08_ACCEPT_GUID
    boolean allowExtensions -> allowExtensions
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest) -> handshake
    org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame) -> close
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String WEBSOCKET_13_ACCEPT_GUID -> WEBSOCKET_13_ACCEPT_GUID
    boolean allowExtensions -> allowExtensions
    org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest) -> handshake
    org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame) -> close
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:
    java.lang.String webSocketURL -> webSocketURL
    java.lang.String subprotocols -> subprotocols
    boolean allowExtensions -> allowExtensions
    long maxFramePayloadLength -> maxFramePayloadLength
    org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker newHandshaker(org.jboss.netty.handler.codec.http.HttpRequest) -> newHandshaker
    org.jboss.netty.channel.ChannelFuture sendUnsupportedWebSocketVersionResponse(org.jboss.netty.channel.Channel) -> sendUnsupportedWebSocketVersionResponse
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:
    java.lang.String websocketPath -> websocketPath
    java.lang.String subprotocols -> subprotocols
    boolean allowExtensions -> allowExtensions
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker getHandshaker(org.jboss.netty.channel.ChannelHandlerContext) -> getHandshaker
    void setHandshaker(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker) -> setHandshaker
    org.jboss.netty.channel.ChannelHandler forbiddenHttpRequestResponder() -> forbiddenHttpRequestResponder
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String websocketPath -> websocketPath
    java.lang.String subprotocols -> subprotocols
    boolean allowExtensions -> allowExtensions
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable) -> exceptionCaught
    void sendHttpResponse(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.http.HttpRequest,org.jboss.netty.handler.codec.http.HttpResponse) -> sendHttpResponse
    java.lang.String getWebSocketLocation(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.handler.codec.http.HttpRequest,java.lang.String) -> getWebSocketLocation
org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1 -> org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.http.websocketx.WebSocketUtil -> org.jboss.netty.handler.codec.http.websocketx.WebSocketUtil:
    org.jboss.netty.buffer.ChannelBuffer md5(org.jboss.netty.buffer.ChannelBuffer) -> md5
    org.jboss.netty.buffer.ChannelBuffer sha1(org.jboss.netty.buffer.ChannelBuffer) -> sha1
    java.lang.String base64(org.jboss.netty.buffer.ChannelBuffer) -> base64
    byte[] randomBytes(int) -> randomBytes
    int randomNumber(int,int) -> randomNumber
org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion -> org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion:
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion UNKNOWN -> UNKNOWN
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion V00 -> V00
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion V07 -> V07
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion V08 -> V08
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion V13 -> V13
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion[] values() -> values
    org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion valueOf(java.lang.String) -> valueOf
    java.lang.String toHttpHeaderValue() -> toHttpHeaderValue
org.jboss.netty.handler.codec.marshalling.ChannelBufferByteInput -> org.jboss.netty.handler.codec.marshalling.ChannelBufferByteInput:
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    void close() -> close
    int available() -> available
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput -> org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:
    org.jboss.netty.buffer.ChannelBuffer buffer -> buffer
    void close() -> close
    void flush() -> flush
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    org.jboss.netty.buffer.ChannelBuffer getBuffer() -> getBuffer
org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder -> org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:
    org.jboss.netty.handler.codec.marshalling.UnmarshallerProvider provider -> provider
    int maxObjectSize -> maxObjectSize
    boolean discardingTooLongFrame -> discardingTooLongFrame
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum) -> decode
    java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum) -> decodeLast
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decodeLast
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingEncoder -> org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingEncoder:
    org.jboss.netty.handler.codec.marshalling.MarshallerProvider provider -> provider
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider -> org.jboss.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider:
    org.jboss.marshalling.Unmarshaller getUnmarshaller(org.jboss.netty.channel.ChannelHandlerContext) -> getUnmarshaller
org.jboss.netty.handler.codec.marshalling.DefaultMarshallerProvider -> org.jboss.netty.handler.codec.marshalling.DefaultMarshallerProvider:
    org.jboss.marshalling.MarshallerFactory factory -> factory
    org.jboss.marshalling.MarshallingConfiguration config -> config
    org.jboss.marshalling.Marshaller getMarshaller(org.jboss.netty.channel.ChannelHandlerContext) -> getMarshaller
org.jboss.netty.handler.codec.marshalling.DefaultUnmarshallerProvider -> org.jboss.netty.handler.codec.marshalling.DefaultUnmarshallerProvider:
    org.jboss.marshalling.MarshallerFactory factory -> factory
    org.jboss.marshalling.MarshallingConfiguration config -> config
    org.jboss.marshalling.Unmarshaller getUnmarshaller(org.jboss.netty.channel.ChannelHandlerContext) -> getUnmarshaller
org.jboss.netty.handler.codec.marshalling.LimitingByteInput -> org.jboss.netty.handler.codec.marshalling.LimitingByteInput:
    org.jboss.netty.handler.codec.marshalling.LimitingByteInput$TooBigObjectException EXCEPTION -> EXCEPTION
    org.jboss.marshalling.ByteInput input -> input
    long limit -> limit
    long read -> read
    void close() -> close
    int available() -> available
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int readable(int) -> readable
org.jboss.netty.handler.codec.marshalling.LimitingByteInput$TooBigObjectException -> org.jboss.netty.handler.codec.marshalling.LimitingByteInput$TooBigObjectException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.marshalling.MarshallerProvider -> org.jboss.netty.handler.codec.marshalling.MarshallerProvider:
    org.jboss.marshalling.Marshaller getMarshaller(org.jboss.netty.channel.ChannelHandlerContext) -> getMarshaller
org.jboss.netty.handler.codec.marshalling.MarshallingDecoder -> org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:
    org.jboss.netty.handler.codec.marshalling.UnmarshallerProvider provider -> provider
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int) -> extractFrame
org.jboss.netty.handler.codec.marshalling.MarshallingEncoder -> org.jboss.netty.handler.codec.marshalling.MarshallingEncoder:
    byte[] LENGTH_PLACEHOLDER -> LENGTH_PLACEHOLDER
    org.jboss.netty.handler.codec.marshalling.MarshallerProvider provider -> provider
    int estimatedLength -> estimatedLength
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.marshalling.ThreadLocalMarshallerProvider -> org.jboss.netty.handler.codec.marshalling.ThreadLocalMarshallerProvider:
    java.lang.ThreadLocal marshallers -> marshallers
    org.jboss.marshalling.MarshallerFactory factory -> factory
    org.jboss.marshalling.MarshallingConfiguration config -> config
    org.jboss.marshalling.Marshaller getMarshaller(org.jboss.netty.channel.ChannelHandlerContext) -> getMarshaller
org.jboss.netty.handler.codec.marshalling.ThreadLocalUnmarshallerProvider -> org.jboss.netty.handler.codec.marshalling.ThreadLocalUnmarshallerProvider:
    java.lang.ThreadLocal unmarshallers -> unmarshallers
    org.jboss.marshalling.MarshallerFactory factory -> factory
    org.jboss.marshalling.MarshallingConfiguration config -> config
    org.jboss.marshalling.Unmarshaller getUnmarshaller(org.jboss.netty.channel.ChannelHandlerContext) -> getUnmarshaller
org.jboss.netty.handler.codec.marshalling.UnmarshallerProvider -> org.jboss.netty.handler.codec.marshalling.UnmarshallerProvider:
    org.jboss.marshalling.Unmarshaller getUnmarshaller(org.jboss.netty.channel.ChannelHandlerContext) -> getUnmarshaller
org.jboss.netty.handler.codec.oneone.OneToOneDecoder -> org.jboss.netty.handler.codec.oneone.OneToOneDecoder:
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> decode
org.jboss.netty.handler.codec.oneone.OneToOneEncoder -> org.jboss.netty.handler.codec.oneone.OneToOneEncoder:
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> doEncode
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.oneone.OneToOneStrictEncoder -> org.jboss.netty.handler.codec.oneone.OneToOneStrictEncoder:
    boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> doEncode
org.jboss.netty.handler.codec.protobuf.ProtobufDecoder -> org.jboss.netty.handler.codec.protobuf.ProtobufDecoder:
    boolean HAS_PARSER -> HAS_PARSER
    com.google.protobuf.MessageLite prototype -> prototype
    com.google.protobuf.ExtensionRegistry extensionRegistry -> extensionRegistry
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> decode
org.jboss.netty.handler.codec.protobuf.ProtobufEncoder -> org.jboss.netty.handler.codec.protobuf.ProtobufEncoder:
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder -> org.jboss.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
org.jboss.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender -> org.jboss.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.replay.ReplayError -> org.jboss.netty.handler.codec.replay.ReplayError:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.replay.ReplayingDecoder -> org.jboss.netty.handler.codec.replay.ReplayingDecoder:
    org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer replayable -> replayable
    java.lang.Enum state -> state
    int checkpoint -> checkpoint
    boolean needsCleanup -> needsCleanup
    org.jboss.netty.buffer.ChannelBuffer internalBuffer() -> internalBuffer
    void checkpoint() -> checkpoint
    void checkpoint(java.lang.Enum) -> checkpoint
    java.lang.Enum getState() -> getState
    java.lang.Enum setState(java.lang.Enum) -> setState
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
    java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decodeLast
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decodeLast
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress) -> callDecode
    void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> cleanup
org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer -> org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:
    java.lang.Error REPLAY -> REPLAY
    org.jboss.netty.handler.codec.replay.ReplayingDecoder parent -> parent
    boolean terminated -> terminated
    org.jboss.netty.buffer.ChannelBuffer buf() -> buf
    void terminate() -> terminate
    int capacity() -> capacity
    boolean isDirect() -> isDirect
    boolean hasArray() -> hasArray
    byte[] array() -> array
    int arrayOffset() -> arrayOffset
    void clear() -> clear
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jboss.netty.buffer.ChannelBuffer) -> compareTo
    org.jboss.netty.buffer.ChannelBuffer copy() -> copy
    org.jboss.netty.buffer.ChannelBuffer copy(int,int) -> copy
    void discardReadBytes() -> discardReadBytes
    void ensureWritableBytes(int) -> ensureWritableBytes
    org.jboss.netty.buffer.ChannelBuffer duplicate() -> duplicate
    byte getByte(int) -> getByte
    short getUnsignedByte(int) -> getUnsignedByte
    void getBytes(int,byte[],int,int) -> getBytes
    void getBytes(int,byte[]) -> getBytes
    void getBytes(int,java.nio.ByteBuffer) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int) -> getBytes
    void getBytes(int,org.jboss.netty.buffer.ChannelBuffer) -> getBytes
    int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    void getBytes(int,java.io.OutputStream,int) -> getBytes
    int getInt(int) -> getInt
    long getUnsignedInt(int) -> getUnsignedInt
    long getLong(int) -> getLong
    int getMedium(int) -> getMedium
    int getUnsignedMedium(int) -> getUnsignedMedium
    short getShort(int) -> getShort
    int getUnsignedShort(int) -> getUnsignedShort
    char getChar(int) -> getChar
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    int hashCode() -> hashCode
    int indexOf(int,int,byte) -> indexOf
    int indexOf(int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> indexOf
    int bytesBefore(byte) -> bytesBefore
    int bytesBefore(org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    int bytesBefore(int,byte) -> bytesBefore
    int bytesBefore(int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    int bytesBefore(int,int,byte) -> bytesBefore
    int bytesBefore(int,int,org.jboss.netty.buffer.ChannelBufferIndexFinder) -> bytesBefore
    void markReaderIndex() -> markReaderIndex
    void markWriterIndex() -> markWriterIndex
    org.jboss.netty.buffer.ChannelBufferFactory factory() -> factory
    java.nio.ByteOrder order() -> order
    boolean readable() -> readable
    int readableBytes() -> readableBytes
    byte readByte() -> readByte
    short readUnsignedByte() -> readUnsignedByte
    void readBytes(byte[],int,int) -> readBytes
    void readBytes(byte[]) -> readBytes
    void readBytes(java.nio.ByteBuffer) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer,int) -> readBytes
    void readBytes(org.jboss.netty.buffer.ChannelBuffer) -> readBytes
    int readBytes(java.nio.channels.GatheringByteChannel,int) -> readBytes
    org.jboss.netty.buffer.ChannelBuffer readBytes(int) -> readBytes
    org.jboss.netty.buffer.ChannelBuffer readSlice(int) -> readSlice
    void readBytes(java.io.OutputStream,int) -> readBytes
    int readerIndex() -> readerIndex
    void readerIndex(int) -> readerIndex
    int readInt() -> readInt
    long readUnsignedInt() -> readUnsignedInt
    long readLong() -> readLong
    int readMedium() -> readMedium
    int readUnsignedMedium() -> readUnsignedMedium
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    void resetReaderIndex() -> resetReaderIndex
    void resetWriterIndex() -> resetWriterIndex
    void setByte(int,int) -> setByte
    void setBytes(int,byte[],int,int) -> setBytes
    void setBytes(int,byte[]) -> setBytes
    void setBytes(int,java.nio.ByteBuffer) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int) -> setBytes
    void setBytes(int,org.jboss.netty.buffer.ChannelBuffer) -> setBytes
    int setBytes(int,java.io.InputStream,int) -> setBytes
    void setZero(int,int) -> setZero
    int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    void setIndex(int,int) -> setIndex
    void setInt(int,int) -> setInt
    void setLong(int,long) -> setLong
    void setMedium(int,int) -> setMedium
    void setShort(int,int) -> setShort
    void setChar(int,int) -> setChar
    void setFloat(int,float) -> setFloat
    void setDouble(int,double) -> setDouble
    void skipBytes(int) -> skipBytes
    org.jboss.netty.buffer.ChannelBuffer slice() -> slice
    org.jboss.netty.buffer.ChannelBuffer slice(int,int) -> slice
    java.nio.ByteBuffer toByteBuffer() -> toByteBuffer
    java.nio.ByteBuffer toByteBuffer(int,int) -> toByteBuffer
    java.nio.ByteBuffer[] toByteBuffers() -> toByteBuffers
    java.nio.ByteBuffer[] toByteBuffers(int,int) -> toByteBuffers
    java.lang.String toString(int,int,java.nio.charset.Charset) -> toString
    java.lang.String toString(java.nio.charset.Charset) -> toString
    java.lang.String toString() -> toString
    boolean writable() -> writable
    int writableBytes() -> writableBytes
    void writeByte(int) -> writeByte
    void writeBytes(byte[],int,int) -> writeBytes
    void writeBytes(byte[]) -> writeBytes
    void writeBytes(java.nio.ByteBuffer) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int) -> writeBytes
    void writeBytes(org.jboss.netty.buffer.ChannelBuffer) -> writeBytes
    int writeBytes(java.io.InputStream,int) -> writeBytes
    int writeBytes(java.nio.channels.ScatteringByteChannel,int) -> writeBytes
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeMedium(int) -> writeMedium
    void writeZero(int) -> writeZero
    int writerIndex() -> writerIndex
    void writerIndex(int) -> writerIndex
    void writeShort(int) -> writeShort
    void writeChar(int) -> writeChar
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void checkIndex(int,int) -> checkIndex
    void checkReadableBytes(int) -> checkReadableBytes
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.replay.UnreplayableOperationException -> org.jboss.netty.handler.codec.replay.UnreplayableOperationException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.replay.VoidEnum -> org.jboss.netty.handler.codec.replay.VoidEnum:
    org.jboss.netty.handler.codec.replay.VoidEnum[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.replay.VoidEnum[] values() -> values
    org.jboss.netty.handler.codec.replay.VoidEnum valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.rtsp.RtspHeaders -> org.jboss.netty.handler.codec.rtsp.RtspHeaders:
org.jboss.netty.handler.codec.rtsp.RtspHeaders$Names -> org.jboss.netty.handler.codec.rtsp.RtspHeaders$Names:
    java.lang.String ACCEPT -> ACCEPT
    java.lang.String ACCEPT_ENCODING -> ACCEPT_ENCODING
    java.lang.String ACCEPT_LANGUAGE -> ACCEPT_LANGUAGE
    java.lang.String ALLOW -> ALLOW
    java.lang.String AUTHORIZATION -> AUTHORIZATION
    java.lang.String BANDWIDTH -> BANDWIDTH
    java.lang.String BLOCKSIZE -> BLOCKSIZE
    java.lang.String CACHE_CONTROL -> CACHE_CONTROL
    java.lang.String CONFERENCE -> CONFERENCE
    java.lang.String CONNECTION -> CONNECTION
    java.lang.String CONTENT_BASE -> CONTENT_BASE
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LANGUAGE -> CONTENT_LANGUAGE
    java.lang.String CONTENT_LENGTH -> CONTENT_LENGTH
    java.lang.String CONTENT_LOCATION -> CONTENT_LOCATION
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String CSEQ -> CSEQ
    java.lang.String DATE -> DATE
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String FROM -> FROM
    java.lang.String HOST -> HOST
    java.lang.String IF_MATCH -> IF_MATCH
    java.lang.String IF_MODIFIED_SINCE -> IF_MODIFIED_SINCE
    java.lang.String KEYMGMT -> KEYMGMT
    java.lang.String LAST_MODIFIED -> LAST_MODIFIED
    java.lang.String PROXY_AUTHENTICATE -> PROXY_AUTHENTICATE
    java.lang.String PROXY_REQUIRE -> PROXY_REQUIRE
    java.lang.String PUBLIC -> PUBLIC
    java.lang.String RANGE -> RANGE
    java.lang.String REFERER -> REFERER
    java.lang.String REQUIRE -> REQUIRE
    java.lang.String RETRT_AFTER -> RETRT_AFTER
    java.lang.String RTP_INFO -> RTP_INFO
    java.lang.String SCALE -> SCALE
    java.lang.String SESSION -> SESSION
    java.lang.String SERVER -> SERVER
    java.lang.String SPEED -> SPEED
    java.lang.String TIMESTAMP -> TIMESTAMP
    java.lang.String TRANSPORT -> TRANSPORT
    java.lang.String UNSUPPORTED -> UNSUPPORTED
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String VARY -> VARY
    java.lang.String VIA -> VIA
    java.lang.String WWW_AUTHENTICATE -> WWW_AUTHENTICATE
org.jboss.netty.handler.codec.rtsp.RtspHeaders$Values -> org.jboss.netty.handler.codec.rtsp.RtspHeaders$Values:
    java.lang.String APPEND -> APPEND
    java.lang.String AVP -> AVP
    java.lang.String BYTES -> BYTES
    java.lang.String CHARSET -> CHARSET
    java.lang.String CLIENT_PORT -> CLIENT_PORT
    java.lang.String CLOCK -> CLOCK
    java.lang.String CLOSE -> CLOSE
    java.lang.String COMPRESS -> COMPRESS
    java.lang.String CONTINUE -> CONTINUE
    java.lang.String DEFLATE -> DEFLATE
    java.lang.String DESTINATION -> DESTINATION
    java.lang.String GZIP -> GZIP
    java.lang.String IDENTITY -> IDENTITY
    java.lang.String INTERLEAVED -> INTERLEAVED
    java.lang.String KEEP_ALIVE -> KEEP_ALIVE
    java.lang.String LAYERS -> LAYERS
    java.lang.String MAX_AGE -> MAX_AGE
    java.lang.String MAX_STALE -> MAX_STALE
    java.lang.String MIN_FRESH -> MIN_FRESH
    java.lang.String MODE -> MODE
    java.lang.String MULTICAST -> MULTICAST
    java.lang.String MUST_REVALIDATE -> MUST_REVALIDATE
    java.lang.String NONE -> NONE
    java.lang.String NO_CACHE -> NO_CACHE
    java.lang.String NO_TRANSFORM -> NO_TRANSFORM
    java.lang.String ONLY_IF_CACHED -> ONLY_IF_CACHED
    java.lang.String PORT -> PORT
    java.lang.String PRIVATE -> PRIVATE
    java.lang.String PROXY_REVALIDATE -> PROXY_REVALIDATE
    java.lang.String PUBLIC -> PUBLIC
    java.lang.String RTP -> RTP
    java.lang.String RTPTIME -> RTPTIME
    java.lang.String SEQ -> SEQ
    java.lang.String SERVER_PORT -> SERVER_PORT
    java.lang.String SSRC -> SSRC
    java.lang.String TCP -> TCP
    java.lang.String TIME -> TIME
    java.lang.String TIMEOUT -> TIMEOUT
    java.lang.String TTL -> TTL
    java.lang.String UDP -> UDP
    java.lang.String UNICAST -> UNICAST
    java.lang.String URL -> URL
org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder -> org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:
    org.jboss.netty.handler.codec.embedder.DecoderEmbedder aggregator -> aggregator
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State) -> decode
    boolean isContentAlwaysEmpty(org.jboss.netty.handler.codec.http.HttpMessage) -> isContentAlwaysEmpty
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.rtsp.RtspMessageEncoder -> org.jboss.netty.handler.codec.rtsp.RtspMessageEncoder:
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.rtsp.RtspMethods -> org.jboss.netty.handler.codec.rtsp.RtspMethods:
    org.jboss.netty.handler.codec.http.HttpMethod OPTIONS -> OPTIONS
    org.jboss.netty.handler.codec.http.HttpMethod DESCRIBE -> DESCRIBE
    org.jboss.netty.handler.codec.http.HttpMethod ANNOUNCE -> ANNOUNCE
    org.jboss.netty.handler.codec.http.HttpMethod SETUP -> SETUP
    org.jboss.netty.handler.codec.http.HttpMethod PLAY -> PLAY
    org.jboss.netty.handler.codec.http.HttpMethod PAUSE -> PAUSE
    org.jboss.netty.handler.codec.http.HttpMethod TEARDOWN -> TEARDOWN
    org.jboss.netty.handler.codec.http.HttpMethod GET_PARAMETER -> GET_PARAMETER
    org.jboss.netty.handler.codec.http.HttpMethod SET_PARAMETER -> SET_PARAMETER
    org.jboss.netty.handler.codec.http.HttpMethod REDIRECT -> REDIRECT
    org.jboss.netty.handler.codec.http.HttpMethod RECORD -> RECORD
    java.util.Map methodMap -> methodMap
    org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder -> org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder:
    org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[]) -> createMessage
    boolean isDecodingRequest() -> isDecodingRequest
org.jboss.netty.handler.codec.rtsp.RtspRequestEncoder -> org.jboss.netty.handler.codec.rtsp.RtspRequestEncoder:
    void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage) -> encodeInitialLine
org.jboss.netty.handler.codec.rtsp.RtspResponseDecoder -> org.jboss.netty.handler.codec.rtsp.RtspResponseDecoder:
    org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[]) -> createMessage
    boolean isDecodingRequest() -> isDecodingRequest
org.jboss.netty.handler.codec.rtsp.RtspResponseEncoder -> org.jboss.netty.handler.codec.rtsp.RtspResponseEncoder:
    void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage) -> encodeInitialLine
org.jboss.netty.handler.codec.rtsp.RtspResponseStatuses -> org.jboss.netty.handler.codec.rtsp.RtspResponseStatuses:
    org.jboss.netty.handler.codec.http.HttpResponseStatus CONTINUE -> CONTINUE
    org.jboss.netty.handler.codec.http.HttpResponseStatus OK -> OK
    org.jboss.netty.handler.codec.http.HttpResponseStatus CREATED -> CREATED
    org.jboss.netty.handler.codec.http.HttpResponseStatus LOW_STORAGE_SPACE -> LOW_STORAGE_SPACE
    org.jboss.netty.handler.codec.http.HttpResponseStatus MULTIPLE_CHOICES -> MULTIPLE_CHOICES
    org.jboss.netty.handler.codec.http.HttpResponseStatus MOVED_PERMANENTLY -> MOVED_PERMANENTLY
    org.jboss.netty.handler.codec.http.HttpResponseStatus MOVED_TEMPORARILY -> MOVED_TEMPORARILY
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_MODIFIED -> NOT_MODIFIED
    org.jboss.netty.handler.codec.http.HttpResponseStatus USE_PROXY -> USE_PROXY
    org.jboss.netty.handler.codec.http.HttpResponseStatus BAD_REQUEST -> BAD_REQUEST
    org.jboss.netty.handler.codec.http.HttpResponseStatus UNAUTHORIZED -> UNAUTHORIZED
    org.jboss.netty.handler.codec.http.HttpResponseStatus PAYMENT_REQUIRED -> PAYMENT_REQUIRED
    org.jboss.netty.handler.codec.http.HttpResponseStatus FORBIDDEN -> FORBIDDEN
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_FOUND -> NOT_FOUND
    org.jboss.netty.handler.codec.http.HttpResponseStatus METHOD_NOT_ALLOWED -> METHOD_NOT_ALLOWED
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_ACCEPTABLE -> NOT_ACCEPTABLE
    org.jboss.netty.handler.codec.http.HttpResponseStatus PROXY_AUTHENTICATION_REQUIRED -> PROXY_AUTHENTICATION_REQUIRED
    org.jboss.netty.handler.codec.http.HttpResponseStatus REQUEST_TIMEOUT -> REQUEST_TIMEOUT
    org.jboss.netty.handler.codec.http.HttpResponseStatus GONE -> GONE
    org.jboss.netty.handler.codec.http.HttpResponseStatus LENGTH_REQUIRED -> LENGTH_REQUIRED
    org.jboss.netty.handler.codec.http.HttpResponseStatus PRECONDITION_FAILED -> PRECONDITION_FAILED
    org.jboss.netty.handler.codec.http.HttpResponseStatus REQUEST_ENTITY_TOO_LARGE -> REQUEST_ENTITY_TOO_LARGE
    org.jboss.netty.handler.codec.http.HttpResponseStatus REQUEST_URI_TOO_LONG -> REQUEST_URI_TOO_LONG
    org.jboss.netty.handler.codec.http.HttpResponseStatus UNSUPPORTED_MEDIA_TYPE -> UNSUPPORTED_MEDIA_TYPE
    org.jboss.netty.handler.codec.http.HttpResponseStatus PARAMETER_NOT_UNDERSTOOD -> PARAMETER_NOT_UNDERSTOOD
    org.jboss.netty.handler.codec.http.HttpResponseStatus CONFERENCE_NOT_FOUND -> CONFERENCE_NOT_FOUND
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_ENOUGH_BANDWIDTH -> NOT_ENOUGH_BANDWIDTH
    org.jboss.netty.handler.codec.http.HttpResponseStatus SESSION_NOT_FOUND -> SESSION_NOT_FOUND
    org.jboss.netty.handler.codec.http.HttpResponseStatus METHOD_NOT_VALID -> METHOD_NOT_VALID
    org.jboss.netty.handler.codec.http.HttpResponseStatus HEADER_FIELD_NOT_VALID -> HEADER_FIELD_NOT_VALID
    org.jboss.netty.handler.codec.http.HttpResponseStatus INVALID_RANGE -> INVALID_RANGE
    org.jboss.netty.handler.codec.http.HttpResponseStatus PARAMETER_IS_READONLY -> PARAMETER_IS_READONLY
    org.jboss.netty.handler.codec.http.HttpResponseStatus AGGREGATE_OPERATION_NOT_ALLOWED -> AGGREGATE_OPERATION_NOT_ALLOWED
    org.jboss.netty.handler.codec.http.HttpResponseStatus ONLY_AGGREGATE_OPERATION_ALLOWED -> ONLY_AGGREGATE_OPERATION_ALLOWED
    org.jboss.netty.handler.codec.http.HttpResponseStatus UNSUPPORTED_TRANSPORT -> UNSUPPORTED_TRANSPORT
    org.jboss.netty.handler.codec.http.HttpResponseStatus DESTINATION_UNREACHABLE -> DESTINATION_UNREACHABLE
    org.jboss.netty.handler.codec.http.HttpResponseStatus KEY_MANAGEMENT_FAILURE -> KEY_MANAGEMENT_FAILURE
    org.jboss.netty.handler.codec.http.HttpResponseStatus INTERNAL_SERVER_ERROR -> INTERNAL_SERVER_ERROR
    org.jboss.netty.handler.codec.http.HttpResponseStatus NOT_IMPLEMENTED -> NOT_IMPLEMENTED
    org.jboss.netty.handler.codec.http.HttpResponseStatus BAD_GATEWAY -> BAD_GATEWAY
    org.jboss.netty.handler.codec.http.HttpResponseStatus SERVICE_UNAVAILABLE -> SERVICE_UNAVAILABLE
    org.jboss.netty.handler.codec.http.HttpResponseStatus GATEWAY_TIMEOUT -> GATEWAY_TIMEOUT
    org.jboss.netty.handler.codec.http.HttpResponseStatus RTSP_VERSION_NOT_SUPPORTED -> RTSP_VERSION_NOT_SUPPORTED
    org.jboss.netty.handler.codec.http.HttpResponseStatus OPTION_NOT_SUPPORTED -> OPTION_NOT_SUPPORTED
    org.jboss.netty.handler.codec.http.HttpResponseStatus valueOf(int) -> valueOf
org.jboss.netty.handler.codec.rtsp.RtspVersions -> org.jboss.netty.handler.codec.rtsp.RtspVersions:
    org.jboss.netty.handler.codec.http.HttpVersion RTSP_1_0 -> RTSP_1_0
    org.jboss.netty.handler.codec.http.HttpVersion valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.serialization.CachingClassResolver -> org.jboss.netty.handler.codec.serialization.CachingClassResolver:
    java.util.Map classCache -> classCache
    org.jboss.netty.handler.codec.serialization.ClassResolver delegate -> delegate
    java.lang.Class resolve(java.lang.String) -> resolve
org.jboss.netty.handler.codec.serialization.ClassLoaderClassResolver -> org.jboss.netty.handler.codec.serialization.ClassLoaderClassResolver:
    java.lang.ClassLoader classLoader -> classLoader
    java.lang.Class resolve(java.lang.String) -> resolve
org.jboss.netty.handler.codec.serialization.ClassResolver -> org.jboss.netty.handler.codec.serialization.ClassResolver:
    java.lang.Class resolve(java.lang.String) -> resolve
org.jboss.netty.handler.codec.serialization.ClassResolvers -> org.jboss.netty.handler.codec.serialization.ClassResolvers:
    org.jboss.netty.handler.codec.serialization.ClassResolver cacheDisabled(java.lang.ClassLoader) -> cacheDisabled
    org.jboss.netty.handler.codec.serialization.ClassResolver weakCachingResolver(java.lang.ClassLoader) -> weakCachingResolver
    org.jboss.netty.handler.codec.serialization.ClassResolver softCachingResolver(java.lang.ClassLoader) -> softCachingResolver
    org.jboss.netty.handler.codec.serialization.ClassResolver weakCachingConcurrentResolver(java.lang.ClassLoader) -> weakCachingConcurrentResolver
    org.jboss.netty.handler.codec.serialization.ClassResolver softCachingConcurrentResolver(java.lang.ClassLoader) -> softCachingConcurrentResolver
    java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader) -> defaultClassLoader
org.jboss.netty.handler.codec.serialization.CompactObjectInputStream -> org.jboss.netty.handler.codec.serialization.CompactObjectInputStream:
    org.jboss.netty.handler.codec.serialization.ClassResolver classResolver -> classResolver
    void readStreamHeader() -> readStreamHeader
    java.io.ObjectStreamClass readClassDescriptor() -> readClassDescriptor
    java.lang.Class resolveClass(java.io.ObjectStreamClass) -> resolveClass
org.jboss.netty.handler.codec.serialization.CompactObjectOutputStream -> org.jboss.netty.handler.codec.serialization.CompactObjectOutputStream:
    int TYPE_FAT_DESCRIPTOR -> TYPE_FAT_DESCRIPTOR
    int TYPE_THIN_DESCRIPTOR -> TYPE_THIN_DESCRIPTOR
    void writeStreamHeader() -> writeStreamHeader
    void writeClassDescriptor(java.io.ObjectStreamClass) -> writeClassDescriptor
org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder -> org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder:
    java.util.concurrent.atomic.AtomicReference buffer -> buffer
    int resetInterval -> resetInterval
    java.io.ObjectOutputStream oout -> oout
    int writtenObjects -> writtenObjects
    java.io.ObjectOutputStream newObjectOutputStream(java.io.OutputStream) -> newObjectOutputStream
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
    org.jboss.netty.buffer.ChannelBuffer buffer(org.jboss.netty.channel.ChannelHandlerContext) -> buffer
org.jboss.netty.handler.codec.serialization.ObjectDecoder -> org.jboss.netty.handler.codec.serialization.ObjectDecoder:
    org.jboss.netty.handler.codec.serialization.ClassResolver classResolver -> classResolver
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int) -> extractFrame
org.jboss.netty.handler.codec.serialization.ObjectDecoderInputStream -> org.jboss.netty.handler.codec.serialization.ObjectDecoderInputStream:
    java.io.DataInputStream in -> in
    int maxObjectSize -> maxObjectSize
    org.jboss.netty.handler.codec.serialization.ClassResolver classResolver -> classResolver
    java.lang.Object readObject() -> readObject
    int available() -> available
    void close() -> close
    void mark(int) -> mark
    boolean markSupported() -> markSupported
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    char readChar() -> readChar
    double readDouble() -> readDouble
    float readFloat() -> readFloat
    void readFully(byte[],int,int) -> readFully
    void readFully(byte[]) -> readFully
    int readInt() -> readInt
    java.lang.String readLine() -> readLine
    long readLong() -> readLong
    short readShort() -> readShort
    int readUnsignedByte() -> readUnsignedByte
    int readUnsignedShort() -> readUnsignedShort
    java.lang.String readUTF() -> readUTF
    void reset() -> reset
    long skip(long) -> skip
    int skipBytes(int) -> skipBytes
org.jboss.netty.handler.codec.serialization.ObjectEncoder -> org.jboss.netty.handler.codec.serialization.ObjectEncoder:
    byte[] LENGTH_PLACEHOLDER -> LENGTH_PLACEHOLDER
    int estimatedLength -> estimatedLength
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream -> org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:
    java.io.DataOutputStream out -> out
    int estimatedLength -> estimatedLength
    void writeObject(java.lang.Object) -> writeObject
    void write(int) -> write
    void close() -> close
    void flush() -> flush
    int size() -> size
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeBytes(java.lang.String) -> writeBytes
    void writeChar(int) -> writeChar
    void writeChars(java.lang.String) -> writeChars
    void writeDouble(double) -> writeDouble
    void writeFloat(float) -> writeFloat
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeShort(int) -> writeShort
    void writeUTF(java.lang.String) -> writeUTF
org.jboss.netty.handler.codec.serialization.ReferenceMap -> org.jboss.netty.handler.codec.serialization.ReferenceMap:
    java.util.Map delegate -> delegate
    java.lang.ref.Reference fold(java.lang.Object) -> fold
    java.lang.Object unfold(java.lang.ref.Reference) -> unfold
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
org.jboss.netty.handler.codec.serialization.SoftReferenceMap -> org.jboss.netty.handler.codec.serialization.SoftReferenceMap:
    java.lang.ref.Reference fold(java.lang.Object) -> fold
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    void clear() -> clear
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean isEmpty() -> isEmpty
    int size() -> size
org.jboss.netty.handler.codec.serialization.SwitchableInputStream -> org.jboss.netty.handler.codec.serialization.SwitchableInputStream:
    void switchStream(java.io.InputStream) -> switchStream
org.jboss.netty.handler.codec.serialization.WeakReferenceMap -> org.jboss.netty.handler.codec.serialization.WeakReferenceMap:
    java.lang.ref.Reference fold(java.lang.Object) -> fold
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    void clear() -> clear
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean isEmpty() -> isEmpty
    int size() -> size
org.jboss.netty.handler.codec.socks.SocksAuthRequest -> org.jboss.netty.handler.codec.socks.SocksAuthRequest:
    java.nio.charset.CharsetEncoder asciiEncoder -> asciiEncoder
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion SUBNEGOTIATION_VERSION -> SUBNEGOTIATION_VERSION
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String getUsername() -> getUsername
    java.lang.String getPassword() -> getPassword
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder -> org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion version -> version
    int fieldLength -> fieldLength
    java.lang.String username -> username
    java.lang.String password -> password
    org.jboss.netty.handler.codec.socks.SocksRequest msg -> msg
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State) -> decode
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$1 -> org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksAuthRequestDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksAuthRequestDecoder$State
org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State -> org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State:
    org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State CHECK_PROTOCOL_VERSION -> CHECK_PROTOCOL_VERSION
    org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State READ_USERNAME -> READ_USERNAME
    org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State READ_PASSWORD -> READ_PASSWORD
    org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.SocksAuthResponse -> org.jboss.netty.handler.codec.socks.SocksAuthResponse:
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion SUBNEGOTIATION_VERSION -> SUBNEGOTIATION_VERSION
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus authStatus -> authStatus
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus getAuthStatus() -> getAuthStatus
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder -> org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder:
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion version -> version
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus authStatus -> authStatus
    org.jboss.netty.handler.codec.socks.SocksResponse msg -> msg
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State) -> decode
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$1 -> org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksAuthResponseDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksAuthResponseDecoder$State
org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State -> org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State:
    org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State CHECK_PROTOCOL_VERSION -> CHECK_PROTOCOL_VERSION
    org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State READ_AUTH_RESPONSE -> READ_AUTH_RESPONSE
    org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.SocksCmdRequest -> org.jboss.netty.handler.codec.socks.SocksCmdRequest:
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType cmdType -> cmdType
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType addressType -> addressType
    java.lang.String host -> host
    int port -> port
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType getCmdType() -> getCmdType
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType getAddressType() -> getAddressType
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.SocksCmdRequest$1 -> org.jboss.netty.handler.codec.socks.SocksCmdRequest$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksMessage$AddressType -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksMessage$AddressType
org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder -> org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion version -> version
    int fieldLength -> fieldLength
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType cmdType -> cmdType
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType addressType -> addressType
    byte reserved -> reserved
    java.lang.String host -> host
    int port -> port
    org.jboss.netty.handler.codec.socks.SocksRequest msg -> msg
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State) -> decode
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$1 -> org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksMessage$AddressType -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksMessage$AddressType
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksCmdRequestDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksCmdRequestDecoder$State
org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State -> org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State:
    org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State CHECK_PROTOCOL_VERSION -> CHECK_PROTOCOL_VERSION
    org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State READ_CMD_HEADER -> READ_CMD_HEADER
    org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State READ_CMD_ADDRESS -> READ_CMD_ADDRESS
    org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.SocksCmdResponse -> org.jboss.netty.handler.codec.socks.SocksCmdResponse:
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus cmdStatus -> cmdStatus
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType addressType -> addressType
    byte[] IPv4_HOSTNAME_ZEROED -> IPv4_HOSTNAME_ZEROED
    byte[] IPv6_HOSTNAME_ZEROED -> IPv6_HOSTNAME_ZEROED
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus getCmdStatus() -> getCmdStatus
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType getAddressType() -> getAddressType
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.SocksCmdResponse$1 -> org.jboss.netty.handler.codec.socks.SocksCmdResponse$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksMessage$AddressType -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksMessage$AddressType
org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder -> org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion version -> version
    int fieldLength -> fieldLength
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus cmdStatus -> cmdStatus
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType addressType -> addressType
    byte reserved -> reserved
    java.lang.String host -> host
    int port -> port
    org.jboss.netty.handler.codec.socks.SocksResponse msg -> msg
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State) -> decode
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$1 -> org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksMessage$AddressType -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksMessage$AddressType
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksCmdResponseDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksCmdResponseDecoder$State
org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State -> org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State:
    org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State CHECK_PROTOCOL_VERSION -> CHECK_PROTOCOL_VERSION
    org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State READ_CMD_HEADER -> READ_CMD_HEADER
    org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State READ_CMD_ADDRESS -> READ_CMD_ADDRESS
    org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.SocksCommonUtils -> org.jboss.netty.handler.codec.socks.SocksCommonUtils:
    org.jboss.netty.handler.codec.socks.SocksRequest UNKNOWN_SOCKS_REQUEST -> UNKNOWN_SOCKS_REQUEST
    org.jboss.netty.handler.codec.socks.SocksResponse UNKNOWN_SOCKS_RESPONSE -> UNKNOWN_SOCKS_RESPONSE
    int SECOND_ADDRESS_OCTET_SHIFT -> SECOND_ADDRESS_OCTET_SHIFT
    int FIRST_ADDRESS_OCTET_SHIFT -> FIRST_ADDRESS_OCTET_SHIFT
    int THIRD_ADDRESS_OCTET_SHIFT -> THIRD_ADDRESS_OCTET_SHIFT
    int XOR_DEFAULT_VALUE -> XOR_DEFAULT_VALUE
    char[] ipv6conseqZeroFiller -> ipv6conseqZeroFiller
    char ipv6hextetSeparator -> ipv6hextetSeparator
    boolean $assertionsDisabled -> $assertionsDisabled
    java.lang.String intToIp(int) -> intToIp
    java.lang.String ipv6toCompressedForm(byte[]) -> ipv6toCompressedForm
    java.lang.String ipv6toStr(byte[]) -> ipv6toStr
    void ipv6toStr(java.lang.StringBuilder,byte[],int,int) -> ipv6toStr
org.jboss.netty.handler.codec.socks.SocksInitRequest -> org.jboss.netty.handler.codec.socks.SocksInitRequest:
    java.util.List authSchemes -> authSchemes
    java.util.List getAuthSchemes() -> getAuthSchemes
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder -> org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder:
    java.util.List authSchemes -> authSchemes
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion version -> version
    byte authSchemeNum -> authSchemeNum
    org.jboss.netty.handler.codec.socks.SocksRequest msg -> msg
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State) -> decode
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$1 -> org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksInitRequestDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksInitRequestDecoder$State
org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State -> org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State:
    org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State CHECK_PROTOCOL_VERSION -> CHECK_PROTOCOL_VERSION
    org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State READ_AUTH_SCHEMES -> READ_AUTH_SCHEMES
    org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.SocksInitResponse -> org.jboss.netty.handler.codec.socks.SocksInitResponse:
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme authScheme -> authScheme
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme getAuthScheme() -> getAuthScheme
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder -> org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder:
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion version -> version
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme authScheme -> authScheme
    org.jboss.netty.handler.codec.socks.SocksResponse msg -> msg
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State) -> decode
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum) -> decode
org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$1 -> org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$socks$SocksInitResponseDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$socks$SocksInitResponseDecoder$State
org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State -> org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State:
    org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State CHECK_PROTOCOL_VERSION -> CHECK_PROTOCOL_VERSION
    org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State READ_PREFFERED_AUTH_TYPE -> READ_PREFFERED_AUTH_TYPE
    org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.SocksMessage -> org.jboss.netty.handler.codec.socks.SocksMessage:
    org.jboss.netty.handler.codec.socks.SocksMessage$MessageType messageType -> messageType
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion protocolVersion -> protocolVersion
    org.jboss.netty.handler.codec.socks.SocksMessage$MessageType getMessageType() -> getMessageType
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion getProtocolVersion() -> getProtocolVersion
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.SocksMessage$AddressType -> org.jboss.netty.handler.codec.socks.SocksMessage$AddressType:
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType IPv4 -> IPv4
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType DOMAIN -> DOMAIN
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType IPv6 -> IPv6
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType UNKNOWN -> UNKNOWN
    byte b -> b
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType valueOf(java.lang.String) -> valueOf
    org.jboss.netty.handler.codec.socks.SocksMessage$AddressType fromByte(byte) -> fromByte
    byte getByteValue() -> getByteValue
org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme -> org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme:
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme NO_AUTH -> NO_AUTH
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme AUTH_GSSAPI -> AUTH_GSSAPI
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme AUTH_PASSWORD -> AUTH_PASSWORD
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme UNKNOWN -> UNKNOWN
    byte b -> b
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme valueOf(java.lang.String) -> valueOf
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme fromByte(byte) -> fromByte
    byte getByteValue() -> getByteValue
org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus -> org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus:
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus SUCCESS -> SUCCESS
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus FAILURE -> FAILURE
    byte b -> b
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus valueOf(java.lang.String) -> valueOf
    org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus fromByte(byte) -> fromByte
    byte getByteValue() -> getByteValue
org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus -> org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus:
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus SUCCESS -> SUCCESS
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus FAILURE -> FAILURE
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus FORBIDDEN -> FORBIDDEN
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus NETWORK_UNREACHABLE -> NETWORK_UNREACHABLE
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus HOST_UNREACHABLE -> HOST_UNREACHABLE
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus REFUSED -> REFUSED
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus TTL_EXPIRED -> TTL_EXPIRED
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus COMMAND_NOT_SUPPORTED -> COMMAND_NOT_SUPPORTED
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus ADDRESS_NOT_SUPPORTED -> ADDRESS_NOT_SUPPORTED
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus UNASSIGNED -> UNASSIGNED
    byte b -> b
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus valueOf(java.lang.String) -> valueOf
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus fromByte(byte) -> fromByte
    byte getByteValue() -> getByteValue
org.jboss.netty.handler.codec.socks.SocksMessage$CmdType -> org.jboss.netty.handler.codec.socks.SocksMessage$CmdType:
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType CONNECT -> CONNECT
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType BIND -> BIND
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType UDP -> UDP
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType UNKNOWN -> UNKNOWN
    byte b -> b
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType valueOf(java.lang.String) -> valueOf
    org.jboss.netty.handler.codec.socks.SocksMessage$CmdType fromByte(byte) -> fromByte
    byte getByteValue() -> getByteValue
org.jboss.netty.handler.codec.socks.SocksMessage$MessageType -> org.jboss.netty.handler.codec.socks.SocksMessage$MessageType:
    org.jboss.netty.handler.codec.socks.SocksMessage$MessageType REQUEST -> REQUEST
    org.jboss.netty.handler.codec.socks.SocksMessage$MessageType RESPONSE -> RESPONSE
    org.jboss.netty.handler.codec.socks.SocksMessage$MessageType UNKNOWN -> UNKNOWN
    org.jboss.netty.handler.codec.socks.SocksMessage$MessageType[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksMessage$MessageType[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksMessage$MessageType valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion -> org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion:
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion SOCKS4a -> SOCKS4a
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion SOCKS5 -> SOCKS5
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion UNKNOWN -> UNKNOWN
    byte b -> b
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion valueOf(java.lang.String) -> valueOf
    org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion fromByte(byte) -> fromByte
    byte getByteValue() -> getByteValue
org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion -> org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion:
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion AUTH_PASSWORD -> AUTH_PASSWORD
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion UNKNOWN -> UNKNOWN
    byte b -> b
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion valueOf(java.lang.String) -> valueOf
    org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion fromByte(byte) -> fromByte
    byte getByteValue() -> getByteValue
org.jboss.netty.handler.codec.socks.SocksMessageEncoder -> org.jboss.netty.handler.codec.socks.SocksMessageEncoder:
    int DEFAULT_ENCODER_BUFFER_SIZE -> DEFAULT_ENCODER_BUFFER_SIZE
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.codec.socks.SocksRequest -> org.jboss.netty.handler.codec.socks.SocksRequest:
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType socksRequestType -> socksRequestType
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType getSocksRequestType() -> getSocksRequestType
org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType -> org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType:
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType INIT -> INIT
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType AUTH -> AUTH
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType CMD -> CMD
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType UNKNOWN -> UNKNOWN
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.SocksResponse -> org.jboss.netty.handler.codec.socks.SocksResponse:
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType socksResponseType -> socksResponseType
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType getSocksResponseType() -> getSocksResponseType
org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType -> org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType:
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType INIT -> INIT
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType AUTH -> AUTH
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType CMD -> CMD
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType UNKNOWN -> UNKNOWN
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType[] values() -> values
    org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.socks.UnknownSocksMessage -> org.jboss.netty.handler.codec.socks.UnknownSocksMessage:
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.UnknownSocksRequest -> org.jboss.netty.handler.codec.socks.UnknownSocksRequest:
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.socks.UnknownSocksResponse -> org.jboss.netty.handler.codec.socks.UnknownSocksResponse:
    void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer) -> encodeAsByteBuf
org.jboss.netty.handler.codec.spdy.DefaultSpdyDataFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdyDataFrame:
    org.jboss.netty.buffer.ChannelBuffer data -> data
    org.jboss.netty.buffer.ChannelBuffer getData() -> getData
    void setData(org.jboss.netty.buffer.ChannelBuffer) -> setData
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.spdy.DefaultSpdyGoAwayFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdyGoAwayFrame:
    int lastGoodStreamId -> lastGoodStreamId
    org.jboss.netty.handler.codec.spdy.SpdySessionStatus status -> status
    int getLastGoodStreamId() -> getLastGoodStreamId
    void setLastGoodStreamId(int) -> setLastGoodStreamId
    org.jboss.netty.handler.codec.spdy.SpdySessionStatus getStatus() -> getStatus
    void setStatus(org.jboss.netty.handler.codec.spdy.SpdySessionStatus) -> setStatus
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders -> org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:
    int BUCKET_SIZE -> BUCKET_SIZE
    org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry[] entries -> entries
    org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry head -> head
    int hash(java.lang.String) -> hash
    boolean eq(java.lang.String,java.lang.String) -> eq
    int index(int) -> index
    org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Object) -> add
    void add0(int,int,java.lang.String,java.lang.String) -> add0
    org.jboss.netty.handler.codec.spdy.SpdyHeaders remove(java.lang.String) -> remove
    void remove0(int,int,java.lang.String) -> remove0
    org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Object) -> set
    org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable) -> set
    org.jboss.netty.handler.codec.spdy.SpdyHeaders clear() -> clear
    java.lang.String get(java.lang.String) -> get
    java.util.List getAll(java.lang.String) -> getAll
    java.util.List entries() -> entries
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.String) -> contains
    java.util.Set names() -> names
    org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable) -> add
    boolean isEmpty() -> isEmpty
    java.lang.String toString(java.lang.Object) -> toString
    org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry access$100(org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders) -> access$100
org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$1 -> org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$1:
org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry -> org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry:
    int hash -> hash
    java.lang.String key -> key
    java.lang.String value -> value
    org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry next -> next
    org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry before -> before
    org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry after -> after
    void remove() -> remove
    void addBefore(org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry) -> addBefore
    java.lang.String getKey() -> getKey
    java.lang.String getValue() -> getValue
    java.lang.String setValue(java.lang.String) -> setValue
    java.lang.String toString() -> toString
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderIterator -> org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderIterator:
    org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders$HeaderEntry current -> current
    org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders this$0 -> this$0
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:
    boolean invalid -> invalid
    boolean truncated -> truncated
    org.jboss.netty.handler.codec.spdy.SpdyHeaders headers -> headers
    boolean isInvalid() -> isInvalid
    void setInvalid() -> setInvalid
    boolean isTruncated() -> isTruncated
    void setTruncated() -> setTruncated
    org.jboss.netty.handler.codec.spdy.SpdyHeaders headers() -> headers
    java.lang.String toString() -> toString
    void appendHeaders(java.lang.StringBuilder) -> appendHeaders
org.jboss.netty.handler.codec.spdy.DefaultSpdyPingFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdyPingFrame:
    int id -> id
    int getId() -> getId
    void setId(int) -> setId
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.spdy.DefaultSpdyRstStreamFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdyRstStreamFrame:
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus status -> status
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus getStatus() -> getStatus
    void setStatus(org.jboss.netty.handler.codec.spdy.SpdyStreamStatus) -> setStatus
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:
    boolean clear -> clear
    java.util.Map settingsMap -> settingsMap
    java.util.Set getIds() -> getIds
    boolean isSet(int) -> isSet
    int getValue(int) -> getValue
    void setValue(int,int) -> setValue
    void setValue(int,int,boolean,boolean) -> setValue
    void removeValue(int) -> removeValue
    boolean isPersistValue(int) -> isPersistValue
    void setPersistValue(int,boolean) -> setPersistValue
    boolean isPersisted(int) -> isPersisted
    void setPersisted(int,boolean) -> setPersisted
    boolean clearPreviouslyPersistedSettings() -> clearPreviouslyPersistedSettings
    void setClearPreviouslyPersistedSettings(boolean) -> setClearPreviouslyPersistedSettings
    java.util.Set getSettings() -> getSettings
    void appendSettings(java.lang.StringBuilder) -> appendSettings
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame$Setting -> org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame$Setting:
    int value -> value
    boolean persist -> persist
    boolean persisted -> persisted
    int getValue() -> getValue
    void setValue(int) -> setValue
    boolean isPersist() -> isPersist
    void setPersist(boolean) -> setPersist
    boolean isPersisted() -> isPersisted
    void setPersisted(boolean) -> setPersisted
org.jboss.netty.handler.codec.spdy.DefaultSpdyStreamFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdyStreamFrame:
    int streamId -> streamId
    boolean last -> last
    int getStreamId() -> getStreamId
    void setStreamId(int) -> setStreamId
    boolean isLast() -> isLast
    void setLast(boolean) -> setLast
org.jboss.netty.handler.codec.spdy.DefaultSpdySynReplyFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdySynReplyFrame:
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.spdy.DefaultSpdySynStreamFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdySynStreamFrame:
    int associatedToStreamId -> associatedToStreamId
    byte priority -> priority
    boolean unidirectional -> unidirectional
    int getAssociatedToStreamId() -> getAssociatedToStreamId
    void setAssociatedToStreamId(int) -> setAssociatedToStreamId
    byte getPriority() -> getPriority
    void setPriority(byte) -> setPriority
    boolean isUnidirectional() -> isUnidirectional
    void setUnidirectional(boolean) -> setUnidirectional
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.spdy.DefaultSpdyWindowUpdateFrame -> org.jboss.netty.handler.codec.spdy.DefaultSpdyWindowUpdateFrame:
    int streamId -> streamId
    int deltaWindowSize -> deltaWindowSize
    int getStreamId() -> getStreamId
    void setStreamId(int) -> setStreamId
    int getDeltaWindowSize() -> getDeltaWindowSize
    void setDeltaWindowSize(int) -> setDeltaWindowSize
    java.lang.String toString() -> toString
org.jboss.netty.handler.codec.spdy.SpdyCodecUtil -> org.jboss.netty.handler.codec.spdy.SpdyCodecUtil:
    int SPDY_SESSION_STREAM_ID -> SPDY_SESSION_STREAM_ID
    int SPDY_HEADER_TYPE_OFFSET -> SPDY_HEADER_TYPE_OFFSET
    int SPDY_HEADER_FLAGS_OFFSET -> SPDY_HEADER_FLAGS_OFFSET
    int SPDY_HEADER_LENGTH_OFFSET -> SPDY_HEADER_LENGTH_OFFSET
    int SPDY_HEADER_SIZE -> SPDY_HEADER_SIZE
    int SPDY_MAX_LENGTH -> SPDY_MAX_LENGTH
    byte SPDY_DATA_FLAG_FIN -> SPDY_DATA_FLAG_FIN
    int SPDY_DATA_FRAME -> SPDY_DATA_FRAME
    int SPDY_SYN_STREAM_FRAME -> SPDY_SYN_STREAM_FRAME
    int SPDY_SYN_REPLY_FRAME -> SPDY_SYN_REPLY_FRAME
    int SPDY_RST_STREAM_FRAME -> SPDY_RST_STREAM_FRAME
    int SPDY_SETTINGS_FRAME -> SPDY_SETTINGS_FRAME
    int SPDY_PUSH_PROMISE_FRAME -> SPDY_PUSH_PROMISE_FRAME
    int SPDY_PING_FRAME -> SPDY_PING_FRAME
    int SPDY_GOAWAY_FRAME -> SPDY_GOAWAY_FRAME
    int SPDY_HEADERS_FRAME -> SPDY_HEADERS_FRAME
    int SPDY_WINDOW_UPDATE_FRAME -> SPDY_WINDOW_UPDATE_FRAME
    byte SPDY_FLAG_FIN -> SPDY_FLAG_FIN
    byte SPDY_FLAG_UNIDIRECTIONAL -> SPDY_FLAG_UNIDIRECTIONAL
    byte SPDY_SETTINGS_CLEAR -> SPDY_SETTINGS_CLEAR
    byte SPDY_SETTINGS_PERSIST_VALUE -> SPDY_SETTINGS_PERSIST_VALUE
    byte SPDY_SETTINGS_PERSISTED -> SPDY_SETTINGS_PERSISTED
    int SPDY_SETTINGS_MAX_ID -> SPDY_SETTINGS_MAX_ID
    int SPDY_MAX_NV_LENGTH -> SPDY_MAX_NV_LENGTH
    byte[] SPDY_DICT -> SPDY_DICT
    int getUnsignedShort(org.jboss.netty.buffer.ChannelBuffer,int) -> getUnsignedShort
    int getUnsignedMedium(org.jboss.netty.buffer.ChannelBuffer,int) -> getUnsignedMedium
    int getUnsignedInt(org.jboss.netty.buffer.ChannelBuffer,int) -> getUnsignedInt
    int getSignedInt(org.jboss.netty.buffer.ChannelBuffer,int) -> getSignedInt
    boolean isServerId(int) -> isServerId
    void validateHeaderName(java.lang.String) -> validateHeaderName
    void validateHeaderValue(java.lang.String) -> validateHeaderValue
org.jboss.netty.handler.codec.spdy.SpdyDataFrame -> org.jboss.netty.handler.codec.spdy.SpdyDataFrame:
    org.jboss.netty.buffer.ChannelBuffer getData() -> getData
    void setData(org.jboss.netty.buffer.ChannelBuffer) -> setData
org.jboss.netty.handler.codec.spdy.SpdyFrame -> org.jboss.netty.handler.codec.spdy.SpdyFrame:
org.jboss.netty.handler.codec.spdy.SpdyFrameCodec -> org.jboss.netty.handler.codec.spdy.SpdyFrameCodec:
    org.jboss.netty.handler.codec.spdy.SpdyProtocolException INVALID_FRAME -> INVALID_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder spdyFrameDecoder -> spdyFrameDecoder
    org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder spdyFrameEncoder -> spdyFrameEncoder
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockDecoder spdyHeaderBlockDecoder -> spdyHeaderBlockDecoder
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockEncoder spdyHeaderBlockEncoder -> spdyHeaderBlockEncoder
    org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame spdyHeadersFrame -> spdyHeadersFrame
    org.jboss.netty.handler.codec.spdy.SpdySettingsFrame spdySettingsFrame -> spdySettingsFrame
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> cleanup
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    void readDataFrame(int,boolean,org.jboss.netty.buffer.ChannelBuffer) -> readDataFrame
    void readSynStreamFrame(int,int,byte,boolean,boolean) -> readSynStreamFrame
    void readSynReplyFrame(int,boolean) -> readSynReplyFrame
    void readRstStreamFrame(int,int) -> readRstStreamFrame
    void readSettingsFrame(boolean) -> readSettingsFrame
    void readSetting(int,int,boolean,boolean) -> readSetting
    void readSettingsEnd() -> readSettingsEnd
    void readPingFrame(int) -> readPingFrame
    void readGoAwayFrame(int,int) -> readGoAwayFrame
    void readHeadersFrame(int,boolean) -> readHeadersFrame
    void readWindowUpdateFrame(int,int) -> readWindowUpdateFrame
    void readHeaderBlock(org.jboss.netty.buffer.ChannelBuffer) -> readHeaderBlock
    void readHeaderBlockEnd() -> readHeaderBlockEnd
    void readFrameError(java.lang.String) -> readFrameError
org.jboss.netty.handler.codec.spdy.SpdyFrameCodec$1 -> org.jboss.netty.handler.codec.spdy.SpdyFrameCodec$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder -> org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:
    int spdyVersion -> spdyVersion
    int maxChunkSize -> maxChunkSize
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoderDelegate delegate -> delegate
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State state -> state
    byte flags -> flags
    int length -> length
    int streamId -> streamId
    int numSettings -> numSettings
    void decode(org.jboss.netty.buffer.ChannelBuffer) -> decode
    boolean hasFlag(byte,byte) -> hasFlag
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State getNextState(int,int) -> getNextState
    boolean isValidFrameHeader(int,int,byte,int) -> isValidFrameHeader
org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$1 -> org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$spdy$SpdyFrameDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$spdy$SpdyFrameDecoder$State
org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State -> org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State:
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_COMMON_HEADER -> READ_COMMON_HEADER
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_DATA_FRAME -> READ_DATA_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_SYN_STREAM_FRAME -> READ_SYN_STREAM_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_SYN_REPLY_FRAME -> READ_SYN_REPLY_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_RST_STREAM_FRAME -> READ_RST_STREAM_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_SETTINGS_FRAME -> READ_SETTINGS_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_SETTING -> READ_SETTING
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_PING_FRAME -> READ_PING_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_GOAWAY_FRAME -> READ_GOAWAY_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_HEADERS_FRAME -> READ_HEADERS_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_WINDOW_UPDATE_FRAME -> READ_WINDOW_UPDATE_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State READ_HEADER_BLOCK -> READ_HEADER_BLOCK
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State DISCARD_FRAME -> DISCARD_FRAME
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State FRAME_ERROR -> FRAME_ERROR
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.spdy.SpdyFrameDecoderDelegate -> org.jboss.netty.handler.codec.spdy.SpdyFrameDecoderDelegate:
    void readDataFrame(int,boolean,org.jboss.netty.buffer.ChannelBuffer) -> readDataFrame
    void readSynStreamFrame(int,int,byte,boolean,boolean) -> readSynStreamFrame
    void readSynReplyFrame(int,boolean) -> readSynReplyFrame
    void readRstStreamFrame(int,int) -> readRstStreamFrame
    void readSettingsFrame(boolean) -> readSettingsFrame
    void readSetting(int,int,boolean,boolean) -> readSetting
    void readSettingsEnd() -> readSettingsEnd
    void readPingFrame(int) -> readPingFrame
    void readGoAwayFrame(int,int) -> readGoAwayFrame
    void readHeadersFrame(int,boolean) -> readHeadersFrame
    void readWindowUpdateFrame(int,int) -> readWindowUpdateFrame
    void readHeaderBlock(org.jboss.netty.buffer.ChannelBuffer) -> readHeaderBlock
    void readHeaderBlockEnd() -> readHeaderBlockEnd
    void readFrameError(java.lang.String) -> readFrameError
org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder -> org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:
    int version -> version
    void writeControlFrameHeader(org.jboss.netty.buffer.ChannelBuffer,int,byte,int) -> writeControlFrameHeader
    org.jboss.netty.buffer.ChannelBuffer encodeDataFrame(int,boolean,org.jboss.netty.buffer.ChannelBuffer) -> encodeDataFrame
    org.jboss.netty.buffer.ChannelBuffer encodeSynStreamFrame(int,int,byte,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer) -> encodeSynStreamFrame
    org.jboss.netty.buffer.ChannelBuffer encodeSynReplyFrame(int,boolean,org.jboss.netty.buffer.ChannelBuffer) -> encodeSynReplyFrame
    org.jboss.netty.buffer.ChannelBuffer encodeRstStreamFrame(int,int) -> encodeRstStreamFrame
    org.jboss.netty.buffer.ChannelBuffer encodeSettingsFrame(org.jboss.netty.handler.codec.spdy.SpdySettingsFrame) -> encodeSettingsFrame
    org.jboss.netty.buffer.ChannelBuffer encodePingFrame(int) -> encodePingFrame
    org.jboss.netty.buffer.ChannelBuffer encodeGoAwayFrame(int,int) -> encodeGoAwayFrame
    org.jboss.netty.buffer.ChannelBuffer encodeHeadersFrame(int,boolean,org.jboss.netty.buffer.ChannelBuffer) -> encodeHeadersFrame
    org.jboss.netty.buffer.ChannelBuffer encodeWindowUpdateFrame(int,int) -> encodeWindowUpdateFrame
org.jboss.netty.handler.codec.spdy.SpdyGoAwayFrame -> org.jboss.netty.handler.codec.spdy.SpdyGoAwayFrame:
    int getLastGoodStreamId() -> getLastGoodStreamId
    void setLastGoodStreamId(int) -> setLastGoodStreamId
    org.jboss.netty.handler.codec.spdy.SpdySessionStatus getStatus() -> getStatus
    void setStatus(org.jboss.netty.handler.codec.spdy.SpdySessionStatus) -> setStatus
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockDecoder -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockDecoder:
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockDecoder newInstance(org.jboss.netty.handler.codec.spdy.SpdyVersion,int) -> newInstance
    void decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> decode
    void endHeaderBlock(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> endHeaderBlock
    void end() -> end
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockEncoder -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockEncoder:
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockEncoder newInstance(org.jboss.netty.handler.codec.spdy.SpdyVersion,int,int,int) -> newInstance
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> encode
    void end() -> end
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:
    org.jboss.netty.util.internal.jzlib.ZStream z -> z
    boolean finished -> finished
    void setInput(org.jboss.netty.buffer.ChannelBuffer) -> setInput
    void encode(org.jboss.netty.buffer.ChannelBuffer) -> encode
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> encode
    void end() -> end
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:
    int LENGTH_FIELD_SIZE -> LENGTH_FIELD_SIZE
    int maxHeaderSize -> maxHeaderSize
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State state -> state
    org.jboss.netty.buffer.ChannelBuffer cumulation -> cumulation
    int headerSize -> headerSize
    int numHeaders -> numHeaders
    int length -> length
    java.lang.String name -> name
    int readLengthField(org.jboss.netty.buffer.ChannelBuffer) -> readLengthField
    void decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> decode
    void decodeHeaderBlock(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> decodeHeaderBlock
    void endHeaderBlock(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> endHeaderBlock
    void end() -> end
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$1 -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$spdy$SpdyHeaderBlockRawDecoder$State -> $SwitchMap$org$jboss$netty$handler$codec$spdy$SpdyHeaderBlockRawDecoder$State
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State:
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State READ_NUM_HEADERS -> READ_NUM_HEADERS
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State READ_NAME_LENGTH -> READ_NAME_LENGTH
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State READ_NAME -> READ_NAME
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State SKIP_NAME -> SKIP_NAME
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State READ_VALUE_LENGTH -> READ_VALUE_LENGTH
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State READ_VALUE -> READ_VALUE
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State SKIP_VALUE -> SKIP_VALUE
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State END_HEADER_BLOCK -> END_HEADER_BLOCK
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State ERROR -> ERROR
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State[] values() -> values
    org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:
    int version -> version
    void setLengthField(org.jboss.netty.buffer.ChannelBuffer,int,int) -> setLengthField
    void writeLengthField(org.jboss.netty.buffer.ChannelBuffer,int) -> writeLengthField
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> encode
    void end() -> end
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:
    int DEFAULT_BUFFER_CAPACITY -> DEFAULT_BUFFER_CAPACITY
    org.jboss.netty.handler.codec.spdy.SpdyProtocolException INVALID_HEADER_BLOCK -> INVALID_HEADER_BLOCK
    java.util.zip.Inflater decompressor -> decompressor
    org.jboss.netty.buffer.ChannelBuffer decompressed -> decompressed
    void decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> decode
    int setInput(org.jboss.netty.buffer.ChannelBuffer) -> setInput
    int decompress(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> decompress
    void ensureBuffer() -> ensureBuffer
    void endHeaderBlock(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> endHeaderBlock
    void end() -> end
org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder -> org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:
    java.util.zip.Deflater compressor -> compressor
    boolean finished -> finished
    int setInput(org.jboss.netty.buffer.ChannelBuffer) -> setInput
    void encode(org.jboss.netty.buffer.ChannelBuffer) -> encode
    boolean compressInto(org.jboss.netty.buffer.ChannelBuffer) -> compressInto
    org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> encode
    void end() -> end
org.jboss.netty.handler.codec.spdy.SpdyHeaders -> org.jboss.netty.handler.codec.spdy.SpdyHeaders:
    org.jboss.netty.handler.codec.spdy.SpdyHeaders EMPTY_HEADERS -> EMPTY_HEADERS
    java.lang.String getHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String) -> getHeader
    java.lang.String getHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.String) -> getHeader
    void setHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object) -> setHeader
    void setHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Iterable) -> setHeader
    void addHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object) -> addHeader
    void removeHost(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> removeHost
    java.lang.String getHost(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> getHost
    void setHost(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String) -> setHost
    void removeMethod(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> removeMethod
    org.jboss.netty.handler.codec.http.HttpMethod getMethod(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> getMethod
    void setMethod(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpMethod) -> setMethod
    void removeScheme(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> removeScheme
    java.lang.String getScheme(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> getScheme
    void setScheme(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String) -> setScheme
    void removeStatus(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> removeStatus
    org.jboss.netty.handler.codec.http.HttpResponseStatus getStatus(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> getStatus
    void setStatus(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpResponseStatus) -> setStatus
    void removeUrl(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> removeUrl
    java.lang.String getUrl(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> getUrl
    void setUrl(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String) -> setUrl
    void removeVersion(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> removeVersion
    org.jboss.netty.handler.codec.http.HttpVersion getVersion(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> getVersion
    void setVersion(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpVersion) -> setVersion
    java.util.Iterator iterator() -> iterator
    java.lang.String get(java.lang.String) -> get
    java.util.List getAll(java.lang.String) -> getAll
    java.util.List entries() -> entries
    boolean contains(java.lang.String) -> contains
    java.util.Set names() -> names
    org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Object) -> add
    org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable) -> add
    org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Object) -> set
    org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable) -> set
    org.jboss.netty.handler.codec.spdy.SpdyHeaders remove(java.lang.String) -> remove
    org.jboss.netty.handler.codec.spdy.SpdyHeaders clear() -> clear
    boolean isEmpty() -> isEmpty
org.jboss.netty.handler.codec.spdy.SpdyHeaders$1 -> org.jboss.netty.handler.codec.spdy.SpdyHeaders$1:
    java.util.List getAll(java.lang.String) -> getAll
    java.util.List entries() -> entries
    boolean contains(java.lang.String) -> contains
    boolean isEmpty() -> isEmpty
    java.util.Set names() -> names
    org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Object) -> add
    org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable) -> add
    org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Object) -> set
    org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable) -> set
    org.jboss.netty.handler.codec.spdy.SpdyHeaders remove(java.lang.String) -> remove
    org.jboss.netty.handler.codec.spdy.SpdyHeaders clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.String get(java.lang.String) -> get
org.jboss.netty.handler.codec.spdy.SpdyHeaders$HttpNames -> org.jboss.netty.handler.codec.spdy.SpdyHeaders$HttpNames:
    java.lang.String HOST -> HOST
    java.lang.String METHOD -> METHOD
    java.lang.String PATH -> PATH
    java.lang.String SCHEME -> SCHEME
    java.lang.String STATUS -> STATUS
    java.lang.String VERSION -> VERSION
org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame -> org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame:
    boolean isInvalid() -> isInvalid
    void setInvalid() -> setInvalid
    boolean isTruncated() -> isTruncated
    void setTruncated() -> setTruncated
    org.jboss.netty.handler.codec.spdy.SpdyHeaders headers() -> headers
org.jboss.netty.handler.codec.spdy.SpdyHttpCodec -> org.jboss.netty.handler.codec.spdy.SpdyHttpCodec:
    org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder decoder -> decoder
    org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder encoder -> encoder
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder -> org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:
    int spdyVersion -> spdyVersion
    int maxContentLength -> maxContentLength
    java.util.Map messageMap -> messageMap
    org.jboss.netty.handler.codec.http.HttpMessage putMessage(int,org.jboss.netty.handler.codec.http.HttpMessage) -> putMessage
    org.jboss.netty.handler.codec.http.HttpMessage getMessage(int) -> getMessage
    org.jboss.netty.handler.codec.http.HttpMessage removeMessage(int) -> removeMessage
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> decode
    org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> createHttpRequest
    org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame) -> createHttpResponse
org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder -> org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:
    int spdyVersion -> spdyVersion
    int currentStreamId -> currentStreamId
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress) -> writeChunk
    org.jboss.netty.channel.ChannelFuture getMessageFuture(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,int,org.jboss.netty.handler.codec.http.HttpMessage) -> getMessageFuture
    org.jboss.netty.channel.ChannelFuture getDataFuture(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.handler.codec.spdy.SpdyDataFrame[],java.net.SocketAddress) -> getDataFuture
    org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage) -> createSynStreamFrame
    org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse) -> createSynReplyFrame
    org.jboss.netty.handler.codec.spdy.SpdyDataFrame[] createSpdyDataFrames(int,org.jboss.netty.buffer.ChannelBuffer) -> createSpdyDataFrames
org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder$SpdyFrameWriter -> org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder$SpdyFrameWriter:
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.channel.MessageEvent e -> e
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders -> org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:
    void removeStreamId(org.jboss.netty.handler.codec.http.HttpMessage) -> removeStreamId
    int getStreamId(org.jboss.netty.handler.codec.http.HttpMessage) -> getStreamId
    void setStreamId(org.jboss.netty.handler.codec.http.HttpMessage,int) -> setStreamId
    void removeAssociatedToStreamId(org.jboss.netty.handler.codec.http.HttpMessage) -> removeAssociatedToStreamId
    int getAssociatedToStreamId(org.jboss.netty.handler.codec.http.HttpMessage) -> getAssociatedToStreamId
    void setAssociatedToStreamId(org.jboss.netty.handler.codec.http.HttpMessage,int) -> setAssociatedToStreamId
    void removePriority(org.jboss.netty.handler.codec.http.HttpMessage) -> removePriority
    byte getPriority(org.jboss.netty.handler.codec.http.HttpMessage) -> getPriority
    void setPriority(org.jboss.netty.handler.codec.http.HttpMessage,byte) -> setPriority
    void removeUrl(org.jboss.netty.handler.codec.http.HttpMessage) -> removeUrl
    java.lang.String getUrl(org.jboss.netty.handler.codec.http.HttpMessage) -> getUrl
    void setUrl(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> setUrl
    void removeScheme(org.jboss.netty.handler.codec.http.HttpMessage) -> removeScheme
    java.lang.String getScheme(org.jboss.netty.handler.codec.http.HttpMessage) -> getScheme
    void setScheme(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String) -> setScheme
org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders$Names -> org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders$Names:
    java.lang.String STREAM_ID -> STREAM_ID
    java.lang.String ASSOCIATED_TO_STREAM_ID -> ASSOCIATED_TO_STREAM_ID
    java.lang.String PRIORITY -> PRIORITY
    java.lang.String URL -> URL
    java.lang.String SCHEME -> SCHEME
org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler -> org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:
    java.lang.Integer NO_ID -> NO_ID
    java.util.Queue ids -> ids
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> writeRequested
org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser -> org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:
    int maxSpdyContentLength -> maxSpdyContentLength
    int maxHttpContentLength -> maxHttpContentLength
    org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol getProtocol(javax.net.ssl.SSLEngine) -> getProtocol
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void addSpdyHandlers(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.spdy.SpdyVersion) -> addSpdyHandlers
    void addHttpHandlers(org.jboss.netty.channel.ChannelHandlerContext) -> addHttpHandlers
    org.jboss.netty.channel.ChannelUpstreamHandler createHttpRequestHandlerForHttp() -> createHttpRequestHandlerForHttp
    org.jboss.netty.channel.ChannelUpstreamHandler createHttpRequestHandlerForSpdy() -> createHttpRequestHandlerForSpdy
org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$1 -> org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$1:
    int[] $SwitchMap$org$jboss$netty$handler$codec$spdy$SpdyOrHttpChooser$SelectedProtocol -> $SwitchMap$org$jboss$netty$handler$codec$spdy$SpdyOrHttpChooser$SelectedProtocol
org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol -> org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:
    org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol SpdyVersion3_1 -> SpdyVersion3_1
    org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol HttpVersion1_1 -> HttpVersion1_1
    org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol HttpVersion1_0 -> HttpVersion1_0
    org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol None -> None
    org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] values() -> values
    org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.codec.spdy.SpdyPingFrame -> org.jboss.netty.handler.codec.spdy.SpdyPingFrame:
    int getId() -> getId
    void setId(int) -> setId
org.jboss.netty.handler.codec.spdy.SpdyProtocolException -> org.jboss.netty.handler.codec.spdy.SpdyProtocolException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.codec.spdy.SpdyRstStreamFrame -> org.jboss.netty.handler.codec.spdy.SpdyRstStreamFrame:
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus getStatus() -> getStatus
    void setStatus(org.jboss.netty.handler.codec.spdy.SpdyStreamStatus) -> setStatus
org.jboss.netty.handler.codec.spdy.SpdySession -> org.jboss.netty.handler.codec.spdy.SpdySession:
    org.jboss.netty.handler.codec.spdy.SpdyProtocolException STREAM_CLOSED -> STREAM_CLOSED
    java.util.concurrent.atomic.AtomicInteger activeLocalStreams -> activeLocalStreams
    java.util.concurrent.atomic.AtomicInteger activeRemoteStreams -> activeRemoteStreams
    java.util.Map activeStreams -> activeStreams
    org.jboss.netty.handler.codec.spdy.SpdySession$StreamComparator streamComparator -> streamComparator
    java.util.concurrent.atomic.AtomicInteger sendWindowSize -> sendWindowSize
    java.util.concurrent.atomic.AtomicInteger receiveWindowSize -> receiveWindowSize
    int numActiveStreams(boolean) -> numActiveStreams
    boolean noActiveStreams() -> noActiveStreams
    boolean isActiveStream(int) -> isActiveStream
    java.util.Map activeStreams() -> activeStreams
    void acceptStream(int,byte,boolean,boolean,int,int,boolean) -> acceptStream
    org.jboss.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean) -> removeActiveStream
    void removeStream(int,boolean) -> removeStream
    boolean isRemoteSideClosed(int) -> isRemoteSideClosed
    void closeRemoteSide(int,boolean) -> closeRemoteSide
    boolean isLocalSideClosed(int) -> isLocalSideClosed
    void closeLocalSide(int,boolean) -> closeLocalSide
    boolean hasReceivedReply(int) -> hasReceivedReply
    void receivedReply(int) -> receivedReply
    int getSendWindowSize(int) -> getSendWindowSize
    int updateSendWindowSize(int,int) -> updateSendWindowSize
    int updateReceiveWindowSize(int,int) -> updateReceiveWindowSize
    int getReceiveWindowSizeLowerBound(int) -> getReceiveWindowSizeLowerBound
    void updateAllSendWindowSizes(int) -> updateAllSendWindowSizes
    void updateAllReceiveWindowSizes(int) -> updateAllReceiveWindowSizes
    boolean putPendingWrite(int,org.jboss.netty.channel.MessageEvent) -> putPendingWrite
    org.jboss.netty.channel.MessageEvent getPendingWrite(int) -> getPendingWrite
    org.jboss.netty.channel.MessageEvent removePendingWrite(int) -> removePendingWrite
    java.util.Map access$000(org.jboss.netty.handler.codec.spdy.SpdySession) -> access$000
org.jboss.netty.handler.codec.spdy.SpdySession$StreamComparator -> org.jboss.netty.handler.codec.spdy.SpdySession$StreamComparator:
    long serialVersionUID -> serialVersionUID
    org.jboss.netty.handler.codec.spdy.SpdySession this$0 -> this$0
    int compare(java.lang.Integer,java.lang.Integer) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jboss.netty.handler.codec.spdy.SpdySession$StreamState -> org.jboss.netty.handler.codec.spdy.SpdySession$StreamState:
    byte priority -> priority
    boolean remoteSideClosed -> remoteSideClosed
    boolean localSideClosed -> localSideClosed
    boolean receivedReply -> receivedReply
    java.util.concurrent.atomic.AtomicInteger sendWindowSize -> sendWindowSize
    java.util.concurrent.atomic.AtomicInteger receiveWindowSize -> receiveWindowSize
    int receiveWindowSizeLowerBound -> receiveWindowSizeLowerBound
    java.util.concurrent.ConcurrentLinkedQueue pendingWriteQueue -> pendingWriteQueue
    byte getPriority() -> getPriority
    boolean isRemoteSideClosed() -> isRemoteSideClosed
    void closeRemoteSide() -> closeRemoteSide
    boolean isLocalSideClosed() -> isLocalSideClosed
    void closeLocalSide() -> closeLocalSide
    boolean hasReceivedReply() -> hasReceivedReply
    void receivedReply() -> receivedReply
    int getSendWindowSize() -> getSendWindowSize
    int updateSendWindowSize(int) -> updateSendWindowSize
    int updateReceiveWindowSize(int) -> updateReceiveWindowSize
    int getReceiveWindowSizeLowerBound() -> getReceiveWindowSizeLowerBound
    void setReceiveWindowSizeLowerBound(int) -> setReceiveWindowSizeLowerBound
    boolean putPendingWrite(org.jboss.netty.channel.MessageEvent) -> putPendingWrite
    org.jboss.netty.channel.MessageEvent getPendingWrite() -> getPendingWrite
    org.jboss.netty.channel.MessageEvent removePendingWrite() -> removePendingWrite
org.jboss.netty.handler.codec.spdy.SpdySessionHandler -> org.jboss.netty.handler.codec.spdy.SpdySessionHandler:
    org.jboss.netty.handler.codec.spdy.SpdyProtocolException PROTOCOL_EXCEPTION -> PROTOCOL_EXCEPTION
    int DEFAULT_WINDOW_SIZE -> DEFAULT_WINDOW_SIZE
    int initialSendWindowSize -> initialSendWindowSize
    int initialReceiveWindowSize -> initialReceiveWindowSize
    int initialSessionReceiveWindowSize -> initialSessionReceiveWindowSize
    org.jboss.netty.handler.codec.spdy.SpdySession spdySession -> spdySession
    int lastGoodStreamId -> lastGoodStreamId
    int DEFAULT_MAX_CONCURRENT_STREAMS -> DEFAULT_MAX_CONCURRENT_STREAMS
    int remoteConcurrentStreams -> remoteConcurrentStreams
    int localConcurrentStreams -> localConcurrentStreams
    java.lang.Object flowControlLock -> flowControlLock
    java.util.concurrent.atomic.AtomicInteger pings -> pings
    boolean sentGoAwayFrame -> sentGoAwayFrame
    boolean receivedGoAwayFrame -> receivedGoAwayFrame
    org.jboss.netty.channel.ChannelFutureListener closeSessionFutureListener -> closeSessionFutureListener
    boolean server -> server
    int minorVersion -> minorVersion
    void setSessionReceiveWindowSize(int) -> setSessionReceiveWindowSize
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    void issueSessionError(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus) -> issueSessionError
    void issueStreamError(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,int,org.jboss.netty.handler.codec.spdy.SpdyStreamStatus) -> issueStreamError
    boolean isRemoteInitiatedId(int) -> isRemoteInitiatedId
    void updateInitialSendWindowSize(int) -> updateInitialSendWindowSize
    void updateInitialReceiveWindowSize(int) -> updateInitialReceiveWindowSize
    boolean acceptStream(int,byte,boolean,boolean) -> acceptStream
    void halfCloseStream(int,boolean,org.jboss.netty.channel.ChannelFuture) -> halfCloseStream
    void removeStream(int,org.jboss.netty.channel.ChannelFuture) -> removeStream
    void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int) -> updateSendWindowSize
    void sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> sendGoAwayFrame
    org.jboss.netty.channel.ChannelFuture sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus) -> sendGoAwayFrame
    void access$000(org.jboss.netty.handler.codec.spdy.SpdySessionHandler,org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus) -> access$000
org.jboss.netty.handler.codec.spdy.SpdySessionHandler$1 -> org.jboss.netty.handler.codec.spdy.SpdySessionHandler$1:
    org.jboss.netty.channel.ChannelHandlerContext val$context -> val$context
    java.net.SocketAddress val$remoteAddress -> val$remoteAddress
    org.jboss.netty.handler.codec.spdy.SpdySessionHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.spdy.SpdySessionHandler$2 -> org.jboss.netty.handler.codec.spdy.SpdySessionHandler$2:
    org.jboss.netty.channel.ChannelHandlerContext val$context -> val$context
    java.net.SocketAddress val$remoteAddress -> val$remoteAddress
    org.jboss.netty.handler.codec.spdy.SpdySessionHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.spdy.SpdySessionHandler$3 -> org.jboss.netty.handler.codec.spdy.SpdySessionHandler$3:
    org.jboss.netty.channel.ChannelHandlerContext val$context -> val$context
    java.net.SocketAddress val$remoteAddress -> val$remoteAddress
    org.jboss.netty.handler.codec.spdy.SpdySessionHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.spdy.SpdySessionHandler$4 -> org.jboss.netty.handler.codec.spdy.SpdySessionHandler$4:
    org.jboss.netty.channel.ChannelHandlerContext val$context -> val$context
    java.net.SocketAddress val$remoteAddress -> val$remoteAddress
    org.jboss.netty.handler.codec.spdy.SpdySessionHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.spdy.SpdySessionHandler$5 -> org.jboss.netty.handler.codec.spdy.SpdySessionHandler$5:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener -> org.jboss.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener:
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.channel.ChannelStateEvent e -> e
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.codec.spdy.SpdySessionStatus -> org.jboss.netty.handler.codec.spdy.SpdySessionStatus:
    org.jboss.netty.handler.codec.spdy.SpdySessionStatus OK -> OK
    org.jboss.netty.handler.codec.spdy.SpdySessionStatus PROTOCOL_ERROR -> PROTOCOL_ERROR
    org.jboss.netty.handler.codec.spdy.SpdySessionStatus INTERNAL_ERROR -> INTERNAL_ERROR
    int code -> code
    java.lang.String statusPhrase -> statusPhrase
    org.jboss.netty.handler.codec.spdy.SpdySessionStatus valueOf(int) -> valueOf
    int getCode() -> getCode
    java.lang.String getStatusPhrase() -> getStatusPhrase
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(org.jboss.netty.handler.codec.spdy.SpdySessionStatus) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.spdy.SpdySettingsFrame -> org.jboss.netty.handler.codec.spdy.SpdySettingsFrame:
    int SETTINGS_MINOR_VERSION -> SETTINGS_MINOR_VERSION
    int SETTINGS_UPLOAD_BANDWIDTH -> SETTINGS_UPLOAD_BANDWIDTH
    int SETTINGS_DOWNLOAD_BANDWIDTH -> SETTINGS_DOWNLOAD_BANDWIDTH
    int SETTINGS_ROUND_TRIP_TIME -> SETTINGS_ROUND_TRIP_TIME
    int SETTINGS_MAX_CONCURRENT_STREAMS -> SETTINGS_MAX_CONCURRENT_STREAMS
    int SETTINGS_CURRENT_CWND -> SETTINGS_CURRENT_CWND
    int SETTINGS_DOWNLOAD_RETRANS_RATE -> SETTINGS_DOWNLOAD_RETRANS_RATE
    int SETTINGS_INITIAL_WINDOW_SIZE -> SETTINGS_INITIAL_WINDOW_SIZE
    int SETTINGS_CLIENT_CERTIFICATE_VECTOR_SIZE -> SETTINGS_CLIENT_CERTIFICATE_VECTOR_SIZE
    java.util.Set getIds() -> getIds
    boolean isSet(int) -> isSet
    int getValue(int) -> getValue
    void setValue(int,int) -> setValue
    void setValue(int,int,boolean,boolean) -> setValue
    void removeValue(int) -> removeValue
    boolean isPersistValue(int) -> isPersistValue
    void setPersistValue(int,boolean) -> setPersistValue
    boolean isPersisted(int) -> isPersisted
    void setPersisted(int,boolean) -> setPersisted
    boolean clearPreviouslyPersistedSettings() -> clearPreviouslyPersistedSettings
    void setClearPreviouslyPersistedSettings(boolean) -> setClearPreviouslyPersistedSettings
org.jboss.netty.handler.codec.spdy.SpdyStreamFrame -> org.jboss.netty.handler.codec.spdy.SpdyStreamFrame:
    int getStreamId() -> getStreamId
    void setStreamId(int) -> setStreamId
    boolean isLast() -> isLast
    void setLast(boolean) -> setLast
org.jboss.netty.handler.codec.spdy.SpdyStreamStatus -> org.jboss.netty.handler.codec.spdy.SpdyStreamStatus:
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus PROTOCOL_ERROR -> PROTOCOL_ERROR
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus INVALID_STREAM -> INVALID_STREAM
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus REFUSED_STREAM -> REFUSED_STREAM
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus UNSUPPORTED_VERSION -> UNSUPPORTED_VERSION
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus CANCEL -> CANCEL
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus INTERNAL_ERROR -> INTERNAL_ERROR
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus FLOW_CONTROL_ERROR -> FLOW_CONTROL_ERROR
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus STREAM_IN_USE -> STREAM_IN_USE
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus STREAM_ALREADY_CLOSED -> STREAM_ALREADY_CLOSED
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus INVALID_CREDENTIALS -> INVALID_CREDENTIALS
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus FRAME_TOO_LARGE -> FRAME_TOO_LARGE
    int code -> code
    java.lang.String statusPhrase -> statusPhrase
    org.jboss.netty.handler.codec.spdy.SpdyStreamStatus valueOf(int) -> valueOf
    int getCode() -> getCode
    java.lang.String getStatusPhrase() -> getStatusPhrase
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(org.jboss.netty.handler.codec.spdy.SpdyStreamStatus) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame -> org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame:
org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame -> org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame:
    int getAssociatedToStreamId() -> getAssociatedToStreamId
    void setAssociatedToStreamId(int) -> setAssociatedToStreamId
    byte getPriority() -> getPriority
    void setPriority(byte) -> setPriority
    boolean isUnidirectional() -> isUnidirectional
    void setUnidirectional(boolean) -> setUnidirectional
org.jboss.netty.handler.codec.spdy.SpdyVersion -> org.jboss.netty.handler.codec.spdy.SpdyVersion:
    org.jboss.netty.handler.codec.spdy.SpdyVersion SPDY_3_1 -> SPDY_3_1
    int version -> version
    int minorVersion -> minorVersion
    org.jboss.netty.handler.codec.spdy.SpdyVersion[] $VALUES -> $VALUES
    org.jboss.netty.handler.codec.spdy.SpdyVersion[] values() -> values
    org.jboss.netty.handler.codec.spdy.SpdyVersion valueOf(java.lang.String) -> valueOf
    int getVersion() -> getVersion
    int getMinorVersion() -> getMinorVersion
org.jboss.netty.handler.codec.spdy.SpdyWindowUpdateFrame -> org.jboss.netty.handler.codec.spdy.SpdyWindowUpdateFrame:
    int getStreamId() -> getStreamId
    void setStreamId(int) -> setStreamId
    int getDeltaWindowSize() -> getDeltaWindowSize
    void setDeltaWindowSize(int) -> setDeltaWindowSize
org.jboss.netty.handler.codec.string.StringDecoder -> org.jboss.netty.handler.codec.string.StringDecoder:
    java.nio.charset.Charset charset -> charset
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> decode
org.jboss.netty.handler.codec.string.StringEncoder -> org.jboss.netty.handler.codec.string.StringEncoder:
    java.nio.charset.Charset charset -> charset
    java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object) -> encode
org.jboss.netty.handler.execution.ChainedExecutor -> org.jboss.netty.handler.execution.ChainedExecutor:
    java.util.concurrent.Executor cur -> cur
    java.util.concurrent.Executor next -> next
    org.jboss.netty.handler.execution.ChannelEventRunnableFilter filter -> filter
    boolean $assertionsDisabled -> $assertionsDisabled
    void execute(java.lang.Runnable) -> execute
    void releaseExternalResources() -> releaseExternalResources
    void releaseExternal(java.util.concurrent.Executor) -> releaseExternal
org.jboss.netty.handler.execution.ChannelDownstreamEventRunnable -> org.jboss.netty.handler.execution.ChannelDownstreamEventRunnable:
    void doRun() -> doRun
org.jboss.netty.handler.execution.ChannelDownstreamEventRunnableFilter -> org.jboss.netty.handler.execution.ChannelDownstreamEventRunnableFilter:
    boolean filter(org.jboss.netty.handler.execution.ChannelEventRunnable) -> filter
org.jboss.netty.handler.execution.ChannelEventRunnable -> org.jboss.netty.handler.execution.ChannelEventRunnable:
    java.lang.ThreadLocal PARENT -> PARENT
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.channel.ChannelEvent e -> e
    int estimatedSize -> estimatedSize
    java.util.concurrent.Executor executor -> executor
    org.jboss.netty.channel.ChannelHandlerContext getContext() -> getContext
    org.jboss.netty.channel.ChannelEvent getEvent() -> getEvent
    java.lang.Object unwrap() -> unwrap
    void run() -> run
    void doRun() -> doRun
org.jboss.netty.handler.execution.ChannelEventRunnableFilter -> org.jboss.netty.handler.execution.ChannelEventRunnableFilter:
    boolean filter(org.jboss.netty.handler.execution.ChannelEventRunnable) -> filter
org.jboss.netty.handler.execution.ChannelUpstreamEventRunnable -> org.jboss.netty.handler.execution.ChannelUpstreamEventRunnable:
    void doRun() -> doRun
org.jboss.netty.handler.execution.ChannelUpstreamEventRunnableFilter -> org.jboss.netty.handler.execution.ChannelUpstreamEventRunnableFilter:
    boolean filter(org.jboss.netty.handler.execution.ChannelEventRunnable) -> filter
org.jboss.netty.handler.execution.ExecutionHandler -> org.jboss.netty.handler.execution.ExecutionHandler:
    java.util.concurrent.Executor executor -> executor
    boolean handleDownstream -> handleDownstream
    boolean handleUpstream -> handleUpstream
    java.util.concurrent.Executor getExecutor() -> getExecutor
    void releaseExternalResources() -> releaseExternalResources
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    boolean handleReadSuspend(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleReadSuspend
org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor -> org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.util.internal.SharedResourceMisuseDetector misuseDetector -> misuseDetector
    org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$Settings settings -> settings
    java.util.concurrent.ConcurrentMap channelCounters -> channelCounters
    org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$Limiter totalLimiter -> totalLimiter
    boolean notifyOnShutdown -> notifyOnShutdown
    void terminated() -> terminated
    java.util.List shutdownNow() -> shutdownNow
    java.util.List shutdownNow(boolean) -> shutdownNow
    org.jboss.netty.util.ObjectSizeEstimator getObjectSizeEstimator() -> getObjectSizeEstimator
    void setObjectSizeEstimator(org.jboss.netty.util.ObjectSizeEstimator) -> setObjectSizeEstimator
    long getMaxChannelMemorySize() -> getMaxChannelMemorySize
    void setMaxChannelMemorySize(long) -> setMaxChannelMemorySize
    long getMaxTotalMemorySize() -> getMaxTotalMemorySize
    void setNotifyChannelFuturesOnShutdown(boolean) -> setNotifyChannelFuturesOnShutdown
    boolean getNotifyChannelFuturesOnShutdown() -> getNotifyChannelFuturesOnShutdown
    void execute(java.lang.Runnable) -> execute
    void doExecute(java.lang.Runnable) -> doExecute
    void doUnorderedExecute(java.lang.Runnable) -> doUnorderedExecute
    boolean remove(java.lang.Runnable) -> remove
    void beforeExecute(java.lang.Thread,java.lang.Runnable) -> beforeExecute
    void increaseCounter(java.lang.Runnable) -> increaseCounter
    void decreaseCounter(java.lang.Runnable) -> decreaseCounter
    java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel) -> getChannelCounter
    boolean shouldCount(java.lang.Runnable) -> shouldCount
org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$1 -> org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$1:
org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$Limiter -> org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$Limiter:
    long limit -> limit
    long counter -> counter
    int waiters -> waiters
    void increase(long) -> increase
    void decrease(long) -> decrease
org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable -> org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:
    java.lang.Runnable task -> task
    int estimatedSize -> estimatedSize
    void run() -> run
org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$NewThreadRunsPolicy -> org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$NewThreadRunsPolicy:
    void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor) -> rejectedExecution
org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$Settings -> org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$Settings:
    org.jboss.netty.util.ObjectSizeEstimator objectSizeEstimator -> objectSizeEstimator
    long maxChannelMemorySize -> maxChannelMemorySize
org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor -> org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:
    org.jboss.netty.util.ObjectSizeEstimator getObjectSizeEstimator() -> getObjectSizeEstimator
    void setObjectSizeEstimator(org.jboss.netty.util.ObjectSizeEstimator) -> setObjectSizeEstimator
    long getMaxChannelMemorySize() -> getMaxChannelMemorySize
    void setMaxChannelMemorySize(long) -> setMaxChannelMemorySize
    long getMaxTotalMemorySize() -> getMaxTotalMemorySize
    boolean shouldCount(java.lang.Runnable) -> shouldCount
    void execute(java.lang.Runnable) -> execute
    java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent) -> getChildExecutor
org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor$1 -> org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor$1:
    java.lang.Object val$key -> val$key
    org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor -> org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:
    java.util.concurrent.ConcurrentMap childExecutors -> childExecutors
    java.util.concurrent.ConcurrentMap newChildExecutorMap() -> newChildExecutorMap
    java.lang.Object getChildExecutorKey(org.jboss.netty.channel.ChannelEvent) -> getChildExecutorKey
    java.util.Set getChildExecutorKeySet() -> getChildExecutorKeySet
    boolean removeChildExecutor(java.lang.Object) -> removeChildExecutor
    void doExecute(java.lang.Runnable) -> doExecute
    java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent) -> getChildExecutor
    boolean shouldCount(java.lang.Runnable) -> shouldCount
    void onAfterExecute(java.lang.Runnable,java.lang.Throwable) -> onAfterExecute
org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor -> org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:
    java.util.Queue tasks -> tasks
    java.util.concurrent.atomic.AtomicBoolean isRunning -> isRunning
    org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor this$0 -> this$0
    void execute(java.lang.Runnable) -> execute
    void run() -> run
org.jboss.netty.handler.ipfilter.CIDR -> org.jboss.netty.handler.ipfilter.CIDR:
    java.net.InetAddress baseAddress -> baseAddress
    int cidrMask -> cidrMask
    org.jboss.netty.handler.ipfilter.CIDR newCIDR(java.net.InetAddress,int) -> newCIDR
    org.jboss.netty.handler.ipfilter.CIDR newCIDR(java.net.InetAddress,java.lang.String) -> newCIDR
    org.jboss.netty.handler.ipfilter.CIDR newCIDR(java.lang.String) -> newCIDR
    java.net.InetAddress getBaseAddress() -> getBaseAddress
    int getMask() -> getMask
    java.lang.String toString() -> toString
    java.net.InetAddress getEndAddress() -> getEndAddress
    boolean contains(java.net.InetAddress) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.net.InetAddress addressStringToInet(java.lang.String) -> addressStringToInet
    int getNetMask(java.lang.String) -> getNetMask
    int parseInt(java.lang.String,int) -> parseInt
    byte[] getIpV4FromIpV6(java.net.Inet6Address) -> getIpV4FromIpV6
    byte[] getIpV6FromIpV4(java.net.Inet4Address) -> getIpV6FromIpV4
org.jboss.netty.handler.ipfilter.CIDR4 -> org.jboss.netty.handler.ipfilter.CIDR4:
    int addressInt -> addressInt
    int addressEndInt -> addressEndInt
    java.net.InetAddress getEndAddress() -> getEndAddress
    int compareTo(org.jboss.netty.handler.ipfilter.CIDR) -> compareTo
    boolean contains(java.net.InetAddress) -> contains
    int ipv4PrefixLengthToLength(int) -> ipv4PrefixLengthToLength
    int ipv4PrefixLengthToMask(int) -> ipv4PrefixLengthToMask
    java.net.InetAddress intToIPv4Address(int) -> intToIPv4Address
    int ipv4AddressToInt(java.net.InetAddress) -> ipv4AddressToInt
    int ipv4AddressToInt(byte[]) -> ipv4AddressToInt
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.ipfilter.CIDR6 -> org.jboss.netty.handler.ipfilter.CIDR6:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.math.BigInteger addressBigInt -> addressBigInt
    java.math.BigInteger addressEndBigInt -> addressEndBigInt
    java.net.InetAddress getEndAddress() -> getEndAddress
    int compareTo(org.jboss.netty.handler.ipfilter.CIDR) -> compareTo
    boolean contains(java.net.InetAddress) -> contains
    java.math.BigInteger ipv6CidrMaskToBaseAddress(int) -> ipv6CidrMaskToBaseAddress
    java.math.BigInteger ipv6CidrMaskToMask(int) -> ipv6CidrMaskToMask
    java.math.BigInteger ipv6AddressToBigInteger(java.net.InetAddress) -> ipv6AddressToBigInteger
    java.net.InetAddress bigIntToIPv6Address(java.math.BigInteger) -> bigIntToIPv6Address
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.ipfilter.IpFilterListener -> org.jboss.netty.handler.ipfilter.IpFilterListener:
    org.jboss.netty.channel.ChannelFuture allowed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress) -> allowed
    org.jboss.netty.channel.ChannelFuture refused(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress) -> refused
    boolean continues(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> continues
org.jboss.netty.handler.ipfilter.IpFilterRule -> org.jboss.netty.handler.ipfilter.IpFilterRule:
    boolean isAllowRule() -> isAllowRule
    boolean isDenyRule() -> isDenyRule
org.jboss.netty.handler.ipfilter.IpFilterRuleHandler -> org.jboss.netty.handler.ipfilter.IpFilterRuleHandler:
    java.util.concurrent.CopyOnWriteArrayList ipFilterRuleList -> ipFilterRuleList
    void add(org.jboss.netty.handler.ipfilter.IpFilterRule) -> add
    void add(int,org.jboss.netty.handler.ipfilter.IpFilterRule) -> add
    void addAll(java.util.Collection) -> addAll
    void addAll(int,java.util.Collection) -> addAll
    int addAllAbsent(java.util.Collection) -> addAllAbsent
    boolean addIfAbsent(org.jboss.netty.handler.ipfilter.IpFilterRule) -> addIfAbsent
    void clear() -> clear
    boolean contains(org.jboss.netty.handler.ipfilter.IpFilterRule) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    org.jboss.netty.handler.ipfilter.IpFilterRule get(int) -> get
    boolean isEmpty() -> isEmpty
    void remove(org.jboss.netty.handler.ipfilter.IpFilterRule) -> remove
    org.jboss.netty.handler.ipfilter.IpFilterRule remove(int) -> remove
    void removeAll(java.util.Collection) -> removeAll
    void retainAll(java.util.Collection) -> retainAll
    org.jboss.netty.handler.ipfilter.IpFilterRule set(int,org.jboss.netty.handler.ipfilter.IpFilterRule) -> set
    int size() -> size
    boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress) -> accept
org.jboss.netty.handler.ipfilter.IpFilterRuleList -> org.jboss.netty.handler.ipfilter.IpFilterRuleList:
    long serialVersionUID -> serialVersionUID
    org.jboss.netty.logging.InternalLogger logger -> logger
    void parseRules(java.lang.String) -> parseRules
    void parseRule(java.lang.String) -> parseRule
org.jboss.netty.handler.ipfilter.IpFilteringHandler -> org.jboss.netty.handler.ipfilter.IpFilteringHandler:
    void setIpFilterListener(org.jboss.netty.handler.ipfilter.IpFilterListener) -> setIpFilterListener
    void removeIpFilterListener() -> removeIpFilterListener
org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl -> org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:
    org.jboss.netty.handler.ipfilter.IpFilterListener listener -> listener
    boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress) -> accept
    org.jboss.netty.channel.ChannelFuture handleRefusedChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress) -> handleRefusedChannel
    org.jboss.netty.channel.ChannelFuture handleAllowedChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress) -> handleAllowedChannel
    boolean isBlocked(org.jboss.netty.channel.ChannelHandlerContext) -> isBlocked
    boolean continues(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> continues
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void setIpFilterListener(org.jboss.netty.handler.ipfilter.IpFilterListener) -> setIpFilterListener
    void removeIpFilterListener() -> removeIpFilterListener
org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl$1 -> org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl$1:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.handler.ipfilter.IpSet -> org.jboss.netty.handler.ipfilter.IpSet:
    boolean contains(java.net.InetAddress) -> contains
org.jboss.netty.handler.ipfilter.IpSubnet -> org.jboss.netty.handler.ipfilter.IpSubnet:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.handler.ipfilter.CIDR cidr -> cidr
    boolean contains(java.lang.String) -> contains
    boolean contains(java.net.InetAddress) -> contains
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.jboss.netty.handler.ipfilter.IpSubnet) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.ipfilter.IpSubnetFilterRule -> org.jboss.netty.handler.ipfilter.IpSubnetFilterRule:
    boolean isAllowRule -> isAllowRule
    boolean isAllowRule() -> isAllowRule
    boolean isDenyRule() -> isDenyRule
org.jboss.netty.handler.ipfilter.IpV4Subnet -> org.jboss.netty.handler.ipfilter.IpV4Subnet:
    org.jboss.netty.logging.InternalLogger logger -> logger
    int SUBNET_MASK -> SUBNET_MASK
    int BYTE_ADDRESS_MASK -> BYTE_ADDRESS_MASK
    java.net.InetAddress inetAddress -> inetAddress
    int subnet -> subnet
    int mask -> mask
    int cidrMask -> cidrMask
    void setNetAddress(java.lang.String) -> setNetAddress
    void setNetAddress(java.net.InetAddress,int) -> setNetAddress
    void setNetAddress(java.net.InetAddress,java.lang.String) -> setNetAddress
    void setNetId(java.lang.String) -> setNetId
    int toInt(java.net.InetAddress) -> toInt
    void setNetId(java.net.InetAddress) -> setNetId
    void setNetMask(java.lang.String) -> setNetMask
    void setCidrNetMask(int) -> setCidrNetMask
    boolean contains(java.lang.String) -> contains
    boolean contains(java.net.InetAddress) -> contains
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.jboss.netty.handler.ipfilter.IpV4Subnet) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.ipfilter.IpV4SubnetFilterRule -> org.jboss.netty.handler.ipfilter.IpV4SubnetFilterRule:
    boolean isAllowRule -> isAllowRule
    boolean isAllowRule() -> isAllowRule
    boolean isDenyRule() -> isDenyRule
org.jboss.netty.handler.ipfilter.OneIpFilterHandler -> org.jboss.netty.handler.ipfilter.OneIpFilterHandler:
    java.util.concurrent.ConcurrentMap connectedSet -> connectedSet
    boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress) -> accept
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
org.jboss.netty.handler.ipfilter.PatternRule -> org.jboss.netty.handler.ipfilter.PatternRule:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.regex.Pattern ipPattern -> ipPattern
    java.util.regex.Pattern namePattern -> namePattern
    boolean isAllowRule -> isAllowRule
    boolean localhost -> localhost
    java.lang.String pattern -> pattern
    java.lang.String getPattern() -> getPattern
    boolean isAllowRule() -> isAllowRule
    boolean isDenyRule() -> isDenyRule
    boolean contains(java.net.InetAddress) -> contains
    void parse(java.lang.String) -> parse
    java.lang.String addRule(java.lang.String,java.lang.String) -> addRule
    boolean isLocalhost(java.net.InetAddress) -> isLocalhost
    int compareTo(java.lang.Object) -> compareTo
org.jboss.netty.handler.logging.LoggingHandler -> org.jboss.netty.handler.logging.LoggingHandler:
    org.jboss.netty.logging.InternalLogLevel DEFAULT_LEVEL -> DEFAULT_LEVEL
    java.lang.String NEWLINE -> NEWLINE
    java.lang.String[] BYTE2HEX -> BYTE2HEX
    java.lang.String[] HEXPADDING -> HEXPADDING
    java.lang.String[] BYTEPADDING -> BYTEPADDING
    char[] BYTE2CHAR -> BYTE2CHAR
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.logging.InternalLogLevel level -> level
    boolean hexDump -> hexDump
    org.jboss.netty.logging.InternalLogger getLogger() -> getLogger
    org.jboss.netty.logging.InternalLogLevel getLevel() -> getLevel
    void log(org.jboss.netty.channel.ChannelEvent) -> log
    java.lang.String formatBuffer(org.jboss.netty.buffer.ChannelBuffer) -> formatBuffer
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
org.jboss.netty.handler.queue.BlockingReadHandler -> org.jboss.netty.handler.queue.BlockingReadHandler:
    java.util.concurrent.BlockingQueue queue -> queue
    boolean closed -> closed
    boolean $assertionsDisabled -> $assertionsDisabled
    java.util.concurrent.BlockingQueue getQueue() -> getQueue
    boolean isClosed() -> isClosed
    java.lang.Object read() -> read
    java.lang.Object read(long,java.util.concurrent.TimeUnit) -> read
    org.jboss.netty.channel.ChannelEvent readEvent() -> readEvent
    org.jboss.netty.channel.ChannelEvent readEvent(long,java.util.concurrent.TimeUnit) -> readEvent
    void detectDeadLock() -> detectDeadLock
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    java.lang.Object getMessage(org.jboss.netty.channel.MessageEvent) -> getMessage
org.jboss.netty.handler.queue.BlockingReadTimeoutException -> org.jboss.netty.handler.queue.BlockingReadTimeoutException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.queue.BufferedWriteHandler -> org.jboss.netty.handler.queue.BufferedWriteHandler:
    java.util.Queue queue -> queue
    boolean consolidateOnFlush -> consolidateOnFlush
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    java.util.concurrent.atomic.AtomicBoolean flush -> flush
    boolean $assertionsDisabled -> $assertionsDisabled
    boolean isConsolidateOnFlush() -> isConsolidateOnFlush
    java.util.Queue getQueue() -> getQueue
    void flush() -> flush
    void flush(boolean) -> flush
    java.util.List consolidatedWrite(java.util.List) -> consolidatedWrite
    void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> writeRequested
    void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> disconnectRequested
    void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> closeRequested
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.queue.BufferedWriteHandler$1 -> org.jboss.netty.handler.queue.BufferedWriteHandler$1:
    java.util.List val$pendingWrites -> val$pendingWrites
    org.jboss.netty.handler.queue.BufferedWriteHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.ssl.ImmediateExecutor -> org.jboss.netty.handler.ssl.ImmediateExecutor:
    org.jboss.netty.handler.ssl.ImmediateExecutor INSTANCE -> INSTANCE
    void execute(java.lang.Runnable) -> execute
org.jboss.netty.handler.ssl.JdkSslClientContext -> org.jboss.netty.handler.ssl.JdkSslClientContext:
    javax.net.ssl.SSLContext ctx -> ctx
    java.util.List nextProtocols -> nextProtocols
    boolean isClient() -> isClient
    java.util.List nextProtocols() -> nextProtocols
    javax.net.ssl.SSLContext context() -> context
org.jboss.netty.handler.ssl.JdkSslContext -> org.jboss.netty.handler.ssl.JdkSslContext:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String PROTOCOL -> PROTOCOL
    java.lang.String[] PROTOCOLS -> PROTOCOLS
    java.util.List DEFAULT_CIPHERS -> DEFAULT_CIPHERS
    java.lang.String[] cipherSuites -> cipherSuites
    java.util.List unmodifiableCipherSuites -> unmodifiableCipherSuites
    void addIfSupported(java.lang.String[],java.util.List,java.lang.String[]) -> addIfSupported
    javax.net.ssl.SSLContext context() -> context
    javax.net.ssl.SSLSessionContext sessionContext() -> sessionContext
    java.util.List cipherSuites() -> cipherSuites
    long sessionCacheSize() -> sessionCacheSize
    long sessionTimeout() -> sessionTimeout
    javax.net.ssl.SSLEngine newEngine() -> newEngine
    javax.net.ssl.SSLEngine newEngine(java.lang.String,int) -> newEngine
    javax.net.ssl.SSLEngine wrapEngine(javax.net.ssl.SSLEngine) -> wrapEngine
    java.lang.String[] toCipherSuiteArray(java.lang.Iterable) -> toCipherSuiteArray
org.jboss.netty.handler.ssl.JdkSslServerContext -> org.jboss.netty.handler.ssl.JdkSslServerContext:
    javax.net.ssl.SSLContext ctx -> ctx
    java.util.List nextProtocols -> nextProtocols
    boolean isClient() -> isClient
    java.util.List nextProtocols() -> nextProtocols
    javax.net.ssl.SSLContext context() -> context
    java.security.spec.PKCS8EncodedKeySpec generateKeySpec(char[],byte[]) -> generateKeySpec
org.jboss.netty.handler.ssl.JettyNpnSslEngine -> org.jboss.netty.handler.ssl.JettyNpnSslEngine:
    boolean available -> available
    javax.net.ssl.SSLEngine engine -> engine
    org.jboss.netty.handler.ssl.JettyNpnSslSession session -> session
    boolean $assertionsDisabled -> $assertionsDisabled
    boolean isAvailable() -> isAvailable
    void updateAvailability() -> updateAvailability
    org.jboss.netty.handler.ssl.JettyNpnSslSession getSession() -> getSession
    void closeInbound() -> closeInbound
    void closeOutbound() -> closeOutbound
    java.lang.String getPeerHost() -> getPeerHost
    int getPeerPort() -> getPeerPort
    javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer) -> wrap
    javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer) -> wrap
    javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer) -> wrap
    javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer) -> unwrap
    javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[]) -> unwrap
    javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int) -> unwrap
    java.lang.Runnable getDelegatedTask() -> getDelegatedTask
    boolean isInboundDone() -> isInboundDone
    boolean isOutboundDone() -> isOutboundDone
    java.lang.String[] getSupportedCipherSuites() -> getSupportedCipherSuites
    java.lang.String[] getEnabledCipherSuites() -> getEnabledCipherSuites
    void setEnabledCipherSuites(java.lang.String[]) -> setEnabledCipherSuites
    java.lang.String[] getSupportedProtocols() -> getSupportedProtocols
    java.lang.String[] getEnabledProtocols() -> getEnabledProtocols
    void setEnabledProtocols(java.lang.String[]) -> setEnabledProtocols
    javax.net.ssl.SSLSession getHandshakeSession() -> getHandshakeSession
    void beginHandshake() -> beginHandshake
    javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus() -> getHandshakeStatus
    void setUseClientMode(boolean) -> setUseClientMode
    boolean getUseClientMode() -> getUseClientMode
    void setNeedClientAuth(boolean) -> setNeedClientAuth
    boolean getNeedClientAuth() -> getNeedClientAuth
    void setWantClientAuth(boolean) -> setWantClientAuth
    boolean getWantClientAuth() -> getWantClientAuth
    void setEnableSessionCreation(boolean) -> setEnableSessionCreation
    boolean getEnableSessionCreation() -> getEnableSessionCreation
    javax.net.ssl.SSLParameters getSSLParameters() -> getSSLParameters
    void setSSLParameters(javax.net.ssl.SSLParameters) -> setSSLParameters
    javax.net.ssl.SSLSession getSession() -> getSession
    org.jboss.netty.handler.ssl.JettyNpnSslSession access$000(org.jboss.netty.handler.ssl.JettyNpnSslEngine) -> access$000
org.jboss.netty.handler.ssl.JettyNpnSslEngine$1 -> org.jboss.netty.handler.ssl.JettyNpnSslEngine$1:
    java.util.List val$nextProtocols -> val$nextProtocols
    org.jboss.netty.handler.ssl.JettyNpnSslEngine this$0 -> this$0
    void unsupported() -> unsupported
    java.util.List protocols() -> protocols
    void protocolSelected(java.lang.String) -> protocolSelected
org.jboss.netty.handler.ssl.JettyNpnSslEngine$2 -> org.jboss.netty.handler.ssl.JettyNpnSslEngine$2:
    java.lang.String[] val$list -> val$list
    java.lang.String val$fallback -> val$fallback
    org.jboss.netty.handler.ssl.JettyNpnSslEngine this$0 -> this$0
    boolean supports() -> supports
    void unsupported() -> unsupported
    java.lang.String selectProtocol(java.util.List) -> selectProtocol
org.jboss.netty.handler.ssl.JettyNpnSslSession -> org.jboss.netty.handler.ssl.JettyNpnSslSession:
    javax.net.ssl.SSLEngine engine -> engine
    java.lang.String applicationProtocol -> applicationProtocol
    void setApplicationProtocol(java.lang.String) -> setApplicationProtocol
    java.lang.String getProtocol() -> getProtocol
    javax.net.ssl.SSLSession unwrap() -> unwrap
    byte[] getId() -> getId
    javax.net.ssl.SSLSessionContext getSessionContext() -> getSessionContext
    long getCreationTime() -> getCreationTime
    long getLastAccessedTime() -> getLastAccessedTime
    void invalidate() -> invalidate
    boolean isValid() -> isValid
    void putValue(java.lang.String,java.lang.Object) -> putValue
    java.lang.Object getValue(java.lang.String) -> getValue
    void removeValue(java.lang.String) -> removeValue
    java.lang.String[] getValueNames() -> getValueNames
    java.security.cert.Certificate[] getPeerCertificates() -> getPeerCertificates
    java.security.cert.Certificate[] getLocalCertificates() -> getLocalCertificates
    javax.security.cert.X509Certificate[] getPeerCertificateChain() -> getPeerCertificateChain
    java.security.Principal getPeerPrincipal() -> getPeerPrincipal
    java.security.Principal getLocalPrincipal() -> getLocalPrincipal
    java.lang.String getCipherSuite() -> getCipherSuite
    java.lang.String getPeerHost() -> getPeerHost
    int getPeerPort() -> getPeerPort
    int getPacketBufferSize() -> getPacketBufferSize
    int getApplicationBufferSize() -> getApplicationBufferSize
org.jboss.netty.handler.ssl.NotSslRecordException -> org.jboss.netty.handler.ssl.NotSslRecordException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.ssl.OpenSsl -> org.jboss.netty.handler.ssl.OpenSsl:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.Throwable UNAVAILABILITY_CAUSE -> UNAVAILABILITY_CAUSE
    java.lang.String IGNORABLE_ERROR_PREFIX -> IGNORABLE_ERROR_PREFIX
    boolean isAvailable() -> isAvailable
    void ensureAvailability() -> ensureAvailability
    java.lang.Throwable unavailabilityCause() -> unavailabilityCause
org.jboss.netty.handler.ssl.OpenSslEngine -> org.jboss.netty.handler.ssl.OpenSslEngine:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.security.cert.Certificate[] EMPTY_CERTIFICATES -> EMPTY_CERTIFICATES
    javax.security.cert.X509Certificate[] EMPTY_X509_CERTIFICATES -> EMPTY_X509_CERTIFICATES
    javax.net.ssl.SSLException ENGINE_CLOSED -> ENGINE_CLOSED
    javax.net.ssl.SSLException RENEGOTIATION_UNSUPPORTED -> RENEGOTIATION_UNSUPPORTED
    javax.net.ssl.SSLException ENCRYPTED_PACKET_OVERSIZED -> ENCRYPTED_PACKET_OVERSIZED
    int MAX_PLAINTEXT_LENGTH -> MAX_PLAINTEXT_LENGTH
    int MAX_COMPRESSED_LENGTH -> MAX_COMPRESSED_LENGTH
    int MAX_CIPHERTEXT_LENGTH -> MAX_CIPHERTEXT_LENGTH
    int MAX_ENCRYPTED_PACKET_LENGTH -> MAX_ENCRYPTED_PACKET_LENGTH
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater DESTROYED_UPDATER -> DESTROYED_UPDATER
    long ssl -> ssl
    long networkBIO -> networkBIO
    int accepted -> accepted
    boolean handshakeFinished -> handshakeFinished
    boolean receivedShutdown -> receivedShutdown
    int destroyed -> destroyed
    java.lang.String cipher -> cipher
    java.lang.String applicationProtocol -> applicationProtocol
    boolean isInboundDone -> isInboundDone
    boolean isOutboundDone -> isOutboundDone
    boolean engineClosed -> engineClosed
    int lastPrimingReadResult -> lastPrimingReadResult
    org.jboss.netty.handler.ssl.SslBufferPool bufPool -> bufPool
    java.lang.String fallbackApplicationProtocol -> fallbackApplicationProtocol
    javax.net.ssl.SSLSession session -> session
    boolean $assertionsDisabled -> $assertionsDisabled
    void shutdown() -> shutdown
    int writePlaintextData(java.nio.ByteBuffer) -> writePlaintextData
    int writeEncryptedData(java.nio.ByteBuffer) -> writeEncryptedData
    int readPlaintextData(java.nio.ByteBuffer) -> readPlaintextData
    int readEncryptedData(java.nio.ByteBuffer,int) -> readEncryptedData
    javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer) -> wrap
    javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int) -> unwrap
    java.lang.Runnable getDelegatedTask() -> getDelegatedTask
    void closeInbound() -> closeInbound
    boolean isInboundDone() -> isInboundDone
    void closeOutbound() -> closeOutbound
    boolean isOutboundDone() -> isOutboundDone
    java.lang.String[] getSupportedCipherSuites() -> getSupportedCipherSuites
    java.lang.String[] getEnabledCipherSuites() -> getEnabledCipherSuites
    void setEnabledCipherSuites(java.lang.String[]) -> setEnabledCipherSuites
    java.lang.String[] getSupportedProtocols() -> getSupportedProtocols
    java.lang.String[] getEnabledProtocols() -> getEnabledProtocols
    void setEnabledProtocols(java.lang.String[]) -> setEnabledProtocols
    javax.net.ssl.SSLSession getSession() -> getSession
    void beginHandshake() -> beginHandshake
    void beginHandshakeImplicitly() -> beginHandshakeImplicitly
    javax.net.ssl.SSLEngineResult$Status getEngineStatus() -> getEngineStatus
    javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus() -> getHandshakeStatus
    void setUseClientMode(boolean) -> setUseClientMode
    boolean getUseClientMode() -> getUseClientMode
    void setNeedClientAuth(boolean) -> setNeedClientAuth
    boolean getNeedClientAuth() -> getNeedClientAuth
    void setWantClientAuth(boolean) -> setWantClientAuth
    boolean getWantClientAuth() -> getWantClientAuth
    void setEnableSessionCreation(boolean) -> setEnableSessionCreation
    boolean getEnableSessionCreation() -> getEnableSessionCreation
    long access$000(org.jboss.netty.handler.ssl.OpenSslEngine) -> access$000
    java.security.cert.Certificate[] access$100() -> access$100
    javax.security.cert.X509Certificate[] access$200() -> access$200
    java.lang.String access$300(org.jboss.netty.handler.ssl.OpenSslEngine) -> access$300
    java.lang.String access$400(org.jboss.netty.handler.ssl.OpenSslEngine) -> access$400
org.jboss.netty.handler.ssl.OpenSslEngine$1 -> org.jboss.netty.handler.ssl.OpenSslEngine$1:
    org.jboss.netty.handler.ssl.OpenSslEngine this$0 -> this$0
    byte[] getId() -> getId
    javax.net.ssl.SSLSessionContext getSessionContext() -> getSessionContext
    long getCreationTime() -> getCreationTime
    long getLastAccessedTime() -> getLastAccessedTime
    void invalidate() -> invalidate
    boolean isValid() -> isValid
    void putValue(java.lang.String,java.lang.Object) -> putValue
    java.lang.Object getValue(java.lang.String) -> getValue
    void removeValue(java.lang.String) -> removeValue
    java.lang.String[] getValueNames() -> getValueNames
    java.security.cert.Certificate[] getPeerCertificates() -> getPeerCertificates
    java.security.cert.Certificate[] getLocalCertificates() -> getLocalCertificates
    javax.security.cert.X509Certificate[] getPeerCertificateChain() -> getPeerCertificateChain
    java.security.Principal getPeerPrincipal() -> getPeerPrincipal
    java.security.Principal getLocalPrincipal() -> getLocalPrincipal
    java.lang.String getCipherSuite() -> getCipherSuite
    java.lang.String getProtocol() -> getProtocol
    java.lang.String getPeerHost() -> getPeerHost
    int getPeerPort() -> getPeerPort
    int getPacketBufferSize() -> getPacketBufferSize
    int getApplicationBufferSize() -> getApplicationBufferSize
org.jboss.netty.handler.ssl.OpenSslServerContext -> org.jboss.netty.handler.ssl.OpenSslServerContext:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.List DEFAULT_CIPHERS -> DEFAULT_CIPHERS
    long aprPool -> aprPool
    java.util.List ciphers -> ciphers
    java.util.List unmodifiableCiphers -> unmodifiableCiphers
    long sessionCacheSize -> sessionCacheSize
    long sessionTimeout -> sessionTimeout
    java.util.List nextProtocols -> nextProtocols
    long ctx -> ctx
    org.jboss.netty.handler.ssl.OpenSslSessionStats stats -> stats
    org.jboss.netty.handler.ssl.SslBufferPool newBufferPool() -> newBufferPool
    boolean isClient() -> isClient
    java.util.List cipherSuites() -> cipherSuites
    long sessionCacheSize() -> sessionCacheSize
    long sessionTimeout() -> sessionTimeout
    java.util.List nextProtocols() -> nextProtocols
    long context() -> context
    org.jboss.netty.handler.ssl.OpenSslSessionStats stats() -> stats
    javax.net.ssl.SSLEngine newEngine() -> newEngine
    javax.net.ssl.SSLEngine newEngine(java.lang.String,int) -> newEngine
    void setTicketKeys(byte[]) -> setTicketKeys
    void finalize() -> finalize
    void destroyPools() -> destroyPools
org.jboss.netty.handler.ssl.OpenSslSessionStats -> org.jboss.netty.handler.ssl.OpenSslSessionStats:
    long context -> context
    long number() -> number
    long connect() -> connect
    long connectGood() -> connectGood
    long connectRenegotiate() -> connectRenegotiate
    long accept() -> accept
    long acceptGood() -> acceptGood
    long acceptRenegotiate() -> acceptRenegotiate
    long hits() -> hits
    long cbHits() -> cbHits
    long misses() -> misses
    long timeouts() -> timeouts
    long cacheFull() -> cacheFull
org.jboss.netty.handler.ssl.PemReader -> org.jboss.netty.handler.ssl.PemReader:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.regex.Pattern CERT_PATTERN -> CERT_PATTERN
    java.util.regex.Pattern KEY_PATTERN -> KEY_PATTERN
    org.jboss.netty.buffer.ChannelBuffer[] readCertificates(java.io.File) -> readCertificates
    org.jboss.netty.buffer.ChannelBuffer readPrivateKey(java.io.File) -> readPrivateKey
    java.lang.String readContent(java.io.File) -> readContent
    void safeClose(java.io.InputStream) -> safeClose
    void safeClose(java.io.OutputStream) -> safeClose
org.jboss.netty.handler.ssl.SslBufferPool -> org.jboss.netty.handler.ssl.SslBufferPool:
    int MAX_PACKET_SIZE_ALIGNED -> MAX_PACKET_SIZE_ALIGNED
    int DEFAULT_POOL_SIZE -> DEFAULT_POOL_SIZE
    java.nio.ByteBuffer preallocated -> preallocated
    java.util.concurrent.BlockingQueue pool -> pool
    int maxBufferCount -> maxBufferCount
    boolean allocateDirect -> allocateDirect
    java.util.concurrent.atomic.AtomicInteger numAllocations -> numAllocations
    int getMaxPoolSize() -> getMaxPoolSize
    int getUnacquiredPoolSize() -> getUnacquiredPoolSize
    java.nio.ByteBuffer acquireBuffer() -> acquireBuffer
    void releaseBuffer(java.nio.ByteBuffer) -> releaseBuffer
    java.nio.ByteBuffer allocate(int) -> allocate
org.jboss.netty.handler.ssl.SslContext -> org.jboss.netty.handler.ssl.SslContext:
    org.jboss.netty.handler.ssl.SslBufferPool bufferPool -> bufferPool
    org.jboss.netty.handler.ssl.SslProvider defaultServerProvider() -> defaultServerProvider
    org.jboss.netty.handler.ssl.SslProvider defaultClientProvider() -> defaultClientProvider
    org.jboss.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File) -> newServerContext
    org.jboss.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File,java.lang.String) -> newServerContext
    org.jboss.netty.handler.ssl.SslContext newServerContext(org.jboss.netty.handler.ssl.SslBufferPool,java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long) -> newServerContext
    org.jboss.netty.handler.ssl.SslContext newServerContext(org.jboss.netty.handler.ssl.SslProvider,java.io.File,java.io.File) -> newServerContext
    org.jboss.netty.handler.ssl.SslContext newServerContext(org.jboss.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String) -> newServerContext
    org.jboss.netty.handler.ssl.SslContext newServerContext(org.jboss.netty.handler.ssl.SslProvider,org.jboss.netty.handler.ssl.SslBufferPool,java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long) -> newServerContext
    org.jboss.netty.handler.ssl.SslContext newClientContext() -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(java.io.File) -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(javax.net.ssl.TrustManagerFactory) -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(java.io.File,javax.net.ssl.TrustManagerFactory) -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(org.jboss.netty.handler.ssl.SslBufferPool,java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long) -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(org.jboss.netty.handler.ssl.SslProvider) -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(org.jboss.netty.handler.ssl.SslProvider,java.io.File) -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(org.jboss.netty.handler.ssl.SslProvider,javax.net.ssl.TrustManagerFactory) -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(org.jboss.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory) -> newClientContext
    org.jboss.netty.handler.ssl.SslContext newClientContext(org.jboss.netty.handler.ssl.SslProvider,org.jboss.netty.handler.ssl.SslBufferPool,java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long) -> newClientContext
    org.jboss.netty.handler.ssl.SslBufferPool newBufferPool() -> newBufferPool
    boolean isServer() -> isServer
    org.jboss.netty.handler.ssl.SslBufferPool bufferPool() -> bufferPool
    boolean isClient() -> isClient
    java.util.List cipherSuites() -> cipherSuites
    long sessionCacheSize() -> sessionCacheSize
    long sessionTimeout() -> sessionTimeout
    java.util.List nextProtocols() -> nextProtocols
    javax.net.ssl.SSLEngine newEngine() -> newEngine
    javax.net.ssl.SSLEngine newEngine(java.lang.String,int) -> newEngine
    org.jboss.netty.handler.ssl.SslHandler newHandler() -> newHandler
    org.jboss.netty.handler.ssl.SslHandler newHandler(java.lang.String,int) -> newHandler
    org.jboss.netty.handler.ssl.SslHandler newHandler(javax.net.ssl.SSLEngine) -> newHandler
org.jboss.netty.handler.ssl.SslContext$1 -> org.jboss.netty.handler.ssl.SslContext$1:
    int[] $SwitchMap$org$jboss$netty$handler$ssl$SslProvider -> $SwitchMap$org$jboss$netty$handler$ssl$SslProvider
org.jboss.netty.handler.ssl.SslHandler -> org.jboss.netty.handler.ssl.SslHandler:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.nio.ByteBuffer EMPTY_BUFFER -> EMPTY_BUFFER
    java.util.regex.Pattern IGNORABLE_CLASS_IN_STACK -> IGNORABLE_CLASS_IN_STACK
    java.util.regex.Pattern IGNORABLE_ERROR_MESSAGE -> IGNORABLE_ERROR_MESSAGE
    org.jboss.netty.handler.ssl.SslBufferPool defaultBufferPool -> defaultBufferPool
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    javax.net.ssl.SSLEngine engine -> engine
    org.jboss.netty.handler.ssl.SslBufferPool bufferPool -> bufferPool
    boolean startTls -> startTls
    boolean enableRenegotiation -> enableRenegotiation
    java.lang.Object handshakeLock -> handshakeLock
    boolean handshaking -> handshaking
    boolean handshaken -> handshaken
    org.jboss.netty.channel.ChannelFuture handshakeFuture -> handshakeFuture
    int sentFirstMessage -> sentFirstMessage
    int sentCloseNotify -> sentCloseNotify
    int closedOutboundAndChannel -> closedOutboundAndChannel
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater SENT_FIRST_MESSAGE_UPDATER -> SENT_FIRST_MESSAGE_UPDATER
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater SENT_CLOSE_NOTIFY_UPDATER -> SENT_CLOSE_NOTIFY_UPDATER
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater CLOSED_OUTBOUND_AND_CHANNEL_UPDATER -> CLOSED_OUTBOUND_AND_CHANNEL_UPDATER
    int ignoreClosedChannelException -> ignoreClosedChannelException
    java.lang.Object ignoreClosedChannelExceptionLock -> ignoreClosedChannelExceptionLock
    java.util.Queue pendingUnencryptedWrites -> pendingUnencryptedWrites
    org.jboss.netty.util.internal.NonReentrantLock pendingUnencryptedWritesLock -> pendingUnencryptedWritesLock
    java.util.Queue pendingEncryptedWrites -> pendingEncryptedWrites
    org.jboss.netty.util.internal.NonReentrantLock pendingEncryptedWritesLock -> pendingEncryptedWritesLock
    boolean issueHandshake -> issueHandshake
    boolean writeBeforeHandshakeDone -> writeBeforeHandshakeDone
    org.jboss.netty.handler.ssl.SslHandler$SSLEngineInboundCloseFuture sslEngineCloseFuture -> sslEngineCloseFuture
    boolean closeOnSslException -> closeOnSslException
    int packetLength -> packetLength
    org.jboss.netty.util.Timer timer -> timer
    long handshakeTimeoutInMillis -> handshakeTimeoutInMillis
    org.jboss.netty.util.Timeout handshakeTimeout -> handshakeTimeout
    boolean $assertionsDisabled -> $assertionsDisabled
    org.jboss.netty.handler.ssl.SslBufferPool getDefaultBufferPool() -> getDefaultBufferPool
    javax.net.ssl.SSLEngine getEngine() -> getEngine
    org.jboss.netty.channel.ChannelFuture handshake() -> handshake
    org.jboss.netty.channel.ChannelFuture close() -> close
    boolean isEnableRenegotiation() -> isEnableRenegotiation
    void setEnableRenegotiation(boolean) -> setEnableRenegotiation
    void setIssueHandshake(boolean) -> setIssueHandshake
    boolean isIssueHandshake() -> isIssueHandshake
    org.jboss.netty.channel.ChannelFuture getSSLEngineInboundCloseFuture() -> getSSLEngineInboundCloseFuture
    long getHandshakeTimeout() -> getHandshakeTimeout
    void setCloseOnSSLException(boolean) -> setCloseOnSSLException
    boolean getCloseOnSSLException() -> getCloseOnSSLException
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    void cancelHandshakeTimeout() -> cancelHandshakeTimeout
    void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelDisconnected
    void closeEngine() -> closeEngine
    void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent) -> exceptionCaught
    boolean ignoreException(java.lang.Throwable) -> ignoreException
    boolean isEncrypted(org.jboss.netty.buffer.ChannelBuffer) -> isEncrypted
    int getEncryptedPacketLength(org.jboss.netty.buffer.ChannelBuffer,int) -> getEncryptedPacketLength
    java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer) -> decode
    short getShort(org.jboss.netty.buffer.ChannelBuffer,int) -> getShort
    void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel) -> wrap
    void offerEncryptedWriteRequest(org.jboss.netty.channel.MessageEvent) -> offerEncryptedWriteRequest
    void flushPendingEncryptedWrites(org.jboss.netty.channel.ChannelHandlerContext) -> flushPendingEncryptedWrites
    org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel) -> wrapNonAppData
    void unwrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,boolean) -> unwrapNonAppData
    org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.nio.ByteBuffer,int,boolean) -> unwrap
    void handleRenegotiation(javax.net.ssl.SSLEngineResult$HandshakeStatus) -> handleRenegotiation
    void runDelegatedTasks() -> runDelegatedTasks
    boolean setHandshakeSuccessIfStillHandshaking(org.jboss.netty.channel.Channel) -> setHandshakeSuccessIfStillHandshaking
    void setHandshakeSuccess(org.jboss.netty.channel.Channel) -> setHandshakeSuccess
    void setHandshakeFailure(org.jboss.netty.channel.Channel,javax.net.ssl.SSLException) -> setHandshakeFailure
    void closeOutboundAndChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> closeOutboundAndChannel
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
    void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelConnected
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    org.jboss.netty.channel.ChannelFuture access$000(org.jboss.netty.handler.ssl.SslHandler) -> access$000
    long access$100(org.jboss.netty.handler.ssl.SslHandler) -> access$100
    void access$200(org.jboss.netty.handler.ssl.SslHandler,org.jboss.netty.channel.Channel,javax.net.ssl.SSLException) -> access$200
    boolean access$300(org.jboss.netty.handler.ssl.SslHandler) -> access$300
    org.jboss.netty.util.internal.NonReentrantLock access$400(org.jboss.netty.handler.ssl.SslHandler) -> access$400
    java.util.Queue access$500(org.jboss.netty.handler.ssl.SslHandler) -> access$500
    java.util.Queue access$600(org.jboss.netty.handler.ssl.SslHandler) -> access$600
    org.jboss.netty.channel.ChannelHandlerContext access$700(org.jboss.netty.handler.ssl.SslHandler) -> access$700
org.jboss.netty.handler.ssl.SslHandler$1 -> org.jboss.netty.handler.ssl.SslHandler$1:
    org.jboss.netty.channel.Channel val$channel -> val$channel
    org.jboss.netty.handler.ssl.SslHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.ssl.SslHandler$2 -> org.jboss.netty.handler.ssl.SslHandler$2:
    org.jboss.netty.channel.ChannelFuture val$hsFuture -> val$hsFuture
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.channel.Channel val$channel -> val$channel
    org.jboss.netty.handler.ssl.SslHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.ssl.SslHandler$3 -> org.jboss.netty.handler.ssl.SslHandler$3:
    org.jboss.netty.handler.ssl.SslHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.ssl.SslHandler$4 -> org.jboss.netty.handler.ssl.SslHandler$4:
    org.jboss.netty.channel.ChannelHandlerContext val$context -> val$context
    org.jboss.netty.channel.ChannelStateEvent val$e -> val$e
    org.jboss.netty.handler.ssl.SslHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.ssl.SslHandler$5 -> org.jboss.netty.handler.ssl.SslHandler$5:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.channel.ChannelStateEvent val$e -> val$e
    org.jboss.netty.handler.ssl.SslHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.ssl.SslHandler$6 -> org.jboss.netty.handler.ssl.SslHandler$6:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.handler.ssl.SslHandler this$0 -> this$0
    void run() -> run
org.jboss.netty.handler.ssl.SslHandler$7 -> org.jboss.netty.handler.ssl.SslHandler$7:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
    int[] $SwitchMap$javax$net$ssl$SSLEngineResult$HandshakeStatus -> $SwitchMap$javax$net$ssl$SSLEngineResult$HandshakeStatus
    int[] $SwitchMap$javax$net$ssl$SSLEngineResult$Status -> $SwitchMap$javax$net$ssl$SSLEngineResult$Status
org.jboss.netty.handler.ssl.SslHandler$ClosingChannelFutureListener -> org.jboss.netty.handler.ssl.SslHandler$ClosingChannelFutureListener:
    org.jboss.netty.channel.ChannelHandlerContext context -> context
    org.jboss.netty.channel.ChannelStateEvent e -> e
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.ssl.SslHandler$PendingWrite -> org.jboss.netty.handler.ssl.SslHandler$PendingWrite:
    org.jboss.netty.channel.ChannelFuture future -> future
    java.nio.ByteBuffer outAppBuf -> outAppBuf
org.jboss.netty.handler.ssl.SslHandler$SSLEngineInboundCloseFuture -> org.jboss.netty.handler.ssl.SslHandler$SSLEngineInboundCloseFuture:
    org.jboss.netty.handler.ssl.SslHandler this$0 -> this$0
    void setClosed() -> setClosed
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    boolean setSuccess() -> setSuccess
    boolean setFailure(java.lang.Throwable) -> setFailure
org.jboss.netty.handler.ssl.SslProvider -> org.jboss.netty.handler.ssl.SslProvider:
    org.jboss.netty.handler.ssl.SslProvider JDK -> JDK
    org.jboss.netty.handler.ssl.SslProvider OPENSSL -> OPENSSL
    org.jboss.netty.handler.ssl.SslProvider[] $VALUES -> $VALUES
    org.jboss.netty.handler.ssl.SslProvider[] values() -> values
    org.jboss.netty.handler.ssl.SslProvider valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.ssl.util.BouncyCastleSelfSignedCertGenerator -> org.jboss.netty.handler.ssl.util.BouncyCastleSelfSignedCertGenerator:
    java.security.Provider PROVIDER -> PROVIDER
    java.lang.String[] generate(java.lang.String,java.security.KeyPair,java.security.SecureRandom) -> generate
org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory -> org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory:
    java.util.regex.Pattern FINGERPRINT_PATTERN -> FINGERPRINT_PATTERN
    java.util.regex.Pattern FINGERPRINT_STRIP_PATTERN -> FINGERPRINT_STRIP_PATTERN
    int SHA1_BYTE_LEN -> SHA1_BYTE_LEN
    int SHA1_HEX_LEN -> SHA1_HEX_LEN
    java.lang.ThreadLocal tlmd -> tlmd
    javax.net.ssl.TrustManager tm -> tm
    byte[][] fingerprints -> fingerprints
    byte[][] toFingerprintArray(java.lang.Iterable) -> toFingerprintArray
    void engineInit(java.security.KeyStore) -> engineInit
    void engineInit(javax.net.ssl.ManagerFactoryParameters) -> engineInit
    javax.net.ssl.TrustManager[] engineGetTrustManagers() -> engineGetTrustManagers
    byte[][] access$000(org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory) -> access$000
    java.lang.ThreadLocal access$100() -> access$100
org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory$1 -> org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory$1:
    java.security.MessageDigest initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory$2 -> org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:
    org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory this$0 -> this$0
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    void checkTrusted(java.lang.String,java.security.cert.X509Certificate[]) -> checkTrusted
    byte[] fingerprint(java.security.cert.X509Certificate) -> fingerprint
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
org.jboss.netty.handler.ssl.util.InsecureTrustManagerFactory -> org.jboss.netty.handler.ssl.util.InsecureTrustManagerFactory:
    org.jboss.netty.logging.InternalLogger logger -> logger
    javax.net.ssl.TrustManagerFactory INSTANCE -> INSTANCE
    javax.net.ssl.TrustManager tm -> tm
    void engineInit(java.security.KeyStore) -> engineInit
    void engineInit(javax.net.ssl.ManagerFactoryParameters) -> engineInit
    javax.net.ssl.TrustManager[] engineGetTrustManagers() -> engineGetTrustManagers
    org.jboss.netty.logging.InternalLogger access$000() -> access$000
org.jboss.netty.handler.ssl.util.InsecureTrustManagerFactory$1 -> org.jboss.netty.handler.ssl.util.InsecureTrustManagerFactory$1:
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
org.jboss.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator -> org.jboss.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator:
    java.lang.String[] generate(java.lang.String,java.security.KeyPair,java.security.SecureRandom) -> generate
org.jboss.netty.handler.ssl.util.SelfSignedCertificate -> org.jboss.netty.handler.ssl.util.SelfSignedCertificate:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.Date NOT_BEFORE -> NOT_BEFORE
    java.util.Date NOT_AFTER -> NOT_AFTER
    java.io.File certificate -> certificate
    java.io.File privateKey -> privateKey
    java.io.File certificate() -> certificate
    java.io.File privateKey() -> privateKey
    void delete() -> delete
    java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate) -> newSelfSignedCertificate
    void safeDelete(java.io.File) -> safeDelete
    void safeClose(java.io.File,java.io.OutputStream) -> safeClose
org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory -> org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory:
    java.security.Provider PROVIDER -> PROVIDER
    java.lang.ThreadLocal CURRENT_SPI -> CURRENT_SPI
    void engineInit(java.security.KeyStore) -> engineInit
    void engineInit(javax.net.ssl.ManagerFactoryParameters) -> engineInit
    javax.net.ssl.TrustManager[] engineGetTrustManagers() -> engineGetTrustManagers
org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory$1 -> org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory$1:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory$2 -> org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory$2:
    org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi -> org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:
    org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory parent -> parent
    void init(org.jboss.netty.handler.ssl.util.SimpleTrustManagerFactory) -> init
    void engineInit(java.security.KeyStore) -> engineInit
    void engineInit(javax.net.ssl.ManagerFactoryParameters) -> engineInit
    javax.net.ssl.TrustManager[] engineGetTrustManagers() -> engineGetTrustManagers
org.jboss.netty.handler.ssl.util.ThreadLocalInsecureRandom -> org.jboss.netty.handler.ssl.util.ThreadLocalInsecureRandom:
    long serialVersionUID -> serialVersionUID
    java.security.SecureRandom INSTANCE -> INSTANCE
    java.security.SecureRandom current() -> current
    java.lang.String getAlgorithm() -> getAlgorithm
    void setSeed(byte[]) -> setSeed
    void setSeed(long) -> setSeed
    void nextBytes(byte[]) -> nextBytes
    byte[] generateSeed(int) -> generateSeed
    int nextInt() -> nextInt
    int nextInt(int) -> nextInt
    boolean nextBoolean() -> nextBoolean
    long nextLong() -> nextLong
    float nextFloat() -> nextFloat
    double nextDouble() -> nextDouble
    double nextGaussian() -> nextGaussian
    java.util.Random random() -> random
org.jboss.netty.handler.stream.ChunkedFile -> org.jboss.netty.handler.stream.ChunkedFile:
    java.io.RandomAccessFile file -> file
    long startOffset -> startOffset
    long endOffset -> endOffset
    int chunkSize -> chunkSize
    long offset -> offset
    long getStartOffset() -> getStartOffset
    long getEndOffset() -> getEndOffset
    long getCurrentOffset() -> getCurrentOffset
    boolean hasNextChunk() -> hasNextChunk
    boolean isEndOfInput() -> isEndOfInput
    void close() -> close
    java.lang.Object nextChunk() -> nextChunk
org.jboss.netty.handler.stream.ChunkedInput -> org.jboss.netty.handler.stream.ChunkedInput:
    boolean hasNextChunk() -> hasNextChunk
    java.lang.Object nextChunk() -> nextChunk
    boolean isEndOfInput() -> isEndOfInput
    void close() -> close
org.jboss.netty.handler.stream.ChunkedNioFile -> org.jboss.netty.handler.stream.ChunkedNioFile:
    java.nio.channels.FileChannel in -> in
    long startOffset -> startOffset
    long endOffset -> endOffset
    int chunkSize -> chunkSize
    long offset -> offset
    long getStartOffset() -> getStartOffset
    long getEndOffset() -> getEndOffset
    long getCurrentOffset() -> getCurrentOffset
    boolean hasNextChunk() -> hasNextChunk
    boolean isEndOfInput() -> isEndOfInput
    void close() -> close
    java.lang.Object nextChunk() -> nextChunk
org.jboss.netty.handler.stream.ChunkedNioStream -> org.jboss.netty.handler.stream.ChunkedNioStream:
    java.nio.channels.ReadableByteChannel in -> in
    int chunkSize -> chunkSize
    long offset -> offset
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    long getTransferredBytes() -> getTransferredBytes
    boolean hasNextChunk() -> hasNextChunk
    boolean isEndOfInput() -> isEndOfInput
    void close() -> close
    java.lang.Object nextChunk() -> nextChunk
org.jboss.netty.handler.stream.ChunkedStream -> org.jboss.netty.handler.stream.ChunkedStream:
    int DEFAULT_CHUNK_SIZE -> DEFAULT_CHUNK_SIZE
    java.io.PushbackInputStream in -> in
    int chunkSize -> chunkSize
    long offset -> offset
    long getTransferredBytes() -> getTransferredBytes
    boolean hasNextChunk() -> hasNextChunk
    boolean isEndOfInput() -> isEndOfInput
    void close() -> close
    java.lang.Object nextChunk() -> nextChunk
org.jboss.netty.handler.stream.ChunkedWriteHandler -> org.jboss.netty.handler.stream.ChunkedWriteHandler:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.Queue queue -> queue
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    java.util.concurrent.atomic.AtomicBoolean flush -> flush
    org.jboss.netty.channel.MessageEvent currentEvent -> currentEvent
    boolean flushNeeded -> flushNeeded
    boolean $assertionsDisabled -> $assertionsDisabled
    void resumeTransfer() -> resumeTransfer
    void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleDownstream
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void discard(org.jboss.netty.channel.ChannelHandlerContext,boolean) -> discard
    void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean) -> flush
    void closeInput(org.jboss.netty.handler.stream.ChunkedInput) -> closeInput
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
org.jboss.netty.handler.stream.ChunkedWriteHandler$1 -> org.jboss.netty.handler.stream.ChunkedWriteHandler$1:
    org.jboss.netty.handler.stream.ChunkedInput val$chunks -> val$chunks
    org.jboss.netty.handler.stream.ChunkedWriteHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.stream.ChunkedWriteHandler$2 -> org.jboss.netty.handler.stream.ChunkedWriteHandler$2:
    org.jboss.netty.channel.MessageEvent val$currentEvent -> val$currentEvent
    org.jboss.netty.handler.stream.ChunkedWriteHandler this$0 -> this$0
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.stream.ChunkedWriteHandler$3 -> org.jboss.netty.handler.stream.ChunkedWriteHandler$3:
    int[] $SwitchMap$org$jboss$netty$channel$ChannelState -> $SwitchMap$org$jboss$netty$channel$ChannelState
org.jboss.netty.handler.timeout.DefaultIdleStateEvent -> org.jboss.netty.handler.timeout.DefaultIdleStateEvent:
    org.jboss.netty.channel.Channel channel -> channel
    org.jboss.netty.handler.timeout.IdleState state -> state
    long lastActivityTimeMillis -> lastActivityTimeMillis
    org.jboss.netty.channel.Channel getChannel() -> getChannel
    org.jboss.netty.channel.ChannelFuture getFuture() -> getFuture
    org.jboss.netty.handler.timeout.IdleState getState() -> getState
    long getLastActivityTimeMillis() -> getLastActivityTimeMillis
    java.lang.String toString() -> toString
org.jboss.netty.handler.timeout.IdleState -> org.jboss.netty.handler.timeout.IdleState:
    org.jboss.netty.handler.timeout.IdleState READER_IDLE -> READER_IDLE
    org.jboss.netty.handler.timeout.IdleState WRITER_IDLE -> WRITER_IDLE
    org.jboss.netty.handler.timeout.IdleState ALL_IDLE -> ALL_IDLE
    org.jboss.netty.handler.timeout.IdleState[] $VALUES -> $VALUES
    org.jboss.netty.handler.timeout.IdleState[] values() -> values
    org.jboss.netty.handler.timeout.IdleState valueOf(java.lang.String) -> valueOf
org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler -> org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler:
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent) -> channelIdle
org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler -> org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler:
    void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent) -> handleUpstream
    void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent) -> channelIdle
org.jboss.netty.handler.timeout.IdleStateEvent -> org.jboss.netty.handler.timeout.IdleStateEvent:
    org.jboss.netty.handler.timeout.IdleState getState() -> getState
    long getLastActivityTimeMillis() -> getLastActivityTimeMillis
org.jboss.netty.handler.timeout.IdleStateHandler -> org.jboss.netty.handler.timeout.IdleStateHandler:
    org.jboss.netty.util.Timer timer -> timer
    long readerIdleTimeMillis -> readerIdleTimeMillis
    long writerIdleTimeMillis -> writerIdleTimeMillis
    long allIdleTimeMillis -> allIdleTimeMillis
    long getReaderIdleTimeInMillis() -> getReaderIdleTimeInMillis
    long getWriterIdleTimeInMillis() -> getWriterIdleTimeInMillis
    long getAllIdleTimeInMillis() -> getAllIdleTimeInMillis
    void releaseExternalResources() -> releaseExternalResources
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
    void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelOpen
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent) -> writeComplete
    void initialize(org.jboss.netty.channel.ChannelHandlerContext) -> initialize
    void destroy(org.jboss.netty.channel.ChannelHandlerContext) -> destroy
    org.jboss.netty.handler.timeout.IdleStateHandler$State state(org.jboss.netty.channel.ChannelHandlerContext) -> state
    void fireChannelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long) -> fireChannelIdle
    void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long) -> channelIdle
    void access$000(org.jboss.netty.handler.timeout.IdleStateHandler,org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long) -> access$000
org.jboss.netty.handler.timeout.IdleStateHandler$1 -> org.jboss.netty.handler.timeout.IdleStateHandler$1:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.handler.timeout.IdleState val$state -> val$state
    long val$lastActivityTimeMillis -> val$lastActivityTimeMillis
    org.jboss.netty.handler.timeout.IdleStateHandler this$0 -> this$0
    void run() -> run
org.jboss.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask -> org.jboss.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask:
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.handler.timeout.IdleStateHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask -> org.jboss.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask:
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.handler.timeout.IdleStateHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.timeout.IdleStateHandler$State -> org.jboss.netty.handler.timeout.IdleStateHandler$State:
    int state -> state
    org.jboss.netty.util.Timeout readerIdleTimeout -> readerIdleTimeout
    long lastReadTime -> lastReadTime
    org.jboss.netty.util.Timeout writerIdleTimeout -> writerIdleTimeout
    long lastWriteTime -> lastWriteTime
    org.jboss.netty.util.Timeout allIdleTimeout -> allIdleTimeout
org.jboss.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask -> org.jboss.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask:
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.handler.timeout.IdleStateHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.timeout.ReadTimeoutException -> org.jboss.netty.handler.timeout.ReadTimeoutException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.timeout.ReadTimeoutHandler -> org.jboss.netty.handler.timeout.ReadTimeoutHandler:
    org.jboss.netty.handler.timeout.ReadTimeoutException EXCEPTION -> EXCEPTION
    org.jboss.netty.util.Timer timer -> timer
    long timeoutMillis -> timeoutMillis
    void releaseExternalResources() -> releaseExternalResources
    void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext) -> beforeAdd
    void afterAdd(org.jboss.netty.channel.ChannelHandlerContext) -> afterAdd
    void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext) -> beforeRemove
    void afterRemove(org.jboss.netty.channel.ChannelHandlerContext) -> afterRemove
    void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelOpen
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    void initialize(org.jboss.netty.channel.ChannelHandlerContext) -> initialize
    void destroy(org.jboss.netty.channel.ChannelHandlerContext) -> destroy
    org.jboss.netty.handler.timeout.ReadTimeoutHandler$State state(org.jboss.netty.channel.ChannelHandlerContext) -> state
    void readTimedOut(org.jboss.netty.channel.ChannelHandlerContext) -> readTimedOut
org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask -> org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.handler.timeout.ReadTimeoutHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
    void fireReadTimedOut(org.jboss.netty.channel.ChannelHandlerContext) -> fireReadTimedOut
org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask$1 -> org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask$1:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask this$1 -> this$1
    void run() -> run
org.jboss.netty.handler.timeout.ReadTimeoutHandler$State -> org.jboss.netty.handler.timeout.ReadTimeoutHandler$State:
    int state -> state
    org.jboss.netty.util.Timeout timeout -> timeout
    long lastReadTime -> lastReadTime
org.jboss.netty.handler.timeout.TimeoutException -> org.jboss.netty.handler.timeout.TimeoutException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.timeout.WriteTimeoutException -> org.jboss.netty.handler.timeout.WriteTimeoutException:
    long serialVersionUID -> serialVersionUID
org.jboss.netty.handler.timeout.WriteTimeoutHandler -> org.jboss.netty.handler.timeout.WriteTimeoutHandler:
    org.jboss.netty.handler.timeout.WriteTimeoutException EXCEPTION -> EXCEPTION
    org.jboss.netty.util.Timer timer -> timer
    long timeoutMillis -> timeoutMillis
    void releaseExternalResources() -> releaseExternalResources
    long getTimeoutMillis(org.jboss.netty.channel.MessageEvent) -> getTimeoutMillis
    void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> writeRequested
    void writeTimedOut(org.jboss.netty.channel.ChannelHandlerContext) -> writeTimedOut
org.jboss.netty.handler.timeout.WriteTimeoutHandler$TimeoutCanceller -> org.jboss.netty.handler.timeout.WriteTimeoutHandler$TimeoutCanceller:
    org.jboss.netty.util.Timeout timeout -> timeout
    void operationComplete(org.jboss.netty.channel.ChannelFuture) -> operationComplete
org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask -> org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask:
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.channel.ChannelFuture future -> future
    org.jboss.netty.handler.timeout.WriteTimeoutHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
    void fireWriteTimeOut(org.jboss.netty.channel.ChannelHandlerContext) -> fireWriteTimeOut
org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask$1 -> org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask$1:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask this$1 -> this$1
    void run() -> run
org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler -> org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:
    org.jboss.netty.logging.InternalLogger logger -> logger
    long DEFAULT_CHECK_INTERVAL -> DEFAULT_CHECK_INTERVAL
    long DEFAULT_MAX_TIME -> DEFAULT_MAX_TIME
    long DEFAULT_MAX_SIZE -> DEFAULT_MAX_SIZE
    long MINIMAL_WAIT -> MINIMAL_WAIT
    int CHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX -> CHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX
    int GLOBAL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX -> GLOBAL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX
    int GLOBALCHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX -> GLOBALCHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX
    org.jboss.netty.handler.traffic.TrafficCounter trafficCounter -> trafficCounter
    org.jboss.netty.util.ObjectSizeEstimator objectSizeEstimator -> objectSizeEstimator
    org.jboss.netty.util.Timer timer -> timer
    org.jboss.netty.util.Timeout timeout -> timeout
    long writeLimit -> writeLimit
    long readLimit -> readLimit
    long checkInterval -> checkInterval
    long maxTime -> maxTime
    long maxWriteDelay -> maxWriteDelay
    long maxWriteSize -> maxWriteSize
    java.util.concurrent.atomic.AtomicBoolean release -> release
    int index -> index
    int userDefinedWritabilityIndex() -> userDefinedWritabilityIndex
    void init(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer,long,long,long,long) -> init
    void setTrafficCounter(org.jboss.netty.handler.traffic.TrafficCounter) -> setTrafficCounter
    void configure(long,long,long) -> configure
    void configure(long,long) -> configure
    void configure(long) -> configure
    long getWriteLimit() -> getWriteLimit
    void setWriteLimit(long) -> setWriteLimit
    long getReadLimit() -> getReadLimit
    void setReadLimit(long) -> setReadLimit
    long getCheckInterval() -> getCheckInterval
    void setCheckInterval(long) -> setCheckInterval
    long getMaxTimeWait() -> getMaxTimeWait
    void setMaxTimeWait(long) -> setMaxTimeWait
    long getMaxWriteDelay() -> getMaxWriteDelay
    void setMaxWriteDelay(long) -> setMaxWriteDelay
    long getMaxWriteSize() -> getMaxWriteSize
    void setMaxWriteSize(long) -> setMaxWriteSize
    void doAccounting(org.jboss.netty.handler.traffic.TrafficCounter) -> doAccounting
    void releaseReadSuspended(org.jboss.netty.channel.ChannelHandlerContext) -> releaseReadSuspended
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    long checkWaitReadTime(org.jboss.netty.channel.ChannelHandlerContext,long,long) -> checkWaitReadTime
    void informReadOperation(org.jboss.netty.channel.ChannelHandlerContext,long) -> informReadOperation
    void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> writeRequested
    void internalSubmitWrite(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> internalSubmitWrite
    void submitWrite(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,long) -> submitWrite
    void submitWrite(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,long,long,long) -> submitWrite
    void setWritable(org.jboss.netty.channel.ChannelHandlerContext,boolean) -> setWritable
    void checkWriteSuspend(org.jboss.netty.channel.ChannelHandlerContext,long,long) -> checkWriteSuspend
    void releaseWriteSuspended(org.jboss.netty.channel.ChannelHandlerContext) -> releaseWriteSuspended
    org.jboss.netty.handler.traffic.TrafficCounter getTrafficCounter() -> getTrafficCounter
    void releaseExternalResources() -> releaseExternalResources
    org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$ReadWriteStatus checkAttachment(org.jboss.netty.channel.ChannelHandlerContext) -> checkAttachment
    void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelConnected
    long calculateSize(java.lang.Object) -> calculateSize
    java.lang.String toString() -> toString
org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$ReadWriteStatus -> org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$ReadWriteStatus:
    boolean readSuspend -> readSuspend
    org.jboss.netty.util.TimerTask reopenReadTimerTask -> reopenReadTimerTask
org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask -> org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$SimpleObjectSizeEstimator -> org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$SimpleObjectSizeEstimator:
    int estimateSize(java.lang.Object) -> estimateSize
org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler -> org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:
    java.util.List messagesQueue -> messagesQueue
    long queueSize -> queueSize
    org.jboss.netty.util.Timeout writeTimeout -> writeTimeout
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    void submitWrite(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,long,long,long) -> submitWrite
    void sendAllValid(org.jboss.netty.channel.ChannelHandlerContext,long) -> sendAllValid
    long queueSize() -> queueSize
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelConnected
    void releaseExternalResources() -> releaseExternalResources
    void access$100(org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler,org.jboss.netty.channel.ChannelHandlerContext,long) -> access$100
org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler$1 -> org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler$1:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    long val$futureNow -> val$futureNow
    org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend -> org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend:
    long relativeTimeAction -> relativeTimeAction
    org.jboss.netty.channel.MessageEvent toSend -> toSend
org.jboss.netty.handler.traffic.GlobalChannelTrafficCounter -> org.jboss.netty.handler.traffic.GlobalChannelTrafficCounter:
    void start() -> start
    void stop() -> stop
    void resetCumulativeTime() -> resetCumulativeTime
org.jboss.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask -> org.jboss.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:
    org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler trafficShapingHandler1 -> trafficShapingHandler1
    org.jboss.netty.handler.traffic.TrafficCounter counter -> counter
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler -> org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.concurrent.ConcurrentMap channelQueues -> channelQueues
    java.util.concurrent.atomic.AtomicLong queuesSize -> queuesSize
    java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes -> cumulativeWrittenBytes
    java.util.concurrent.atomic.AtomicLong cumulativeReadBytes -> cumulativeReadBytes
    long maxGlobalWriteSize -> maxGlobalWriteSize
    long writeChannelLimit -> writeChannelLimit
    long readChannelLimit -> readChannelLimit
    float DEFAULT_DEVIATION -> DEFAULT_DEVIATION
    float MAX_DEVIATION -> MAX_DEVIATION
    float DEFAULT_SLOWDOWN -> DEFAULT_SLOWDOWN
    float DEFAULT_ACCELERATION -> DEFAULT_ACCELERATION
    float maxDeviation -> maxDeviation
    float accelerationFactor -> accelerationFactor
    float slowDownFactor -> slowDownFactor
    boolean readDeviationActive -> readDeviationActive
    boolean writeDeviationActive -> writeDeviationActive
    void createGlobalTrafficCounter(org.jboss.netty.util.Timer) -> createGlobalTrafficCounter
    int userDefinedWritabilityIndex() -> userDefinedWritabilityIndex
    float maxDeviation() -> maxDeviation
    float accelerationFactor() -> accelerationFactor
    float slowDownFactor() -> slowDownFactor
    void setMaxDeviation(float,float,float) -> setMaxDeviation
    void computeDeviationCumulativeBytes() -> computeDeviationCumulativeBytes
    void doAccounting(org.jboss.netty.handler.traffic.TrafficCounter) -> doAccounting
    long computeBalancedWait(float,float,long) -> computeBalancedWait
    long getMaxGlobalWriteSize() -> getMaxGlobalWriteSize
    void setMaxGlobalWriteSize(long) -> setMaxGlobalWriteSize
    long queuesSize() -> queuesSize
    void configureChannel(long,long) -> configureChannel
    long getWriteChannelLimit() -> getWriteChannelLimit
    void setWriteChannelLimit(long) -> setWriteChannelLimit
    long getReadChannelLimit() -> getReadChannelLimit
    void setReadChannelLimit(long) -> setReadChannelLimit
    void release() -> release
    org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel getOrSetPerChannel(org.jboss.netty.channel.ChannelHandlerContext) -> getOrSetPerChannel
    void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelConnected
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> messageReceived
    long checkWaitReadTime(org.jboss.netty.channel.ChannelHandlerContext,long,long) -> checkWaitReadTime
    void informReadOperation(org.jboss.netty.channel.ChannelHandlerContext,long) -> informReadOperation
    long maximumCumulativeWrittenBytes() -> maximumCumulativeWrittenBytes
    long maximumCumulativeReadBytes() -> maximumCumulativeReadBytes
    java.util.Collection channelTrafficCounters() -> channelTrafficCounters
    void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent) -> writeRequested
    void submitWrite(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,long,long,long) -> submitWrite
    void sendAllValid(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long) -> sendAllValid
    java.lang.String toString() -> toString
    void access$100(org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler,org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long) -> access$100
org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1 -> org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1:
    org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1 -> org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:
    java.util.Iterator iter -> iter
    org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1 this$1 -> this$1
    boolean hasNext() -> hasNext
    org.jboss.netty.handler.traffic.TrafficCounter next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2 -> org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel val$forSchedule -> val$forSchedule
    long val$futureNow -> val$futureNow
    org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel -> org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel:
    java.util.List messagesQueue -> messagesQueue
    org.jboss.netty.handler.traffic.TrafficCounter channelTrafficCounter -> channelTrafficCounter
    long queueSize -> queueSize
    long lastWriteTimestamp -> lastWriteTimestamp
    long lastReadTimestamp -> lastReadTimestamp
org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend -> org.jboss.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend:
    long relativeTimeAction -> relativeTimeAction
    org.jboss.netty.channel.MessageEvent toSend -> toSend
    long size -> size
org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler -> org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:
    java.util.concurrent.ConcurrentMap channelQueues -> channelQueues
    java.util.concurrent.atomic.AtomicLong queuesSize -> queuesSize
    long maxGlobalWriteSize -> maxGlobalWriteSize
    void createGlobalTrafficCounter() -> createGlobalTrafficCounter
    long getMaxGlobalWriteSize() -> getMaxGlobalWriteSize
    void setMaxGlobalWriteSize(long) -> setMaxGlobalWriteSize
    long queuesSize() -> queuesSize
    org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel getOrSetPerChannel(org.jboss.netty.channel.ChannelHandlerContext) -> getOrSetPerChannel
    long checkWaitReadTime(org.jboss.netty.channel.ChannelHandlerContext,long,long) -> checkWaitReadTime
    void informReadOperation(org.jboss.netty.channel.ChannelHandlerContext,long) -> informReadOperation
    void submitWrite(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,long,long,long) -> submitWrite
    void sendAllValid(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long) -> sendAllValid
    void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelConnected
    void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent) -> channelClosed
    void releaseExternalResources() -> releaseExternalResources
    void access$200(org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler,org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long) -> access$200
org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$1 -> org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$1:
    org.jboss.netty.channel.ChannelHandlerContext val$ctx -> val$ctx
    org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel val$forSchedule -> val$forSchedule
    long val$futureNow -> val$futureNow
    org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler this$0 -> this$0
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel -> org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel:
    java.util.List messagesQueue -> messagesQueue
    org.jboss.netty.channel.ChannelHandlerContext ctx -> ctx
    long queueSize -> queueSize
    long lastWriteTimestamp -> lastWriteTimestamp
    long lastReadTimestamp -> lastReadTimestamp
org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend -> org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend:
    long relativeTimeAction -> relativeTimeAction
    org.jboss.netty.channel.MessageEvent toSend -> toSend
    long size -> size
org.jboss.netty.handler.traffic.TrafficCounter -> org.jboss.netty.handler.traffic.TrafficCounter:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.concurrent.atomic.AtomicLong currentWrittenBytes -> currentWrittenBytes
    java.util.concurrent.atomic.AtomicLong currentReadBytes -> currentReadBytes
    long writingTime -> writingTime
    long readingTime -> readingTime
    java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes -> cumulativeWrittenBytes
    java.util.concurrent.atomic.AtomicLong cumulativeReadBytes -> cumulativeReadBytes
    long lastCumulativeTime -> lastCumulativeTime
    long lastWriteThroughput -> lastWriteThroughput
    long lastReadThroughput -> lastReadThroughput
    java.util.concurrent.atomic.AtomicLong lastTime -> lastTime
    long lastWrittenBytes -> lastWrittenBytes
    long lastReadBytes -> lastReadBytes
    long lastWritingTime -> lastWritingTime
    long lastReadingTime -> lastReadingTime
    java.util.concurrent.atomic.AtomicLong realWrittenBytes -> realWrittenBytes
    long realWriteThroughput -> realWriteThroughput
    java.util.concurrent.atomic.AtomicLong checkInterval -> checkInterval
    java.lang.String name -> name
    org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler trafficShapingHandler -> trafficShapingHandler
    org.jboss.netty.util.Timer timer -> timer
    org.jboss.netty.util.TimerTask timerTask -> timerTask
    org.jboss.netty.util.Timeout timeout -> timeout
    boolean monitorActive -> monitorActive
    long milliSecondFromNano() -> milliSecondFromNano
    void start() -> start
    void stop() -> stop
    void resetAccounting(long) -> resetAccounting
    void configure(long) -> configure
    void bytesRecvFlowControl(long) -> bytesRecvFlowControl
    void bytesWriteFlowControl(long) -> bytesWriteFlowControl
    void bytesRealWriteFlowControl(long) -> bytesRealWriteFlowControl
    long getCheckInterval() -> getCheckInterval
    long getLastReadThroughput() -> getLastReadThroughput
    long getLastWriteThroughput() -> getLastWriteThroughput
    long getLastReadBytes() -> getLastReadBytes
    long getLastWrittenBytes() -> getLastWrittenBytes
    long getCurrentReadBytes() -> getCurrentReadBytes
    long getCurrentWrittenBytes() -> getCurrentWrittenBytes
    long getLastTime() -> getLastTime
    long getCumulativeWrittenBytes() -> getCumulativeWrittenBytes
    long getCumulativeReadBytes() -> getCumulativeReadBytes
    long getLastCumulativeTime() -> getLastCumulativeTime
    java.util.concurrent.atomic.AtomicLong getRealWrittenBytes() -> getRealWrittenBytes
    long getRealWriteThroughput() -> getRealWriteThroughput
    void resetCumulativeTime() -> resetCumulativeTime
    long readTimeToWait(long,long,long) -> readTimeToWait
    long readTimeToWait(long,long,long,long) -> readTimeToWait
    long writeTimeToWait(long,long,long) -> writeTimeToWait
    long writeTimeToWait(long,long,long,long) -> writeTimeToWait
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
org.jboss.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask -> org.jboss.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:
    org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler trafficShapingHandler1 -> trafficShapingHandler1
    org.jboss.netty.handler.traffic.TrafficCounter counter -> counter
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.logging.AbstractInternalLogger -> org.jboss.netty.logging.AbstractInternalLogger:
    boolean isEnabled(org.jboss.netty.logging.InternalLogLevel) -> isEnabled
    void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String,java.lang.Throwable) -> log
    void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String) -> log
org.jboss.netty.logging.AbstractInternalLogger$1 -> org.jboss.netty.logging.AbstractInternalLogger$1:
    int[] $SwitchMap$org$jboss$netty$logging$InternalLogLevel -> $SwitchMap$org$jboss$netty$logging$InternalLogLevel
org.jboss.netty.logging.CommonsLogger -> org.jboss.netty.logging.CommonsLogger:
    org.apache.commons.logging.Log logger -> logger
    java.lang.String loggerName -> loggerName
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    java.lang.String toString() -> toString
org.jboss.netty.logging.CommonsLoggerFactory -> org.jboss.netty.logging.CommonsLoggerFactory:
    org.jboss.netty.logging.InternalLogger newInstance(java.lang.String) -> newInstance
org.jboss.netty.logging.InternalLogLevel -> org.jboss.netty.logging.InternalLogLevel:
    org.jboss.netty.logging.InternalLogLevel DEBUG -> DEBUG
    org.jboss.netty.logging.InternalLogLevel INFO -> INFO
    org.jboss.netty.logging.InternalLogLevel WARN -> WARN
    org.jboss.netty.logging.InternalLogLevel ERROR -> ERROR
    org.jboss.netty.logging.InternalLogLevel[] $VALUES -> $VALUES
    org.jboss.netty.logging.InternalLogLevel[] values() -> values
    org.jboss.netty.logging.InternalLogLevel valueOf(java.lang.String) -> valueOf
org.jboss.netty.logging.InternalLogger -> org.jboss.netty.logging.InternalLogger:
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isEnabled(org.jboss.netty.logging.InternalLogLevel) -> isEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String) -> log
    void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String,java.lang.Throwable) -> log
org.jboss.netty.logging.InternalLoggerFactory -> org.jboss.netty.logging.InternalLoggerFactory:
    org.jboss.netty.logging.InternalLoggerFactory defaultFactory -> defaultFactory
    org.jboss.netty.logging.InternalLoggerFactory getDefaultFactory() -> getDefaultFactory
    void setDefaultFactory(org.jboss.netty.logging.InternalLoggerFactory) -> setDefaultFactory
    org.jboss.netty.logging.InternalLogger getInstance(java.lang.Class) -> getInstance
    org.jboss.netty.logging.InternalLogger getInstance(java.lang.String) -> getInstance
    org.jboss.netty.logging.InternalLogger newInstance(java.lang.String) -> newInstance
org.jboss.netty.logging.JBossLogger -> org.jboss.netty.logging.JBossLogger:
    org.jboss.logging.Logger logger -> logger
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    java.lang.String toString() -> toString
org.jboss.netty.logging.JBossLoggerFactory -> org.jboss.netty.logging.JBossLoggerFactory:
    org.jboss.netty.logging.InternalLogger newInstance(java.lang.String) -> newInstance
org.jboss.netty.logging.JdkLogger -> org.jboss.netty.logging.JdkLogger:
    java.util.logging.Logger logger -> logger
    java.lang.String loggerName -> loggerName
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    java.lang.String toString() -> toString
org.jboss.netty.logging.JdkLoggerFactory -> org.jboss.netty.logging.JdkLoggerFactory:
    org.jboss.netty.logging.InternalLogger newInstance(java.lang.String) -> newInstance
org.jboss.netty.logging.Log4JLogger -> org.jboss.netty.logging.Log4JLogger:
    org.apache.log4j.Logger logger -> logger
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    java.lang.String toString() -> toString
org.jboss.netty.logging.Log4JLoggerFactory -> org.jboss.netty.logging.Log4JLoggerFactory:
    org.jboss.netty.logging.InternalLogger newInstance(java.lang.String) -> newInstance
org.jboss.netty.logging.OsgiLogger -> org.jboss.netty.logging.OsgiLogger:
    org.jboss.netty.logging.OsgiLoggerFactory parent -> parent
    org.jboss.netty.logging.InternalLogger fallback -> fallback
    java.lang.String name -> name
    java.lang.String prefix -> prefix
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    java.lang.String toString() -> toString
org.jboss.netty.logging.OsgiLoggerFactory -> org.jboss.netty.logging.OsgiLoggerFactory:
    org.osgi.util.tracker.ServiceTracker logServiceTracker -> logServiceTracker
    org.jboss.netty.logging.InternalLoggerFactory fallback -> fallback
    org.osgi.service.log.LogService logService -> logService
    org.jboss.netty.logging.InternalLoggerFactory getFallback() -> getFallback
    org.osgi.service.log.LogService getLogService() -> getLogService
    void destroy() -> destroy
    org.jboss.netty.logging.InternalLogger newInstance(java.lang.String) -> newInstance
org.jboss.netty.logging.OsgiLoggerFactory$1 -> org.jboss.netty.logging.OsgiLoggerFactory$1:
    org.jboss.netty.logging.OsgiLoggerFactory this$0 -> this$0
    java.lang.Object addingService(org.osgi.framework.ServiceReference) -> addingService
    void removedService(org.osgi.framework.ServiceReference,java.lang.Object) -> removedService
org.jboss.netty.logging.Slf4JLogger -> org.jboss.netty.logging.Slf4JLogger:
    org.slf4j.Logger logger -> logger
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    java.lang.String toString() -> toString
org.jboss.netty.logging.Slf4JLoggerFactory -> org.jboss.netty.logging.Slf4JLoggerFactory:
    org.jboss.netty.logging.InternalLogger newInstance(java.lang.String) -> newInstance
org.jboss.netty.util.CharsetUtil -> org.jboss.netty.util.CharsetUtil:
    java.nio.charset.Charset UTF_16 -> UTF_16
    java.nio.charset.Charset UTF_16BE -> UTF_16BE
    java.nio.charset.Charset UTF_16LE -> UTF_16LE
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.nio.charset.Charset ISO_8859_1 -> ISO_8859_1
    java.nio.charset.Charset US_ASCII -> US_ASCII
    java.lang.ThreadLocal encoders -> encoders
    java.lang.ThreadLocal decoders -> decoders
    java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset) -> getEncoder
    java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset) -> getDecoder
org.jboss.netty.util.CharsetUtil$1 -> org.jboss.netty.util.CharsetUtil$1:
    java.util.Map initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.jboss.netty.util.CharsetUtil$2 -> org.jboss.netty.util.CharsetUtil$2:
    java.util.Map initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.jboss.netty.util.DebugUtil -> org.jboss.netty.util.DebugUtil:
    boolean DEBUG_ENABLED -> DEBUG_ENABLED
    boolean isDebugEnabled() -> isDebugEnabled
org.jboss.netty.util.DefaultObjectSizeEstimator -> org.jboss.netty.util.DefaultObjectSizeEstimator:
    java.util.concurrent.ConcurrentMap class2size -> class2size
    int estimateSize(java.lang.Object) -> estimateSize
    int estimateSize(java.lang.Class,java.util.Set) -> estimateSize
    int align(int) -> align
org.jboss.netty.util.EstimatableObjectWrapper -> org.jboss.netty.util.EstimatableObjectWrapper:
    java.lang.Object unwrap() -> unwrap
org.jboss.netty.util.ExternalResourceReleasable -> org.jboss.netty.util.ExternalResourceReleasable:
    void releaseExternalResources() -> releaseExternalResources
org.jboss.netty.util.ExternalResourceUtil -> org.jboss.netty.util.ExternalResourceUtil:
    void release(org.jboss.netty.util.ExternalResourceReleasable[]) -> release
org.jboss.netty.util.HashedWheelTimer -> org.jboss.netty.util.HashedWheelTimer:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.util.concurrent.atomic.AtomicInteger id -> id
    org.jboss.netty.util.internal.SharedResourceMisuseDetector misuseDetector -> misuseDetector
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER -> WORKER_STATE_UPDATER
    org.jboss.netty.util.HashedWheelTimer$Worker worker -> worker
    java.lang.Thread workerThread -> workerThread
    int WORKER_STATE_INIT -> WORKER_STATE_INIT
    int WORKER_STATE_STARTED -> WORKER_STATE_STARTED
    int WORKER_STATE_SHUTDOWN -> WORKER_STATE_SHUTDOWN
    int workerState -> workerState
    long tickDuration -> tickDuration
    org.jboss.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel -> wheel
    int mask -> mask
    java.util.concurrent.CountDownLatch startTimeInitialized -> startTimeInitialized
    java.util.Queue timeouts -> timeouts
    long startTime -> startTime
    org.jboss.netty.util.HashedWheelTimer$HashedWheelBucket[] createWheel(int) -> createWheel
    int normalizeTicksPerWheel(int) -> normalizeTicksPerWheel
    void start() -> start
    java.util.Set stop() -> stop
    org.jboss.netty.util.Timeout newTimeout(org.jboss.netty.util.TimerTask,long,java.util.concurrent.TimeUnit) -> newTimeout
    long access$202(org.jboss.netty.util.HashedWheelTimer,long) -> access$202
    long access$200(org.jboss.netty.util.HashedWheelTimer) -> access$200
    java.util.concurrent.CountDownLatch access$300(org.jboss.netty.util.HashedWheelTimer) -> access$300
    org.jboss.netty.util.HashedWheelTimer$HashedWheelBucket[] access$400(org.jboss.netty.util.HashedWheelTimer) -> access$400
    int access$500(org.jboss.netty.util.HashedWheelTimer) -> access$500
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$600() -> access$600
    java.util.Queue access$700(org.jboss.netty.util.HashedWheelTimer) -> access$700
    long access$900(org.jboss.netty.util.HashedWheelTimer) -> access$900
org.jboss.netty.util.HashedWheelTimer$1 -> org.jboss.netty.util.HashedWheelTimer$1:
org.jboss.netty.util.HashedWheelTimer$HashedWheelBucket -> org.jboss.netty.util.HashedWheelTimer$HashedWheelBucket:
    org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout head -> head
    org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout tail -> tail
    boolean $assertionsDisabled -> $assertionsDisabled
    void addTimeout(org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout) -> addTimeout
    void expireTimeouts(long) -> expireTimeouts
    void remove(org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout) -> remove
    void clearTimeouts(java.util.Set) -> clearTimeouts
    org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout pollTimeout() -> pollTimeout
org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout -> org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:
    int ST_INIT -> ST_INIT
    int ST_IN_BUCKET -> ST_IN_BUCKET
    int ST_CANCELLED -> ST_CANCELLED
    int ST_EXPIRED -> ST_EXPIRED
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER -> STATE_UPDATER
    org.jboss.netty.util.HashedWheelTimer timer -> timer
    org.jboss.netty.util.TimerTask task -> task
    long deadline -> deadline
    int state -> state
    long remainingRounds -> remainingRounds
    org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout next -> next
    org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout prev -> prev
    org.jboss.netty.util.HashedWheelTimer$HashedWheelBucket bucket -> bucket
    boolean $assertionsDisabled -> $assertionsDisabled
    org.jboss.netty.util.Timer getTimer() -> getTimer
    org.jboss.netty.util.TimerTask getTask() -> getTask
    void cancel() -> cancel
    void remove() -> remove
    boolean compareAndSetState(int,int) -> compareAndSetState
    int state() -> state
    boolean isCancelled() -> isCancelled
    boolean isExpired() -> isExpired
    org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout value() -> value
    void expire() -> expire
    java.lang.String toString() -> toString
    long access$800(org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout) -> access$800
org.jboss.netty.util.HashedWheelTimer$Worker -> org.jboss.netty.util.HashedWheelTimer$Worker:
    java.util.Set unprocessedTimeouts -> unprocessedTimeouts
    long tick -> tick
    org.jboss.netty.util.HashedWheelTimer this$0 -> this$0
    void run() -> run
    void transferTimeoutsToBuckets() -> transferTimeoutsToBuckets
    long waitForNextTick() -> waitForNextTick
    java.util.Set unprocessedTimeouts() -> unprocessedTimeouts
org.jboss.netty.util.MapBackedSet -> org.jboss.netty.util.MapBackedSet:
    long serialVersionUID -> serialVersionUID
    java.util.Map map -> map
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
org.jboss.netty.util.NetUtil -> org.jboss.netty.util.NetUtil:
    int IPV6_WORD_COUNT -> IPV6_WORD_COUNT
    int IPV6_MAX_CHAR_COUNT -> IPV6_MAX_CHAR_COUNT
    int IPV6_BYTE_COUNT -> IPV6_BYTE_COUNT
    int IPV6_MAX_CHAR_BETWEEN_SEPARATOR -> IPV6_MAX_CHAR_BETWEEN_SEPARATOR
    int IPV6_MIN_SEPARATORS -> IPV6_MIN_SEPARATORS
    int IPV6_MAX_SEPARATORS -> IPV6_MAX_SEPARATORS
    int IPV4_BYTE_COUNT -> IPV4_BYTE_COUNT
    int IPV4_MAX_CHAR_BETWEEN_SEPARATOR -> IPV4_MAX_CHAR_BETWEEN_SEPARATOR
    int IPV4_SEPARATORS -> IPV4_SEPARATORS
    org.jboss.netty.logging.InternalLogger logger -> logger
    byte[] createByteArrayFromIpAddressString(java.lang.String) -> createByteArrayFromIpAddressString
    void convertToBytes(java.lang.String,byte[],int) -> convertToBytes
    int getIntValue(char) -> getIntValue
    boolean isValidIpV6Address(java.lang.String) -> isValidIpV6Address
    boolean isValidIp4Word(java.lang.String) -> isValidIp4Word
    boolean isValidHexChar(char) -> isValidHexChar
    boolean isValidNumericChar(char) -> isValidNumericChar
    boolean isValidIpV4Address(java.lang.String) -> isValidIpV4Address
    java.net.Inet6Address getByName(java.lang.CharSequence) -> getByName
    java.net.Inet6Address getByName(java.lang.CharSequence,boolean) -> getByName
    java.lang.String toAddressString(java.net.InetAddress) -> toAddressString
    java.lang.String toAddressString(java.net.InetAddress,boolean) -> toAddressString
    boolean inRangeEndExclusive(int,int,int) -> inRangeEndExclusive
org.jboss.netty.util.ObjectSizeEstimator -> org.jboss.netty.util.ObjectSizeEstimator:
    int estimateSize(java.lang.Object) -> estimateSize
org.jboss.netty.util.ThreadNameDeterminer -> org.jboss.netty.util.ThreadNameDeterminer:
    org.jboss.netty.util.ThreadNameDeterminer PROPOSED -> PROPOSED
    org.jboss.netty.util.ThreadNameDeterminer CURRENT -> CURRENT
    java.lang.String determineThreadName(java.lang.String,java.lang.String) -> determineThreadName
org.jboss.netty.util.ThreadNameDeterminer$1 -> org.jboss.netty.util.ThreadNameDeterminer$1:
    java.lang.String determineThreadName(java.lang.String,java.lang.String) -> determineThreadName
org.jboss.netty.util.ThreadNameDeterminer$2 -> org.jboss.netty.util.ThreadNameDeterminer$2:
    java.lang.String determineThreadName(java.lang.String,java.lang.String) -> determineThreadName
org.jboss.netty.util.ThreadRenamingRunnable -> org.jboss.netty.util.ThreadRenamingRunnable:
    org.jboss.netty.logging.InternalLogger logger -> logger
    org.jboss.netty.util.ThreadNameDeterminer threadNameDeterminer -> threadNameDeterminer
    org.jboss.netty.util.ThreadNameDeterminer determiner -> determiner
    java.lang.Runnable runnable -> runnable
    java.lang.String proposedThreadName -> proposedThreadName
    org.jboss.netty.util.ThreadNameDeterminer getThreadNameDeterminer() -> getThreadNameDeterminer
    void setThreadNameDeterminer(org.jboss.netty.util.ThreadNameDeterminer) -> setThreadNameDeterminer
    void run() -> run
    java.lang.String getNewThreadName(java.lang.String) -> getNewThreadName
org.jboss.netty.util.Timeout -> org.jboss.netty.util.Timeout:
    org.jboss.netty.util.Timer getTimer() -> getTimer
    org.jboss.netty.util.TimerTask getTask() -> getTask
    boolean isExpired() -> isExpired
    boolean isCancelled() -> isCancelled
    void cancel() -> cancel
org.jboss.netty.util.Timer -> org.jboss.netty.util.Timer:
    org.jboss.netty.util.Timeout newTimeout(org.jboss.netty.util.TimerTask,long,java.util.concurrent.TimeUnit) -> newTimeout
    java.util.Set stop() -> stop
org.jboss.netty.util.TimerTask -> org.jboss.netty.util.TimerTask:
    void run(org.jboss.netty.util.Timeout) -> run
org.jboss.netty.util.Version -> org.jboss.netty.util.Version:
    java.lang.String ID -> ID
    void main(java.lang.String[]) -> main
org.jboss.netty.util.VirtualExecutorService -> org.jboss.netty.util.VirtualExecutorService:
    java.util.concurrent.Executor e -> e
    java.util.concurrent.ExecutorService s -> s
    java.lang.Object startStopLock -> startStopLock
    boolean shutdown -> shutdown
    java.util.Set activeThreads -> activeThreads
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    void execute(java.lang.Runnable) -> execute
org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable -> org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:
    java.lang.Runnable runnable -> runnable
    boolean $assertionsDisabled -> $assertionsDisabled
    org.jboss.netty.util.VirtualExecutorService this$0 -> this$0
    void run() -> run
org.jboss.netty.util.internal.AtomicFieldUpdaterUtil -> org.jboss.netty.util.internal.AtomicFieldUpdaterUtil:
    boolean AVAILABLE -> AVAILABLE
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater newRefUpdater(java.lang.Class,java.lang.Class,java.lang.String) -> newRefUpdater
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater newIntUpdater(java.lang.Class,java.lang.String) -> newIntUpdater
    boolean isAvailable() -> isAvailable
org.jboss.netty.util.internal.AtomicFieldUpdaterUtil$Node -> org.jboss.netty.util.internal.AtomicFieldUpdaterUtil$Node:
    org.jboss.netty.util.internal.AtomicFieldUpdaterUtil$Node next -> next
org.jboss.netty.util.internal.ByteBufferUtil -> org.jboss.netty.util.internal.ByteBufferUtil:
    boolean CLEAN_SUPPORTED -> CLEAN_SUPPORTED
    java.lang.reflect.Method directBufferCleaner -> directBufferCleaner
    java.lang.reflect.Method directBufferCleanerClean -> directBufferCleanerClean
    void destroy(java.nio.ByteBuffer) -> destroy
org.jboss.netty.util.internal.CaseIgnoringComparator -> org.jboss.netty.util.internal.CaseIgnoringComparator:
    long serialVersionUID -> serialVersionUID
    org.jboss.netty.util.internal.CaseIgnoringComparator INSTANCE -> INSTANCE
    int compare(java.lang.String,java.lang.String) -> compare
    java.lang.Object readResolve() -> readResolve
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jboss.netty.util.internal.ConcurrentHashMap -> org.jboss.netty.util.internal.ConcurrentHashMap:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int RETRIES_BEFORE_LOCK -> RETRIES_BEFORE_LOCK
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    org.jboss.netty.util.internal.ConcurrentHashMap$Segment[] segments -> segments
    java.util.Set keySet -> keySet
    java.util.Set entrySet -> entrySet
    java.util.Collection values -> values
    int hash(int) -> hash
    org.jboss.netty.util.internal.ConcurrentHashMap$Segment segmentFor(int) -> segmentFor
    int hashOf(java.lang.Object) -> hashOf
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean contains(java.lang.Object) -> contains
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.Enumeration keys() -> keys
    java.util.Enumeration elements() -> elements
org.jboss.netty.util.internal.ConcurrentHashMap$EntryIterator -> org.jboss.netty.util.internal.ConcurrentHashMap$EntryIterator:
    org.jboss.netty.util.internal.ConcurrentHashMap this$0 -> this$0
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet -> org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:
    org.jboss.netty.util.internal.ConcurrentHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry -> org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry:
    java.lang.Object key -> key
    int hash -> hash
    java.lang.Object value -> value
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry next -> next
    java.lang.Object key() -> key
    java.lang.Object value() -> value
    void setValue(java.lang.Object) -> setValue
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry[] newArray(int) -> newArray
org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator -> org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry[] currentTable -> currentTable
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry nextEntry -> nextEntry
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry lastReturned -> lastReturned
    java.lang.Object currentKey -> currentKey
    org.jboss.netty.util.internal.ConcurrentHashMap this$0 -> this$0
    void rewind() -> rewind
    boolean hasMoreElements() -> hasMoreElements
    void advance() -> advance
    boolean hasNext() -> hasNext
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry nextEntry() -> nextEntry
    void remove() -> remove
org.jboss.netty.util.internal.ConcurrentHashMap$KeyIterator -> org.jboss.netty.util.internal.ConcurrentHashMap$KeyIterator:
    org.jboss.netty.util.internal.ConcurrentHashMap this$0 -> this$0
    java.lang.Object next() -> next
    java.lang.Object nextElement() -> nextElement
org.jboss.netty.util.internal.ConcurrentHashMap$KeySet -> org.jboss.netty.util.internal.ConcurrentHashMap$KeySet:
    org.jboss.netty.util.internal.ConcurrentHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentHashMap$Segment -> org.jboss.netty.util.internal.ConcurrentHashMap$Segment:
    long serialVersionUID -> serialVersionUID
    int count -> count
    int modCount -> modCount
    int threshold -> threshold
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry[] table -> table
    float loadFactor -> loadFactor
    org.jboss.netty.util.internal.ConcurrentHashMap$Segment[] newArray(int) -> newArray
    boolean keyEq(java.lang.Object,java.lang.Object) -> keyEq
    void setTable(org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry[]) -> setTable
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry getFirst(int) -> getFirst
    org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry newHashEntry(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry,java.lang.Object) -> newHashEntry
    java.lang.Object readValueUnderLock(org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry) -> readValueUnderLock
    java.lang.Object get(java.lang.Object,int) -> get
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    int rehash() -> rehash
    java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean) -> remove
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry -> org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean eq(java.lang.Object,java.lang.Object) -> eq
org.jboss.netty.util.internal.ConcurrentHashMap$ValueIterator -> org.jboss.netty.util.internal.ConcurrentHashMap$ValueIterator:
    org.jboss.netty.util.internal.ConcurrentHashMap this$0 -> this$0
    java.lang.Object next() -> next
    java.lang.Object nextElement() -> nextElement
org.jboss.netty.util.internal.ConcurrentHashMap$Values -> org.jboss.netty.util.internal.ConcurrentHashMap$Values:
    org.jboss.netty.util.internal.ConcurrentHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentHashMap$WriteThroughEntry -> org.jboss.netty.util.internal.ConcurrentHashMap$WriteThroughEntry:
    org.jboss.netty.util.internal.ConcurrentHashMap this$0 -> this$0
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jboss.netty.util.internal.ConcurrentIdentityHashMap -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int RETRIES_BEFORE_LOCK -> RETRIES_BEFORE_LOCK
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment[] segments -> segments
    java.util.Set keySet -> keySet
    java.util.Set entrySet -> entrySet
    java.util.Collection values -> values
    int hash(int) -> hash
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment segmentFor(int) -> segmentFor
    int hashOf(java.lang.Object) -> hashOf
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean contains(java.lang.Object) -> contains
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.Enumeration keys() -> keys
    java.util.Enumeration elements() -> elements
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntryIterator -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntryIterator:
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap this$0 -> this$0
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry:
    java.lang.Object key -> key
    int hash -> hash
    java.lang.Object value -> value
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry next -> next
    java.lang.Object key() -> key
    java.lang.Object value() -> value
    void setValue(java.lang.Object) -> setValue
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry[] newArray(int) -> newArray
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry[] currentTable -> currentTable
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry nextEntry -> nextEntry
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry lastReturned -> lastReturned
    java.lang.Object currentKey -> currentKey
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap this$0 -> this$0
    void rewind() -> rewind
    boolean hasMoreElements() -> hasMoreElements
    void advance() -> advance
    boolean hasNext() -> hasNext
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry nextEntry() -> nextEntry
    void remove() -> remove
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeyIterator -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeyIterator:
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap this$0 -> this$0
    java.lang.Object next() -> next
    java.lang.Object nextElement() -> nextElement
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeySet -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeySet:
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:
    long serialVersionUID -> serialVersionUID
    int count -> count
    int modCount -> modCount
    int threshold -> threshold
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry[] table -> table
    float loadFactor -> loadFactor
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment[] newArray(int) -> newArray
    boolean keyEq(java.lang.Object,java.lang.Object) -> keyEq
    void setTable(org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry[]) -> setTable
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry getFirst(int) -> getFirst
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry newHashEntry(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry,java.lang.Object) -> newHashEntry
    java.lang.Object readValueUnderLock(org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashEntry) -> readValueUnderLock
    java.lang.Object get(java.lang.Object,int) -> get
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    int rehash() -> rehash
    java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean) -> remove
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean eq(java.lang.Object,java.lang.Object) -> eq
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$ValueIterator -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$ValueIterator:
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap this$0 -> this$0
    java.lang.Object next() -> next
    java.lang.Object nextElement() -> nextElement
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Values -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Values:
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentIdentityHashMap$WriteThroughEntry -> org.jboss.netty.util.internal.ConcurrentIdentityHashMap$WriteThroughEntry:
    org.jboss.netty.util.internal.ConcurrentIdentityHashMap this$0 -> this$0
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int RETRIES_BEFORE_LOCK -> RETRIES_BEFORE_LOCK
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment[] segments -> segments
    java.util.Set keySet -> keySet
    java.util.Set entrySet -> entrySet
    java.util.Collection values -> values
    int hash(int) -> hash
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment segmentFor(int) -> segmentFor
    int hashOf(java.lang.Object) -> hashOf
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean contains(java.lang.Object) -> contains
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    void purgeStaleEntries() -> purgeStaleEntries
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.Enumeration keys() -> keys
    java.util.Enumeration elements() -> elements
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntryIterator -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntryIterator:
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap this$0 -> this$0
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry:
    java.lang.Object keyRef -> keyRef
    int hash -> hash
    java.lang.Object valueRef -> valueRef
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry next -> next
    java.lang.Object key() -> key
    java.lang.Object value() -> value
    java.lang.Object dereferenceValue(java.lang.Object) -> dereferenceValue
    void setValue(java.lang.Object) -> setValue
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry[] newArray(int) -> newArray
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashIterator -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry[] currentTable -> currentTable
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry nextEntry -> nextEntry
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry lastReturned -> lastReturned
    java.lang.Object currentKey -> currentKey
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap this$0 -> this$0
    void rewind() -> rewind
    boolean hasMoreElements() -> hasMoreElements
    void advance() -> advance
    boolean hasNext() -> hasNext
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry nextEntry() -> nextEntry
    void remove() -> remove
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$KeyIterator -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$KeyIterator:
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap this$0 -> this$0
    java.lang.Object next() -> next
    java.lang.Object nextElement() -> nextElement
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$KeySet -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$KeySet:
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:
    long serialVersionUID -> serialVersionUID
    int count -> count
    int modCount -> modCount
    int threshold -> threshold
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry[] table -> table
    float loadFactor -> loadFactor
    java.lang.ref.ReferenceQueue refQueue -> refQueue
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment[] newArray(int) -> newArray
    boolean keyEq(java.lang.Object,java.lang.Object) -> keyEq
    void setTable(org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry[]) -> setTable
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry getFirst(int) -> getFirst
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry newHashEntry(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry,java.lang.Object) -> newHashEntry
    java.lang.Object readValueUnderLock(org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry) -> readValueUnderLock
    java.lang.Object get(java.lang.Object,int) -> get
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    int rehash() -> rehash
    java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean) -> remove
    void removeStale() -> removeStale
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean eq(java.lang.Object,java.lang.Object) -> eq
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$ValueIterator -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$ValueIterator:
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap this$0 -> this$0
    java.lang.Object next() -> next
    java.lang.Object nextElement() -> nextElement
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Values -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Values:
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$WeakKeyReference -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$WeakKeyReference:
    int hash -> hash
    int keyHash() -> keyHash
    java.lang.Object keyRef() -> keyRef
org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$WriteThroughEntry -> org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$WriteThroughEntry:
    org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap this$0 -> this$0
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int RETRIES_BEFORE_LOCK -> RETRIES_BEFORE_LOCK
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment[] segments -> segments
    java.util.Set keySet -> keySet
    java.util.Set entrySet -> entrySet
    java.util.Collection values -> values
    int hash(int) -> hash
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment segmentFor(int) -> segmentFor
    int hashOf(java.lang.Object) -> hashOf
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean contains(java.lang.Object) -> contains
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    void purgeStaleEntries() -> purgeStaleEntries
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.Enumeration keys() -> keys
    java.util.Enumeration elements() -> elements
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntryIterator -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntryIterator:
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap this$0 -> this$0
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry:
    java.lang.Object keyRef -> keyRef
    int hash -> hash
    java.lang.Object valueRef -> valueRef
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry next -> next
    java.lang.Object key() -> key
    java.lang.Object value() -> value
    java.lang.Object dereferenceValue(java.lang.Object) -> dereferenceValue
    void setValue(java.lang.Object) -> setValue
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry[] newArray(int) -> newArray
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashIterator -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry[] currentTable -> currentTable
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry nextEntry -> nextEntry
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry lastReturned -> lastReturned
    java.lang.Object currentKey -> currentKey
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap this$0 -> this$0
    void rewind() -> rewind
    boolean hasMoreElements() -> hasMoreElements
    void advance() -> advance
    boolean hasNext() -> hasNext
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry nextEntry() -> nextEntry
    void remove() -> remove
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$KeyIterator -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$KeyIterator:
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap this$0 -> this$0
    java.lang.Object next() -> next
    java.lang.Object nextElement() -> nextElement
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$KeySet -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$KeySet:
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:
    long serialVersionUID -> serialVersionUID
    int count -> count
    int modCount -> modCount
    int threshold -> threshold
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry[] table -> table
    float loadFactor -> loadFactor
    java.lang.ref.ReferenceQueue refQueue -> refQueue
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment[] newArray(int) -> newArray
    boolean keyEq(java.lang.Object,java.lang.Object) -> keyEq
    void setTable(org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry[]) -> setTable
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry getFirst(int) -> getFirst
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry newHashEntry(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry,java.lang.Object) -> newHashEntry
    java.lang.Object readValueUnderLock(org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry) -> readValueUnderLock
    java.lang.Object get(java.lang.Object,int) -> get
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    int rehash() -> rehash
    java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean) -> remove
    void removeStale() -> removeStale
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean eq(java.lang.Object,java.lang.Object) -> eq
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$ValueIterator -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$ValueIterator:
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap this$0 -> this$0
    java.lang.Object next() -> next
    java.lang.Object nextElement() -> nextElement
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Values -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Values:
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$WeakKeyReference -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$WeakKeyReference:
    int hash -> hash
    int keyHash() -> keyHash
    java.lang.Object keyRef() -> keyRef
org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$WriteThroughEntry -> org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$WriteThroughEntry:
    org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap this$0 -> this$0
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jboss.netty.util.internal.ConversionUtil -> org.jboss.netty.util.internal.ConversionUtil:
    java.util.regex.Pattern ARRAY_DELIM -> ARRAY_DELIM
    java.lang.String[] INTEGERS -> INTEGERS
    int toInt(java.lang.Object) -> toInt
    boolean toBoolean(java.lang.Object) -> toBoolean
    java.lang.String[] toStringArray(java.lang.Object) -> toStringArray
    java.lang.String toString(int) -> toString
org.jboss.netty.util.internal.DeadLockProofWorker -> org.jboss.netty.util.internal.DeadLockProofWorker:
    java.lang.ThreadLocal PARENT -> PARENT
    void start(java.util.concurrent.Executor,java.lang.Runnable) -> start
org.jboss.netty.util.internal.DeadLockProofWorker$1 -> org.jboss.netty.util.internal.DeadLockProofWorker$1:
    java.util.concurrent.Executor val$parent -> val$parent
    java.lang.Runnable val$runnable -> val$runnable
    void run() -> run
org.jboss.netty.util.internal.DetectionUtil -> org.jboss.netty.util.internal.DetectionUtil:
    int JAVA_VERSION -> JAVA_VERSION
    boolean HAS_UNSAFE -> HAS_UNSAFE
    boolean IS_WINDOWS -> IS_WINDOWS
    boolean isWindows() -> isWindows
    boolean hasUnsafe() -> hasUnsafe
    int javaVersion() -> javaVersion
    boolean hasUnsafe(java.lang.ClassLoader) -> hasUnsafe
    boolean hasUnsafeField(java.lang.Class) -> hasUnsafeField
    int javaVersion0() -> javaVersion0
org.jboss.netty.util.internal.DetectionUtil$1 -> org.jboss.netty.util.internal.DetectionUtil$1:
    java.lang.Class val$unsafeClass -> val$unsafeClass
    java.lang.Boolean run() -> run
    java.lang.Object run() -> run
org.jboss.netty.util.internal.EmptyArrays -> org.jboss.netty.util.internal.EmptyArrays:
    byte[] EMPTY_BYTES -> EMPTY_BYTES
    boolean[] EMPTY_BOOLEANS -> EMPTY_BOOLEANS
    double[] EMPTY_DOUBLES -> EMPTY_DOUBLES
    float[] EMPTY_FLOATS -> EMPTY_FLOATS
    int[] EMPTY_INTS -> EMPTY_INTS
    short[] EMPTY_SHORTS -> EMPTY_SHORTS
    long[] EMPTY_LONGS -> EMPTY_LONGS
    java.lang.Object[] EMPTY_OBJECTS -> EMPTY_OBJECTS
    java.lang.String[] EMPTY_STRINGS -> EMPTY_STRINGS
    java.lang.StackTraceElement[] EMPTY_STACK_TRACE -> EMPTY_STACK_TRACE
    java.nio.ByteBuffer[] EMPTY_BYTE_BUFFERS -> EMPTY_BYTE_BUFFERS
    java.security.cert.X509Certificate[] EMPTY_X509_CERTIFICATES -> EMPTY_X509_CERTIFICATES
org.jboss.netty.util.internal.ExecutorUtil -> org.jboss.netty.util.internal.ExecutorUtil:
    void shutdownNow(java.util.concurrent.Executor) -> shutdownNow
    boolean isShutdown(java.util.concurrent.Executor) -> isShutdown
    void terminate(java.util.concurrent.Executor[]) -> terminate
    void terminate(java.lang.ThreadLocal,java.util.concurrent.Executor[]) -> terminate
org.jboss.netty.util.internal.NativeLibraryLoader -> org.jboss.netty.util.internal.NativeLibraryLoader:
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.String NATIVE_RESOURCE_HOME -> NATIVE_RESOURCE_HOME
    java.lang.String OSNAME -> OSNAME
    java.io.File WORKDIR -> WORKDIR
    java.io.File tmpdir() -> tmpdir
    java.io.File toDirectory(java.lang.String) -> toDirectory
    boolean isWindows() -> isWindows
    boolean isOSX() -> isOSX
    void load(java.lang.String,java.lang.ClassLoader) -> load
org.jboss.netty.util.internal.NonReentrantLock -> org.jboss.netty.util.internal.NonReentrantLock:
    long serialVersionUID -> serialVersionUID
    java.lang.Thread owner -> owner
    void lock() -> lock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    void unlock() -> unlock
    boolean isHeldByCurrentThread() -> isHeldByCurrentThread
    java.util.concurrent.locks.Condition newCondition() -> newCondition
    boolean tryAcquire(int) -> tryAcquire
    boolean tryRelease(int) -> tryRelease
    boolean isHeldExclusively() -> isHeldExclusively
org.jboss.netty.util.internal.ReusableIterator -> org.jboss.netty.util.internal.ReusableIterator:
    void rewind() -> rewind
org.jboss.netty.util.internal.SharedResourceMisuseDetector -> org.jboss.netty.util.internal.SharedResourceMisuseDetector:
    int MAX_ACTIVE_INSTANCES -> MAX_ACTIVE_INSTANCES
    org.jboss.netty.logging.InternalLogger logger -> logger
    java.lang.Class type -> type
    java.util.concurrent.atomic.AtomicLong activeInstances -> activeInstances
    java.util.concurrent.atomic.AtomicBoolean logged -> logged
    void increase() -> increase
    void decrease() -> decrease
org.jboss.netty.util.internal.StringUtil -> org.jboss.netty.util.internal.StringUtil:
    java.lang.String NEWLINE -> NEWLINE
    java.lang.String EMPTY_STRING -> EMPTY_STRING
    java.lang.String stripControlCharacters(java.lang.Object) -> stripControlCharacters
    java.lang.String stripControlCharacters(java.lang.String) -> stripControlCharacters
    java.lang.String[] split(java.lang.String,char) -> split
    java.lang.String[] split(java.lang.String,char,int) -> split
    java.lang.String substringAfter(java.lang.String,char) -> substringAfter
org.jboss.netty.util.internal.SystemPropertyUtil -> org.jboss.netty.util.internal.SystemPropertyUtil:
    boolean initializedLogger -> initializedLogger
    org.jboss.netty.logging.InternalLogger logger -> logger
    boolean loggedException -> loggedException
    java.util.regex.Pattern INTEGER_PATTERN -> INTEGER_PATTERN
    boolean contains(java.lang.String) -> contains
    java.lang.String get(java.lang.String) -> get
    java.lang.String get(java.lang.String,java.lang.String) -> get
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    int getInt(java.lang.String,int) -> getInt
    long getLong(java.lang.String,long) -> getLong
    void log(java.lang.String) -> log
    void log(java.lang.String,java.lang.Exception) -> log
org.jboss.netty.util.internal.ThreadLocalBoolean -> org.jboss.netty.util.internal.ThreadLocalBoolean:
    boolean defaultValue -> defaultValue
    java.lang.Boolean initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.jboss.netty.util.internal.ThreadLocalRandom -> org.jboss.netty.util.internal.ThreadLocalRandom:
    long multiplier -> multiplier
    long addend -> addend
    long mask -> mask
    long rnd -> rnd
    boolean initialized -> initialized
    long pad0 -> pad0
    long pad1 -> pad1
    long pad2 -> pad2
    long pad3 -> pad3
    long pad4 -> pad4
    long pad5 -> pad5
    long pad6 -> pad6
    long pad7 -> pad7
    java.lang.ThreadLocal localRandom -> localRandom
    long serialVersionUID -> serialVersionUID
    org.jboss.netty.util.internal.ThreadLocalRandom current() -> current
    void setSeed(long) -> setSeed
    int next(int) -> next
org.jboss.netty.util.internal.ThreadLocalRandom$1 -> org.jboss.netty.util.internal.ThreadLocalRandom$1:
    org.jboss.netty.util.internal.ThreadLocalRandom initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.jboss.netty.util.internal.UnterminatableExecutor -> org.jboss.netty.util.internal.UnterminatableExecutor:
    java.util.concurrent.Executor executor -> executor
    void execute(java.lang.Runnable) -> execute
org.jboss.netty.util.internal.jzlib.Adler32 -> org.jboss.netty.util.internal.jzlib.Adler32:
    int BASE -> BASE
    int NMAX -> NMAX
    long adler32(long,byte[],int,int) -> adler32
org.jboss.netty.util.internal.jzlib.CRC32 -> org.jboss.netty.util.internal.jzlib.CRC32:
    int[] TABLE -> TABLE
    int crc32(int,byte[],int,int) -> crc32
org.jboss.netty.util.internal.jzlib.Deflate -> org.jboss.netty.util.internal.jzlib.Deflate:
    int STORED -> STORED
    int FAST -> FAST
    int SLOW -> SLOW
    org.jboss.netty.util.internal.jzlib.Deflate$Config[] config_table -> config_table
    java.lang.String[] z_errmsg -> z_errmsg
    int NeedMore -> NeedMore
    int BlockDone -> BlockDone
    int FinishStarted -> FinishStarted
    int FinishDone -> FinishDone
    int INIT_STATE -> INIT_STATE
    int BUSY_STATE -> BUSY_STATE
    int FINISH_STATE -> FINISH_STATE
    int STORED_BLOCK -> STORED_BLOCK
    int STATIC_TREES -> STATIC_TREES
    int DYN_TREES -> DYN_TREES
    int Z_BINARY -> Z_BINARY
    int Z_ASCII -> Z_ASCII
    int Z_UNKNOWN -> Z_UNKNOWN
    int Buf_size -> Buf_size
    int REP_3_6 -> REP_3_6
    int REPZ_3_10 -> REPZ_3_10
    int REPZ_11_138 -> REPZ_11_138
    int MIN_MATCH -> MIN_MATCH
    int MAX_MATCH -> MAX_MATCH
    int MIN_LOOKAHEAD -> MIN_LOOKAHEAD
    int END_BLOCK -> END_BLOCK
    org.jboss.netty.util.internal.jzlib.ZStream strm -> strm
    int status -> status
    byte[] pending_buf -> pending_buf
    int pending_buf_size -> pending_buf_size
    int pending_out -> pending_out
    int pending -> pending
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType wrapperType -> wrapperType
    boolean wroteTrailer -> wroteTrailer
    byte data_type -> data_type
    int last_flush -> last_flush
    int w_size -> w_size
    int w_bits -> w_bits
    int w_mask -> w_mask
    byte[] window -> window
    int window_size -> window_size
    short[] prev -> prev
    short[] head -> head
    int ins_h -> ins_h
    int hash_size -> hash_size
    int hash_bits -> hash_bits
    int hash_mask -> hash_mask
    int hash_shift -> hash_shift
    int block_start -> block_start
    int match_length -> match_length
    int prev_match -> prev_match
    int match_available -> match_available
    int strstart -> strstart
    int match_start -> match_start
    int lookahead -> lookahead
    int prev_length -> prev_length
    int max_chain_length -> max_chain_length
    int max_lazy_match -> max_lazy_match
    int level -> level
    int strategy -> strategy
    int good_match -> good_match
    int nice_match -> nice_match
    short[] dyn_ltree -> dyn_ltree
    short[] dyn_dtree -> dyn_dtree
    short[] bl_tree -> bl_tree
    org.jboss.netty.util.internal.jzlib.Tree l_desc -> l_desc
    org.jboss.netty.util.internal.jzlib.Tree d_desc -> d_desc
    org.jboss.netty.util.internal.jzlib.Tree bl_desc -> bl_desc
    short[] bl_count -> bl_count
    int[] heap -> heap
    int heap_len -> heap_len
    int heap_max -> heap_max
    byte[] depth -> depth
    int l_buf -> l_buf
    int lit_bufsize -> lit_bufsize
    int last_lit -> last_lit
    int d_buf -> d_buf
    int opt_len -> opt_len
    int static_len -> static_len
    int matches -> matches
    int last_eob_len -> last_eob_len
    short bi_buf -> bi_buf
    int bi_valid -> bi_valid
    int gzipUncompressedBytes -> gzipUncompressedBytes
    void lm_init() -> lm_init
    void tr_init() -> tr_init
    void init_block() -> init_block
    void pqdownheap(short[],int) -> pqdownheap
    boolean smaller(short[],int,int,byte[]) -> smaller
    void scan_tree(short[],int) -> scan_tree
    int build_bl_tree() -> build_bl_tree
    void send_all_trees(int,int,int) -> send_all_trees
    void send_tree(short[],int) -> send_tree
    void put_byte(byte[],int,int) -> put_byte
    void put_byte(byte) -> put_byte
    void put_short(int) -> put_short
    void putShortMSB(int) -> putShortMSB
    void send_code(int,short[]) -> send_code
    void send_bits(int,int) -> send_bits
    void _tr_align() -> _tr_align
    boolean _tr_tally(int,int) -> _tr_tally
    void compress_block(short[],short[]) -> compress_block
    void set_data_type() -> set_data_type
    void bi_flush() -> bi_flush
    void bi_windup() -> bi_windup
    void copy_block(int,int,boolean) -> copy_block
    void flush_block_only(boolean) -> flush_block_only
    int deflate_stored(int) -> deflate_stored
    void _tr_stored_block(int,int,boolean) -> _tr_stored_block
    void _tr_flush_block(int,int,boolean) -> _tr_flush_block
    void fill_window() -> fill_window
    int deflate_fast(int) -> deflate_fast
    int deflate_slow(int) -> deflate_slow
    int longest_match(int) -> longest_match
    int deflateInit(org.jboss.netty.util.internal.jzlib.ZStream,int,int,int,org.jboss.netty.util.internal.jzlib.JZlib$WrapperType) -> deflateInit
    int deflateInit2(org.jboss.netty.util.internal.jzlib.ZStream,int,int,int,int,int,org.jboss.netty.util.internal.jzlib.JZlib$WrapperType) -> deflateInit2
    int deflateReset(org.jboss.netty.util.internal.jzlib.ZStream) -> deflateReset
    int deflateEnd() -> deflateEnd
    int deflateParams(org.jboss.netty.util.internal.jzlib.ZStream,int,int) -> deflateParams
    int deflateSetDictionary(org.jboss.netty.util.internal.jzlib.ZStream,byte[],int) -> deflateSetDictionary
    int deflate(org.jboss.netty.util.internal.jzlib.ZStream,int) -> deflate
org.jboss.netty.util.internal.jzlib.Deflate$1 -> org.jboss.netty.util.internal.jzlib.Deflate$1:
    int[] $SwitchMap$org$jboss$netty$util$internal$jzlib$JZlib$WrapperType -> $SwitchMap$org$jboss$netty$util$internal$jzlib$JZlib$WrapperType
org.jboss.netty.util.internal.jzlib.Deflate$Config -> org.jboss.netty.util.internal.jzlib.Deflate$Config:
    int good_length -> good_length
    int max_lazy -> max_lazy
    int nice_length -> nice_length
    int max_chain -> max_chain
    int func -> func
org.jboss.netty.util.internal.jzlib.InfBlocks -> org.jboss.netty.util.internal.jzlib.InfBlocks:
    int[] inflate_mask -> inflate_mask
    int[] border -> border
    int TYPE -> TYPE
    int LENS -> LENS
    int STORED -> STORED
    int TABLE -> TABLE
    int BTREE -> BTREE
    int DTREE -> DTREE
    int CODES -> CODES
    int DRY -> DRY
    int DONE -> DONE
    int BAD -> BAD
    int mode -> mode
    int left -> left
    int table -> table
    int index -> index
    int[] blens -> blens
    int[] bb -> bb
    int[] tb -> tb
    org.jboss.netty.util.internal.jzlib.InfCodes codes -> codes
    int last -> last
    int bitk -> bitk
    int bitb -> bitb
    int[] hufts -> hufts
    byte[] window -> window
    int end -> end
    int read -> read
    int write -> write
    java.lang.Object checkfn -> checkfn
    long check -> check
    org.jboss.netty.util.internal.jzlib.InfTree inftree -> inftree
    void reset(org.jboss.netty.util.internal.jzlib.ZStream,long[]) -> reset
    int proc(org.jboss.netty.util.internal.jzlib.ZStream,int) -> proc
    void free(org.jboss.netty.util.internal.jzlib.ZStream) -> free
    void set_dictionary(byte[],int,int) -> set_dictionary
    int sync_point() -> sync_point
    int inflate_flush(org.jboss.netty.util.internal.jzlib.ZStream,int) -> inflate_flush
org.jboss.netty.util.internal.jzlib.InfCodes -> org.jboss.netty.util.internal.jzlib.InfCodes:
    int[] inflate_mask -> inflate_mask
    int START -> START
    int LEN -> LEN
    int LENEXT -> LENEXT
    int DIST -> DIST
    int DISTEXT -> DISTEXT
    int COPY -> COPY
    int LIT -> LIT
    int WASH -> WASH
    int END -> END
    int BADCODE -> BADCODE
    int mode -> mode
    int len -> len
    int[] tree -> tree
    int tree_index -> tree_index
    int need -> need
    int lit -> lit
    int get -> get
    int dist -> dist
    byte lbits -> lbits
    byte dbits -> dbits
    int[] ltree -> ltree
    int ltree_index -> ltree_index
    int[] dtree -> dtree
    int dtree_index -> dtree_index
    void init(int,int,int[],int,int[],int) -> init
    int proc(org.jboss.netty.util.internal.jzlib.InfBlocks,org.jboss.netty.util.internal.jzlib.ZStream,int) -> proc
    int inflate_fast(int,int,int[],int,int[],int,org.jboss.netty.util.internal.jzlib.InfBlocks,org.jboss.netty.util.internal.jzlib.ZStream) -> inflate_fast
org.jboss.netty.util.internal.jzlib.InfTree -> org.jboss.netty.util.internal.jzlib.InfTree:
    int fixed_bl -> fixed_bl
    int fixed_bd -> fixed_bd
    int[] fixed_tl -> fixed_tl
    int[] fixed_td -> fixed_td
    int[] cplens -> cplens
    int[] cplext -> cplext
    int[] cpdist -> cpdist
    int[] cpdext -> cpdext
    int BMAX -> BMAX
    int[] hn -> hn
    int[] v -> v
    int[] c -> c
    int[] r -> r
    int[] u -> u
    int[] x -> x
    int huft_build(int[],int,int,int,int[],int[],int[],int[],int[],int[],int[]) -> huft_build
    int inflate_trees_bits(int[],int[],int[],int[],org.jboss.netty.util.internal.jzlib.ZStream) -> inflate_trees_bits
    int inflate_trees_dynamic(int,int,int[],int[],int[],int[],int[],int[],org.jboss.netty.util.internal.jzlib.ZStream) -> inflate_trees_dynamic
    int inflate_trees_fixed(int[],int[],int[][],int[][]) -> inflate_trees_fixed
    void initWorkArea(int) -> initWorkArea
org.jboss.netty.util.internal.jzlib.Inflate -> org.jboss.netty.util.internal.jzlib.Inflate:
    int METHOD -> METHOD
    int FLAG -> FLAG
    int DICT4 -> DICT4
    int DICT3 -> DICT3
    int DICT2 -> DICT2
    int DICT1 -> DICT1
    int DICT0 -> DICT0
    int BLOCKS -> BLOCKS
    int CHECK4 -> CHECK4
    int CHECK3 -> CHECK3
    int CHECK2 -> CHECK2
    int CHECK1 -> CHECK1
    int DONE -> DONE
    int BAD -> BAD
    int GZIP_ID1 -> GZIP_ID1
    int GZIP_ID2 -> GZIP_ID2
    int GZIP_CM -> GZIP_CM
    int GZIP_FLG -> GZIP_FLG
    int GZIP_MTIME_XFL_OS -> GZIP_MTIME_XFL_OS
    int GZIP_XLEN -> GZIP_XLEN
    int GZIP_FEXTRA -> GZIP_FEXTRA
    int GZIP_FNAME -> GZIP_FNAME
    int GZIP_FCOMMENT -> GZIP_FCOMMENT
    int GZIP_FHCRC -> GZIP_FHCRC
    int GZIP_CRC32 -> GZIP_CRC32
    int GZIP_ISIZE -> GZIP_ISIZE
    int mode -> mode
    int method -> method
    long[] was -> was
    long need -> need
    int marker -> marker
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType wrapperType -> wrapperType
    int wbits -> wbits
    org.jboss.netty.util.internal.jzlib.InfBlocks blocks -> blocks
    int gzipFlag -> gzipFlag
    int gzipBytesToRead -> gzipBytesToRead
    int gzipXLen -> gzipXLen
    int gzipUncompressedBytes -> gzipUncompressedBytes
    int gzipCRC32 -> gzipCRC32
    int gzipISize -> gzipISize
    byte[] mark -> mark
    int inflateReset(org.jboss.netty.util.internal.jzlib.ZStream) -> inflateReset
    int inflateEnd(org.jboss.netty.util.internal.jzlib.ZStream) -> inflateEnd
    int inflateInit(org.jboss.netty.util.internal.jzlib.ZStream,int,org.jboss.netty.util.internal.jzlib.JZlib$WrapperType) -> inflateInit
    int inflate(org.jboss.netty.util.internal.jzlib.ZStream,int) -> inflate
    int inflateSetDictionary(org.jboss.netty.util.internal.jzlib.ZStream,byte[],int) -> inflateSetDictionary
    int inflateSync(org.jboss.netty.util.internal.jzlib.ZStream) -> inflateSync
org.jboss.netty.util.internal.jzlib.Inflate$1 -> org.jboss.netty.util.internal.jzlib.Inflate$1:
    int[] $SwitchMap$org$jboss$netty$util$internal$jzlib$JZlib$WrapperType -> $SwitchMap$org$jboss$netty$util$internal$jzlib$JZlib$WrapperType
org.jboss.netty.util.internal.jzlib.JZlib -> org.jboss.netty.util.internal.jzlib.JZlib:
    java.lang.Enum W_NONE -> W_NONE
    java.lang.Enum W_ZLIB -> W_ZLIB
    java.lang.Enum W_GZIP -> W_GZIP
    java.lang.Enum W_ZLIB_OR_NONE -> W_ZLIB_OR_NONE
    int Z_NO_COMPRESSION -> Z_NO_COMPRESSION
    int Z_BEST_SPEED -> Z_BEST_SPEED
    int Z_BEST_COMPRESSION -> Z_BEST_COMPRESSION
    int Z_DEFAULT_COMPRESSION -> Z_DEFAULT_COMPRESSION
    int Z_FILTERED -> Z_FILTERED
    int Z_HUFFMAN_ONLY -> Z_HUFFMAN_ONLY
    int Z_DEFAULT_STRATEGY -> Z_DEFAULT_STRATEGY
    int Z_NO_FLUSH -> Z_NO_FLUSH
    int Z_PARTIAL_FLUSH -> Z_PARTIAL_FLUSH
    int Z_SYNC_FLUSH -> Z_SYNC_FLUSH
    int Z_FULL_FLUSH -> Z_FULL_FLUSH
    int Z_FINISH -> Z_FINISH
    int Z_OK -> Z_OK
    int Z_STREAM_END -> Z_STREAM_END
    int Z_NEED_DICT -> Z_NEED_DICT
    int Z_ERRNO -> Z_ERRNO
    int Z_STREAM_ERROR -> Z_STREAM_ERROR
    int Z_DATA_ERROR -> Z_DATA_ERROR
    int Z_MEM_ERROR -> Z_MEM_ERROR
    int Z_BUF_ERROR -> Z_BUF_ERROR
    int Z_VERSION_ERROR -> Z_VERSION_ERROR
    int Z_DEFLATED -> Z_DEFLATED
    int MAX_MEM_LEVEL -> MAX_MEM_LEVEL
    int DEF_MEM_LEVEL -> DEF_MEM_LEVEL
    int MAX_WBITS -> MAX_WBITS
    int DEF_WBITS -> DEF_WBITS
    int MAX_BITS -> MAX_BITS
    int PRESET_DICT -> PRESET_DICT
    int MANY -> MANY
    int BL_CODES -> BL_CODES
    int D_CODES -> D_CODES
    int LITERALS -> LITERALS
    int LENGTH_CODES -> LENGTH_CODES
    int L_CODES -> L_CODES
    int HEAP_SIZE -> HEAP_SIZE
    int MAX_BL_BITS -> MAX_BL_BITS
org.jboss.netty.util.internal.jzlib.JZlib$WrapperType -> org.jboss.netty.util.internal.jzlib.JZlib$WrapperType:
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType NONE -> NONE
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType ZLIB -> ZLIB
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType GZIP -> GZIP
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType ZLIB_OR_NONE -> ZLIB_OR_NONE
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType[] $VALUES -> $VALUES
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType[] values() -> values
    org.jboss.netty.util.internal.jzlib.JZlib$WrapperType valueOf(java.lang.String) -> valueOf
org.jboss.netty.util.internal.jzlib.StaticTree -> org.jboss.netty.util.internal.jzlib.StaticTree:
    short[] static_ltree -> static_ltree
    short[] static_dtree -> static_dtree
    org.jboss.netty.util.internal.jzlib.StaticTree static_l_desc -> static_l_desc
    org.jboss.netty.util.internal.jzlib.StaticTree static_d_desc -> static_d_desc
    org.jboss.netty.util.internal.jzlib.StaticTree static_bl_desc -> static_bl_desc
    short[] static_tree -> static_tree
    int[] extra_bits -> extra_bits
    int extra_base -> extra_base
    int elems -> elems
    int max_length -> max_length
org.jboss.netty.util.internal.jzlib.Tree -> org.jboss.netty.util.internal.jzlib.Tree:
    int[] extra_lbits -> extra_lbits
    int[] extra_dbits -> extra_dbits
    int[] extra_blbits -> extra_blbits
    byte[] bl_order -> bl_order
    byte[] _dist_code -> _dist_code
    byte[] _length_code -> _length_code
    int[] base_length -> base_length
    int[] base_dist -> base_dist
    short[] dyn_tree -> dyn_tree
    int max_code -> max_code
    org.jboss.netty.util.internal.jzlib.StaticTree stat_desc -> stat_desc
    int d_code(int) -> d_code
    void gen_bitlen(org.jboss.netty.util.internal.jzlib.Deflate) -> gen_bitlen
    void build_tree(org.jboss.netty.util.internal.jzlib.Deflate) -> build_tree
    void gen_codes(short[],int,short[]) -> gen_codes
    int bi_reverse(int,int) -> bi_reverse
org.jboss.netty.util.internal.jzlib.ZStream -> org.jboss.netty.util.internal.jzlib.ZStream:
    byte[] next_in -> next_in
    int next_in_index -> next_in_index
    int avail_in -> avail_in
    long total_in -> total_in
    byte[] next_out -> next_out
    int next_out_index -> next_out_index
    int avail_out -> avail_out
    long total_out -> total_out
    java.lang.String msg -> msg
    org.jboss.netty.util.internal.jzlib.Deflate dstate -> dstate
    org.jboss.netty.util.internal.jzlib.Inflate istate -> istate
    long adler -> adler
    int crc32 -> crc32
    int inflateInit() -> inflateInit
    int inflateInit(java.lang.Enum) -> inflateInit
    int inflateInit(int) -> inflateInit
    int inflateInit(int,java.lang.Enum) -> inflateInit
    int inflate(int) -> inflate
    int inflateEnd() -> inflateEnd
    int inflateSync() -> inflateSync
    int inflateSetDictionary(byte[],int) -> inflateSetDictionary
    int deflateInit(int) -> deflateInit
    int deflateInit(int,java.lang.Enum) -> deflateInit
    int deflateInit(int,int) -> deflateInit
    int deflateInit(int,int,java.lang.Enum) -> deflateInit
    int deflateInit(int,int,int,java.lang.Enum) -> deflateInit
    int deflate(int) -> deflate
    int deflateEnd() -> deflateEnd
    int deflateParams(int,int) -> deflateParams
    int deflateSetDictionary(byte[],int) -> deflateSetDictionary
    void flush_pending() -> flush_pending
    int read_buf(byte[],int,int) -> read_buf
    void free() -> free
org.jboss.netty.util.internal.jzlib.ZStream$1 -> org.jboss.netty.util.internal.jzlib.ZStream$1:
    int[] $SwitchMap$org$jboss$netty$util$internal$jzlib$JZlib$WrapperType -> $SwitchMap$org$jboss$netty$util$internal$jzlib$JZlib$WrapperType
